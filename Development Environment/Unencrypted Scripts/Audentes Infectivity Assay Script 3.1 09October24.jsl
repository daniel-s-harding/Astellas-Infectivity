// (c) Thomas A. Little Consulting 2018-2019
// Astellas Bioassay
// 12032018 import data via steps as explained in infectivity determination Astellas SOP-Infectivity determination for AT132_Sept2018_JHOct032018.doc
//12102018 updated to include changes to dilution factor map
//08142019 updated based on URS and PDF report feedback
//09062019 updated based on new configuration file 
//09102019 updated based on more current infection plate layout
//09182019 updated based on feedback from Astellas for new numbers of pcr plates
//10302019 added path to specific infectivity reports folder; the infectivity parent folder is the 'save as' directory preference setting
//11062019 added path to tracking and trending folder
//11112019 error traps added (configuration system suit, at least one sample, file loading, enclosing try)
//12162019 Minor version 0.18 validated at Astellas and saved as 1.0.
//02022020 Major version 1.0 updated to 1.1, removed quadratic term from Model 6, added 1 and 2  plate dt saving.
//03032020 Version 1.1 validated at Astellas and saved as 2.0.
//04172024 updated to include infectious particle ratio for each test article per FDA feedback
//07032024 updated to be compatible with JMP 17
//09232024 updated to use slope ratio for parallelism and linearity ratio 
//10032024 updated to use externally studentized residuals and analytical error for outlier detection 
//10092024 updated to be compatible with JMP 18




//Clear all variables
NamesDefaultToHere(1);

//create environment variables
pathlocation =GetEnvironmentVariable("Infectivity");

scriptver = "Astellas Infectivity PLA Script Version 3.1";


// Astellas logo
Astellaslogo = New Image(
		Char To Blob(
			"",
			"base64compressed" 
		),
		"jpeg"
	);

//Set the fonts for the pdf report
fontpref = Get Preferences( fonts );//get user font preferences
Set Preferences(
	Fonts(
		English(
			Text Font( "Segoe UI", 13 ),
			Heading Font( "Segoe UI", 12, Bold ),
			Title Font( "Segoe UI", 14, Bold ),
			Small Font( "Segoe UI", 12 ),
			Monospaced Font( "Segoe UI", 13 ),
			Formula Font( "Segoe UI", 14 ),
			Annotation Font( "Segoe UI", 12 ),
			Axis Font( "Segoe UI", 12 ),
			Marker Font( "Segoe UI", 12 ),
			Axis Title Font( "Segoe UI", 12 ),
			Data Table Font( "Segoe UI", 12 )
		)
	)
);

Set Preferences( Background Color( 2 ) );

tablestyles = Get Preferences(
	Shade Table Headings(),
	Table Heading Column Borders(),
	Table Column Borders(),
	Table Column Group Borders(),
	Table Row Borders(),
	Shade Alternate Table Rows()
);
Set Preferences(
	Shade Table Headings( 1 ),
	Table Heading Column Borders( 1 ),
	Table Column Borders( 1 ),
	Table Column Group Borders( 1 ),
	Table Row Borders( 1 ),
	Shade Alternate Table Rows( 1 )
);

// Setup Criteria
//create variable for spacing in the report
spacer = " ";

//create date and time variables to record the date and time the script is run
datestamper = Long Date( Today() );
dateint = Char( As Date( Today() ) );
timestamp = MDYHMS( Today() );
timestamp1 = Num( timestamp );

//create variables for lines in the report
liner =
"_______________________________________________________________________________________________________________________________________________________________________";
dashliner = "____________________________________________________________________________________________________";


//Get user information of the person running the script including server information jmp version etc
usernamer = Get Environment Variable( "username" );//grabs windows variable username and sets usernamer variable
computernamer = Get Environment Variable( "computername" );//grabs windows variable computername and sets  computername variable
logonserverr = Get Environment Variable( "logonserver" );//grabs windows variable logonserver and sets logonserverr variable
jmpreport = JMP Version();
userdomainr = Get Environment Variable( "userdomain" );//grabs windows variable userdomainr and setsuserdomainr  variable
usernamedisplay = Concat( "User Name: ", usernamer );//concatenate "User Name:"  and usernamer variable for report displays
userdomaindisplay = Concat( "User Domain: ", userdomainr );//concatenate "User Domain:"  and userdomainr variable for report displays
computernamedisplay = Concat( "Computer Name: ", computernamer );//concatenate "Computer Name:"  and computernamer variable for report displays
logonserverdisplay = Concat( "Logon Server: ", logonserverr );//concatenate "Logon Server:"  and logonserverr variable for report displays

// Get the data requirements from the user
//a GUI appears and the user selects the appropriate completed excel material template
				
Filelist1 = Pick File(
	"Select Infectivity Configuration File",
	Concat( pathlocation, "\Run File\" ),
	{"Configuration File|xls;xlsx"},
	1,
	0,
	""
);

//import the excel material template as a data table and name the plate map	
Open(Filelist1[1], invisible);	
configfile =Filelist1[1];			
positionA = Contains( configfile , "/" , -1);//finds first position for file name
datafilenamenopath = Substr( configfile, positionA+1 );//subtracts folder path from file name

positionB = Contains( datafilenamenopath, "." );//finds last position for file name
confignamer = Substr( datafilenamenopath, 1, positionB - 1 );//final template file name

//create variables for all columns in the sample and materials info tab of the excel template
dtconfig = Current Data Table();
column1details = Column( 1 ) << get values;
column2details = Column( 2 ) << get values;
column3details = Column( 3 ) << get values;

//Dynamically read in the Systems Suitability and Validity Criteria from the materials template//Specification Limits
lowerspeclimit=num(column2details[1]);
upperspeclimit=num(column2details[2]);

//Curve Depth Limit
curvedepthlimit = Num( column2details[3] );

//Minimum Sample Size Per Dose (≥)
ndoselimit = Num( column2details[4] );

//Unconstrained EC50 Limit for the standard
EC50reflowerlimit = Num( column2details[5] );
EC50refupperlimit = Num( column2details[6] );

//Constrained - Unconstrained Relative Potency difference (delta) Limit
RPDeltalimit = Num( column2details[7] );

//R2 Standard
R2limit = Num( column2details[8] );

//Outlier Limit; Values less than this number will be marked as outliers by comparison to the Jackknife z 
outlierlimitnum = Num( column2details[9] );

//Between Group Studentized Residuals Outlier Limit
studoutlierlimitnum = Num( column2details[10] );

//Parallelism Slope ratio lower limit 
lowerparallel_limit = Num( column2details[11] );

//Parallelism Slope ratio upper limit 
upperparallel_limit = Num( column2details[12] );

//Linearity Ratio Limit
linearity_limit = Num( column2details[13] );


//Dose Reponse Test (≤)
Doselimit = Num( column2details[14] );

//CV Limit
CVLimit = Num( column2details[15] );

//Infectious Particles Ratio LSL
infectpartLSL = Num( column2details[16] );

//Infectious Particles Ratio USL
infectpartUSL = Num( column2details[17] );

//report file name
filenamer = column2details[19];

//Test Sample names and information
SN1=column2details[20];
SN2=column2details[21];
SN3=column2details[22];
SN4=column2details[23];
SN5=column2details[24];
SN6=column2details[25];

rstandard = column2details[20];

//Number of Plates
platetotal =  column2details[27];

If(
IsMissing(lowerspeclimit) , 
Beep();
win = New Window( "Alert!",
bb = Border Box( Sides( 15 ), // top and bottom border
Text Box( "Lower Specification Limit is Missing!" )
)
);
bb << Set Color( "red" ); // set the border color to red
// Error Report for Configuration File Loading
// Set up the report window
heading = New Window( "Astellas Potency Report",
	V List Box(
		String Col Box( "", {spacer} ),
		H List Box( String Col Box( "", {spacer} ) ),
		String Col Box( "", {spacer} ),
		H List Box( String Col Box( "", {spacer} ) ),
		H List Box( V List Box( Picture Box( Astellaslogo ) ), ),
		H List Box( String Col Box( "", {spacer} ) ),
		H List Box( cb = Text Box( "Astellas Infectivity Assay Report" ) ),
		H List Box( at = Text Box( "JMP Script Error Report" ) ), 

	),
	V List Box( H List Box( String Col Box( "", {spacer} ) ) ),
	V List Box(
		H List Box(
			String Col Box( "", {spacer} ),
			String Col Box( "Configuration File:", {confignamer} ),
			String Col Box( "", {spacer} ),
			String Col Box( "Date: ", {dateint} ),
			String Col Box( "", {spacer} ), 

		),
	),
	V List Box( H List Box( String Col Box( "", {spacer} ) ) ), 
);
cb << Font Color( 19 ) << Set Font Size( 20 ) << set Font Style( "Bold" );
cb << Set Wrap( 1000 );
at << Set Font Size( 20 );
at << Font Color( 19 ) << set Font Style( "Bold" );
Heading << journal << close window;

username = Text Box( "Error:" );
username<< journal ;

win<<journal;
		
//User Report
userreport = New Window( "User Report",
	V List Box(
		String Col Box( "", {spacer} ),
		String Col Box( "User Information",
			{usernamedisplay, computernamedisplay, logonserverdisplay, userdomaindisplay, scriptver,
			Concat( "JMP Version ", jmpreport )}
		),
		String Col Box( "", {spacer} ),
		String Col Box( "", {spacer} ),
		String Col Box( "", {spacer} ), 

	),
	V List Box( H List Box( String Col Box( "", {dashliner, "Analyst Signature/Date"} ) ) ),
	String Col Box( "", {spacer} ),
	String Col Box( "", {spacer} ),
	String Col Box( "", {spacer} ),
	V List Box( H List Box( String Col Box( "", {dashliner, "Approver Signature/Date"} ) ) ), 

);
userreport<<journal<<close window;

//Define setup information to save in pdf
//get the date stamp for the file name
winJOURNAL = Current Journal();
datetimestamper = Substitute( Char( dateint ), ":", "-" );
Current Journal() << Set Window Title( Concat( "Error Report" || "_" || datetimestamper ) );
winJOURNAL = Current Journal();

//set the print footers
winJOURNAL << Set Print Footers(
	"&d;"/*left*/,
	"Astellas Gene Therapies Proprietary and Confidential Information"/*center*/,
	"Page &pn; of &pc;"/*right*/
);
headerleft = Concat( "Error Report" || "_" || datetimestamper );
winJOURNAL << Set Print Headers( headerleft, "", "" );

winJOURNAL << Set page setup(

		margins( 0.5, 0.5, 0.5, 0.5 ), 

		scale( 0.6 ), 

		portrait( 1 ), 

		paper size( "A3" )

	);

	winJOURNAL << get page setup();

//Save pdf journal and data file to chosen file from the preset JMP Preferences
/*
savepath = Char( Get Preferences() );
positionB = Contains( savepath, "Save As Directory" );
pathlocation = Substr( savepath, positionB );

positionC = Contains( pathlocation, "\!"" );
positionD = Contains( pathlocation, "\!"", 1 + positionC );

pathlocation = Substr( pathlocation, 1 + positionC, positionD - (1 + positionC) );
*/

// Save pdf and journal
winJOURNAL << get page setup();//get setup information
winJOURNAL << Save PDF( Concat( pathlocation || "\Reports\" || "Error Report" || "_" || datetimestamper || ".pdf" ) );

Close All( data tables , journals);
Throw("!Lower Specification Limit is Missing!");
);

If(
IsMissing(upperspeclimit) , 
Beep();
win = New Window( "Alert!",
bb = Border Box( Sides( 15 ), // top and bottom border
Text Box( "Upper Specification Limit is Missing!" )
)
);
Close All( data tables , journals );
bb << Set Color( "red" ); // set the border color to red
// Error Report for Configuration File Loading
// Set up the report window
heading = New Window( "Astellas Potency Report",
	V List Box(
		String Col Box( "", {spacer} ),
		H List Box( String Col Box( "", {spacer} ) ),
		String Col Box( "", {spacer} ),
		H List Box( String Col Box( "", {spacer} ) ),
		H List Box( V List Box( Picture Box( Astellaslogo ) ), ),
		H List Box( String Col Box( "", {spacer} ) ),
		H List Box( cb = Text Box( "Astellas Infectivity Assay Report" ) ),
		H List Box( at = Text Box( "JMP Script Error Report" ) ), 

	),
	V List Box( H List Box( String Col Box( "", {spacer} ) ) ),
	V List Box(
		H List Box(
			String Col Box( "", {spacer} ),
			String Col Box( "Configuration File:", {confignamer} ),
			String Col Box( "", {spacer} ),
			String Col Box( "Date: ", {dateint} ),
			String Col Box( "", {spacer} ), 

		),
	),
	V List Box( H List Box( String Col Box( "", {spacer} ) ) ), 
);
cb << Font Color( 19 ) << Set Font Size( 20 ) << set Font Style( "Bold" );
cb << Set Wrap( 1000 );
at << Set Font Size( 20 );
at << Font Color( 19 ) << set Font Style( "Bold" );
Heading << journal << close window;

username = Text Box( "Error:" );
username<< journal ;

win<<journal;
		
//User Report
userreport = New Window( "User Report",
	V List Box(
		String Col Box( "", {spacer} ),
		String Col Box( "User Information",
			{usernamedisplay, computernamedisplay, logonserverdisplay, userdomaindisplay, scriptver,
			Concat( "JMP Version ", jmpreport )}
		),
		String Col Box( "", {spacer} ),
		String Col Box( "", {spacer} ),
		String Col Box( "", {spacer} ), 

	),
	V List Box( H List Box( String Col Box( "", {dashliner, "Analyst Signature/Date"} ) ) ),
	String Col Box( "", {spacer} ),
	String Col Box( "", {spacer} ),
	String Col Box( "", {spacer} ),
	V List Box( H List Box( String Col Box( "", {dashliner, "Approver Signature/Date"} ) ) ), 

);
userreport<<journal<<close window;

//Define setup information to save in pdf
//get the date stamp for the file name
winJOURNAL = Current Journal();
datetimestamper = Substitute( Char( dateint ), ":", "-" );
Current Journal() << Set Window Title( Concat( "Error Report" || "_" || datetimestamper ) );
winJOURNAL = Current Journal();

//set the print footers
winJOURNAL << Set Print Footers(
	"&d;"/*left*/,
	"Astellas Gene Therapies Proprietary and Confidential Information"/*center*/,
	"Page &pn; of &pc;"/*right*/
);
headerleft = Concat( "Error Report" || "_" || datetimestamper );
winJOURNAL << Set Print Headers( headerleft, "", "" );

winJOURNAL << Set page setup(

		margins( 0.5, 0.5, 0.5, 0.5 ), 

		scale( 0.6 ), 

		portrait( 1 ), 

		paper size( "A3" )

	);

	winJOURNAL << get page setup();

//Save pdf journal and data file to chosen file from the preset JMP Preferences


// Save pdf and journal
winJOURNAL << get page setup();//get setup information
winJOURNAL << Save PDF( Concat( pathlocation || "\Reports\" || "Error Report" || "_" || datetimestamper || ".pdf" ) );

Close All( data tables , journals);
Throw("!Upper Specification Limit is Missing!");
);

If(
IsMissing(curvedepthlimit) , 
Beep();
win = New Window( "Alert!",
bb = Border Box( Sides( 15 ), // top and bottom border
Text Box( "Reference Standard Curve Depth Limit Is Missing!", << set wrap (1000));
)
);
Close All( data tables , journals );
bb << Set Color( "red" ); // set the border color to red
// Error Report for Configuration File Loading
// Set up the report window
heading = New Window( "Astellas Potency Report",
	V List Box(
		String Col Box( "", {spacer} ),
		H List Box( String Col Box( "", {spacer} ) ),
		String Col Box( "", {spacer} ),
		H List Box( String Col Box( "", {spacer} ) ),
		H List Box( V List Box( Picture Box( Astellaslogo ) ), ),
		H List Box( String Col Box( "", {spacer} ) ),
		H List Box( cb = Text Box( "Astellas Infectivity Assay Report" ) ),
		H List Box( at = Text Box( "JMP Script Error Report" ) ), 

	),
	V List Box( H List Box( String Col Box( "", {spacer} ) ) ),
	V List Box(
		H List Box(
			String Col Box( "", {spacer} ),
			String Col Box( "Configuration File:", {confignamer} ),
			String Col Box( "", {spacer} ),
			String Col Box( "Date: ", {dateint} ),
			String Col Box( "", {spacer} ), 

		),
	),
	V List Box( H List Box( String Col Box( "", {spacer} ) ) ), 
);
cb << Font Color( 19 ) << Set Font Size( 20 ) << set Font Style( "Bold" );
cb << Set Wrap( 1000 );
at << Set Font Size( 20 );
at << Font Color( 19 ) << set Font Style( "Bold" );
Heading << journal << close window;

username = Text Box( "Error:" );
username<< journal ;

win<<journal;
		
//User Report
userreport = New Window( "User Report",
	V List Box(
		String Col Box( "", {spacer} ),
		String Col Box( "User Information",
			{usernamedisplay, computernamedisplay, logonserverdisplay, userdomaindisplay, scriptver,
			Concat( "JMP Version ", jmpreport )}
		),
		String Col Box( "", {spacer} ),
		String Col Box( "", {spacer} ),
		String Col Box( "", {spacer} ), 

	),
	V List Box( H List Box( String Col Box( "", {dashliner, "Analyst Signature/Date"} ) ) ),
	String Col Box( "", {spacer} ),
	String Col Box( "", {spacer} ),
	String Col Box( "", {spacer} ),
	V List Box( H List Box( String Col Box( "", {dashliner, "Approver Signature/Date"} ) ) ), 

);
userreport<<journal<<close window;

//Define setup information to save in pdf
//get the date stamp for the file name
winJOURNAL = Current Journal();
datetimestamper = Substitute( Char( dateint ), ":", "-" );
Current Journal() << Set Window Title( Concat( "Error Report" || "_" || datetimestamper ) );
winJOURNAL = Current Journal();

//set the print footers
winJOURNAL << Set Print Footers(
	"&d;"/*left*/,
	"Astellas Gene Therapies Proprietary and Confidential Information"/*center*/,
	"Page &pn; of &pc;"/*right*/
);
headerleft = Concat( "Error Report" || "_" || datetimestamper );
winJOURNAL << Set Print Headers( headerleft, "", "" );

winJOURNAL << Set page setup(

		margins( 0.5, 0.5, 0.5, 0.5 ), 

		scale( 0.6 ), 

		portrait( 1 ), 

		paper size( "A3" )

	);

	winJOURNAL << get page setup();



// Save pdf and journal
winJOURNAL << get page setup();//get setup information
winJOURNAL << Save PDF( Concat( pathlocation || "\Reports\" || "Error Report" || "_" || datetimestamper || ".pdf" ) );

Close All( data tables , journals);
Throw("!Reference Standard Curve Depth Limit Is Missing!");
);

If(
IsMissing(ndoselimit) , 
Beep();
win = New Window( "Alert!",
bb = Border Box( Sides( 15 ), // top and bottom border
Text Box( "Sample Size Per Dose Limit Is Missing!", << set wrap (1000));
)
);
Close All( data tables , journals );
bb << Set Color( "red" ); // set the border color to red
// Error Report for Configuration File Loading
// Set up the report window
heading = New Window( "Astellas Potency Report",
	V List Box(
		String Col Box( "", {spacer} ),
		H List Box( String Col Box( "", {spacer} ) ),
		String Col Box( "", {spacer} ),
		H List Box( String Col Box( "", {spacer} ) ),
		H List Box( V List Box( Picture Box( Astellaslogo ) ), ),
		H List Box( String Col Box( "", {spacer} ) ),
		H List Box( cb = Text Box( "Astellas Infectivity Assay Report" ) ),
		H List Box( at = Text Box( "JMP Script Error Report" ) ), 

	),
	V List Box( H List Box( String Col Box( "", {spacer} ) ) ),
	V List Box(
		H List Box(
			String Col Box( "", {spacer} ),
			String Col Box( "Configuration File:", {confignamer} ),
			String Col Box( "", {spacer} ),
			String Col Box( "Date: ", {dateint} ),
			String Col Box( "", {spacer} ), 

		),
	),
	V List Box( H List Box( String Col Box( "", {spacer} ) ) ), 
);
cb << Font Color( 19 ) << Set Font Size( 20 ) << set Font Style( "Bold" );
cb << Set Wrap( 1000 );
at << Set Font Size( 20 );
at << Font Color( 19 ) << set Font Style( "Bold" );
Heading << journal << close window;

username = Text Box( "Error:" );
username<< journal ;

win<<journal;
		
//User Report
userreport = New Window( "User Report",
	V List Box(
		String Col Box( "", {spacer} ),
		String Col Box( "User Information",
			{usernamedisplay, computernamedisplay, logonserverdisplay, userdomaindisplay, scriptver,
			Concat( "JMP Version ", jmpreport )}
		),
		String Col Box( "", {spacer} ),
		String Col Box( "", {spacer} ),
		String Col Box( "", {spacer} ), 

	),
	V List Box( H List Box( String Col Box( "", {dashliner, "Analyst Signature/Date"} ) ) ),
	String Col Box( "", {spacer} ),
	String Col Box( "", {spacer} ),
	String Col Box( "", {spacer} ),
	V List Box( H List Box( String Col Box( "", {dashliner, "Approver Signature/Date"} ) ) ), 

);
userreport<<journal<<close window;

//Define setup information to save in pdf
//get the date stamp for the file name
winJOURNAL = Current Journal();
datetimestamper = Substitute( Char( dateint ), ":", "-" );
Current Journal() << Set Window Title( Concat( "Error Report" || "_" || datetimestamper ) );
winJOURNAL = Current Journal();

//set the print footers
winJOURNAL << Set Print Footers(
	"&d;"/*left*/,
	"Astellas Gene Therapies Proprietary and Confidential Information"/*center*/,
	"Page &pn; of &pc;"/*right*/
);
headerleft = Concat( "Error Report" || "_" || datetimestamper );
winJOURNAL << Set Print Headers( headerleft, "", "" );

winJOURNAL << Set page setup(

		margins( 0.5, 0.5, 0.5, 0.5 ), 

		scale( 0.6 ), 

		portrait( 1 ), 

		paper size( "A3" )

	);

	winJOURNAL << get page setup();



// Save pdf and journal
winJOURNAL << get page setup();//get setup information
winJOURNAL << Save PDF( Concat( pathlocation || "\Reports\" || "Error Report" || "_" || datetimestamper || ".pdf" ) );

Close All( data tables , journals);
Throw("!Sample Size Per Dose Limit Is Missing!");
);

If(
IsMissing(EC50reflowerlimit) , 
Beep();
win = New Window( "Alert!",
bb = Border Box( Sides( 15 ), // top and bottom border
Text Box( "Unconstrained EC50 Standard Lower Limit Is Missing!", << set wrap (1000));
)
);
Close All( data tables , journals );
bb << Set Color( "red" ); // set the border color to red
// Error Report for Configuration File Loading
// Set up the report window
heading = New Window( "Astellas Potency Report",
	V List Box(
		String Col Box( "", {spacer} ),
		H List Box( String Col Box( "", {spacer} ) ),
		String Col Box( "", {spacer} ),
		H List Box( String Col Box( "", {spacer} ) ),
		H List Box( V List Box( Picture Box( Astellaslogo ) ), ),
		H List Box( String Col Box( "", {spacer} ) ),
		H List Box( cb = Text Box( "Astellas Infectivity Assay Report" ) ),
		H List Box( at = Text Box( "JMP Script Error Report" ) ), 

	),
	V List Box( H List Box( String Col Box( "", {spacer} ) ) ),
	V List Box(
		H List Box(
			String Col Box( "", {spacer} ),
			String Col Box( "Configuration File:", {confignamer} ),
			String Col Box( "", {spacer} ),
			String Col Box( "Date: ", {dateint} ),
			String Col Box( "", {spacer} ), 

		),
	),
	V List Box( H List Box( String Col Box( "", {spacer} ) ) ), 
);
cb << Font Color( 19 ) << Set Font Size( 20 ) << set Font Style( "Bold" );
cb << Set Wrap( 1000 );
at << Set Font Size( 20 );
at << Font Color( 19 ) << set Font Style( "Bold" );
Heading << journal << close window;

username = Text Box( "Error:" );
username<< journal ;

win<<journal;
		
//User Report
userreport = New Window( "User Report",
	V List Box(
		String Col Box( "", {spacer} ),
		String Col Box( "User Information",
			{usernamedisplay, computernamedisplay, logonserverdisplay, userdomaindisplay, scriptver,
			Concat( "JMP Version ", jmpreport )}
		),
		String Col Box( "", {spacer} ),
		String Col Box( "", {spacer} ),
		String Col Box( "", {spacer} ), 

	),
	V List Box( H List Box( String Col Box( "", {dashliner, "Analyst Signature/Date"} ) ) ),
	String Col Box( "", {spacer} ),
	String Col Box( "", {spacer} ),
	String Col Box( "", {spacer} ),
	V List Box( H List Box( String Col Box( "", {dashliner, "Approver Signature/Date"} ) ) ), 

);
userreport<<journal<<close window;

//Define setup information to save in pdf
//get the date stamp for the file name
winJOURNAL = Current Journal();
datetimestamper = Substitute( Char( dateint ), ":", "-" );
Current Journal() << Set Window Title( Concat( "Error Report" || "_" || datetimestamper ) );
winJOURNAL = Current Journal();

//set the print footers
winJOURNAL << Set Print Footers(
	"&d;"/*left*/,
	"Astellas Gene Therapies Proprietary and Confidential Information"/*center*/,
	"Page &pn; of &pc;"/*right*/
);
headerleft = Concat( "Error Report" || "_" || datetimestamper );
winJOURNAL << Set Print Headers( headerleft, "", "" );

winJOURNAL << Set page setup(

		margins( 0.5, 0.5, 0.5, 0.5 ), 

		scale( 0.6 ), 

		portrait( 1 ), 

		paper size( "A3" )

	);

	winJOURNAL << get page setup();



// Save pdf and journal
winJOURNAL << get page setup();//get setup information
winJOURNAL << Save PDF( Concat( pathlocation || "\Reports\" || "Error Report" || "_" || datetimestamper || ".pdf" ) );

Close All( data tables , journals);
Throw("!Unconstrained EC50 Standard Lower Limit Is Missing!");
);

If(
IsMissing(EC50refupperlimit) , 
Beep();
win = New Window( "Alert!",
bb = Border Box( Sides( 15 ), // top and bottom border
Text Box( "Unconstrained EC50 Standard Upper Limit Is Missing!", << set wrap (1000));
)
);
Close All( data tables , journals );
bb << Set Color( "red" ); // set the border color to red
// Error Report for Configuration File Loading
// Set up the report window
heading = New Window( "Astellas Potency Report",
	V List Box(
		String Col Box( "", {spacer} ),
		H List Box( String Col Box( "", {spacer} ) ),
		String Col Box( "", {spacer} ),
		H List Box( String Col Box( "", {spacer} ) ),
		H List Box( V List Box( Picture Box( Astellaslogo ) ), ),
		H List Box( String Col Box( "", {spacer} ) ),
		H List Box( cb = Text Box( "Astellas Infectivity Assay Report" ) ),
		H List Box( at = Text Box( "JMP Script Error Report" ) ), 

	),
	V List Box( H List Box( String Col Box( "", {spacer} ) ) ),
	V List Box(
		H List Box(
			String Col Box( "", {spacer} ),
			String Col Box( "Configuration File:", {confignamer} ),
			String Col Box( "", {spacer} ),
			String Col Box( "Date: ", {dateint} ),
			String Col Box( "", {spacer} ), 

		),
	),
	V List Box( H List Box( String Col Box( "", {spacer} ) ) ), 
);
cb << Font Color( 19 ) << Set Font Size( 20 ) << set Font Style( "Bold" );
cb << Set Wrap( 1000 );
at << Set Font Size( 20 );
at << Font Color( 19 ) << set Font Style( "Bold" );
Heading << journal << close window;

username = Text Box( "Error:" );
username<< journal ;

win<<journal;
		
//User Report
userreport = New Window( "User Report",
	V List Box(
		String Col Box( "", {spacer} ),
		String Col Box( "User Information",
			{usernamedisplay, computernamedisplay, logonserverdisplay, userdomaindisplay, scriptver,
			Concat( "JMP Version ", jmpreport )}
		),
		String Col Box( "", {spacer} ),
		String Col Box( "", {spacer} ),
		String Col Box( "", {spacer} ), 

	),
	V List Box( H List Box( String Col Box( "", {dashliner, "Analyst Signature/Date"} ) ) ),
	String Col Box( "", {spacer} ),
	String Col Box( "", {spacer} ),
	String Col Box( "", {spacer} ),
	V List Box( H List Box( String Col Box( "", {dashliner, "Approver Signature/Date"} ) ) ), 

);
userreport<<journal<<close window;

//Define setup information to save in pdf
//get the date stamp for the file name
winJOURNAL = Current Journal();
datetimestamper = Substitute( Char( dateint ), ":", "-" );
Current Journal() << Set Window Title( Concat( "Error Report" || "_" || datetimestamper ) );
winJOURNAL = Current Journal();

//set the print footers
winJOURNAL << Set Print Footers(
	"&d;"/*left*/,
	"Astellas Gene Therapies Proprietary and Confidential Information"/*center*/,
	"Page &pn; of &pc;"/*right*/
);
headerleft = Concat( "Error Report" || "_" || datetimestamper );
winJOURNAL << Set Print Headers( headerleft, "", "" );

winJOURNAL << Set page setup(

		margins( 0.5, 0.5, 0.5, 0.5 ), 

		scale( 0.6 ), 

		portrait( 1 ), 

		paper size( "A3" )

	);

	winJOURNAL << get page setup();



// Save pdf and journal
winJOURNAL << get page setup();//get setup information
winJOURNAL << Save PDF( Concat( pathlocation || "\Reports\" || "Error Report" || "_" || datetimestamper || ".pdf" ) );

Close All( data tables , journals);
Throw("!Unconstrained EC50 Standard Upper Limit  Is Missing!");
);

If(
IsMissing(RPDeltalimit) , 
Beep();
win = New Window( "Alert!",
bb = Border Box( Sides( 15 ), // top and bottom border
Text Box( "% Relative Potency Delta (Constrained – Unconstrained) Limit Is Missing!", << set wrap (1000));
)
);
Close All( data tables , journals );
bb << Set Color( "red" ); // set the border color to red
// Error Report for Configuration File Loading
// Set up the report window
heading = New Window( "Astellas Potency Report",
	V List Box(
		String Col Box( "", {spacer} ),
		H List Box( String Col Box( "", {spacer} ) ),
		String Col Box( "", {spacer} ),
		H List Box( String Col Box( "", {spacer} ) ),
		H List Box( V List Box( Picture Box( Astellaslogo ) ), ),
		H List Box( String Col Box( "", {spacer} ) ),
		H List Box( cb = Text Box( "Astellas Infectivity Assay Report" ) ),
		H List Box( at = Text Box( "JMP Script Error Report" ) ), 

	),
	V List Box( H List Box( String Col Box( "", {spacer} ) ) ),
	V List Box(
		H List Box(
			String Col Box( "", {spacer} ),
			String Col Box( "Configuration File:", {confignamer} ),
			String Col Box( "", {spacer} ),
			String Col Box( "Date: ", {dateint} ),
			String Col Box( "", {spacer} ), 

		),
	),
	V List Box( H List Box( String Col Box( "", {spacer} ) ) ), 
);
cb << Font Color( 19 ) << Set Font Size( 20 ) << set Font Style( "Bold" );
cb << Set Wrap( 1000 );
at << Set Font Size( 20 );
at << Font Color( 19 ) << set Font Style( "Bold" );
Heading << journal << close window;

username = Text Box( "Error:" );
username<< journal ;

win<<journal;
		
//User Report
userreport = New Window( "User Report",
	V List Box(
		String Col Box( "", {spacer} ),
		String Col Box( "User Information",
			{usernamedisplay, computernamedisplay, logonserverdisplay, userdomaindisplay, scriptver,
			Concat( "JMP Version ", jmpreport )}
		),
		String Col Box( "", {spacer} ),
		String Col Box( "", {spacer} ),
		String Col Box( "", {spacer} ), 

	),
	V List Box( H List Box( String Col Box( "", {dashliner, "Analyst Signature/Date"} ) ) ),
	String Col Box( "", {spacer} ),
	String Col Box( "", {spacer} ),
	String Col Box( "", {spacer} ),
	V List Box( H List Box( String Col Box( "", {dashliner, "Approver Signature/Date"} ) ) ), 

);
userreport<<journal<<close window;

//Define setup information to save in pdf
//get the date stamp for the file name
winJOURNAL = Current Journal();
datetimestamper = Substitute( Char( dateint ), ":", "-" );
Current Journal() << Set Window Title( Concat( "Error Report" || "_" || datetimestamper ) );
winJOURNAL = Current Journal();

//set the print footers
winJOURNAL << Set Print Footers(
	"&d;"/*left*/,
	"Astellas Gene Therapies Proprietary and Confidential Information"/*center*/,
	"Page &pn; of &pc;"/*right*/
);
headerleft = Concat( "Error Report" || "_" || datetimestamper );
winJOURNAL << Set Print Headers( headerleft, "", "" );

winJOURNAL << Set page setup(

		margins( 0.5, 0.5, 0.5, 0.5 ), 

		scale( 0.6 ), 

		portrait( 1 ), 

		paper size( "A3" )

	);

	winJOURNAL << get page setup();


// Save pdf and journal
winJOURNAL << get page setup();//get setup information
winJOURNAL << Save PDF( Concat( pathlocation || "\Reports\" || "Error Report" || "_" || datetimestamper || ".pdf" ) );

Close All( data tables , journals);
Throw("!% Relative Potency Delta (Constrained – Unconstrained) Limit  Is Missing!");
);

If(
IsMissing(R2limit) , 
Beep();
win = New Window( "Alert!",
bb = Border Box( Sides( 15 ), // top and bottom border
Text Box( "R-Squared Limit Is Missing!", << set wrap (1000));
)
);
Close All( data tables , journals );
bb << Set Color( "red" ); // set the border color to red
// Error Report for Configuration File Loading
// Set up the report window
heading = New Window( "Astellas Potency Report",
	V List Box(
		String Col Box( "", {spacer} ),
		H List Box( String Col Box( "", {spacer} ) ),
		String Col Box( "", {spacer} ),
		H List Box( String Col Box( "", {spacer} ) ),
		H List Box( V List Box( Picture Box( Astellaslogo ) ), ),
		H List Box( String Col Box( "", {spacer} ) ),
		H List Box( cb = Text Box( "Astellas Infectivity Assay Report" ) ),
		H List Box( at = Text Box( "JMP Script Error Report" ) ), 

	),
	V List Box( H List Box( String Col Box( "", {spacer} ) ) ),
	V List Box(
		H List Box(
			String Col Box( "", {spacer} ),
			String Col Box( "Configuration File:", {confignamer} ),
			String Col Box( "", {spacer} ),
			String Col Box( "Date: ", {dateint} ),
			String Col Box( "", {spacer} ), 

		),
	),
	V List Box( H List Box( String Col Box( "", {spacer} ) ) ), 
);
cb << Font Color( 19 ) << Set Font Size( 20 ) << set Font Style( "Bold" );
cb << Set Wrap( 1000 );
at << Set Font Size( 20 );
at << Font Color( 19 ) << set Font Style( "Bold" );
Heading << journal << close window;

username = Text Box( "Error:" );
username<< journal ;

win<<journal;
		
//User Report
userreport = New Window( "User Report",
	V List Box(
		String Col Box( "", {spacer} ),
		String Col Box( "User Information",
			{usernamedisplay, computernamedisplay, logonserverdisplay, userdomaindisplay, scriptver,
			Concat( "JMP Version ", jmpreport )}
		),
		String Col Box( "", {spacer} ),
		String Col Box( "", {spacer} ),
		String Col Box( "", {spacer} ), 

	),
	V List Box( H List Box( String Col Box( "", {dashliner, "Analyst Signature/Date"} ) ) ),
	String Col Box( "", {spacer} ),
	String Col Box( "", {spacer} ),
	String Col Box( "", {spacer} ),
	V List Box( H List Box( String Col Box( "", {dashliner, "Approver Signature/Date"} ) ) ), 

);
userreport<<journal<<close window;

//Define setup information to save in pdf
//get the date stamp for the file name
winJOURNAL = Current Journal();
datetimestamper = Substitute( Char( dateint ), ":", "-" );
Current Journal() << Set Window Title( Concat( "Error Report" || "_" || datetimestamper ) );
winJOURNAL = Current Journal();

//set the print footers
winJOURNAL << Set Print Footers(
	"&d;"/*left*/,
	"Astellas Gene Therapies Proprietary and Confidential Information"/*center*/,
	"Page &pn; of &pc;"/*right*/
);
headerleft = Concat( "Error Report" || "_" || datetimestamper );
winJOURNAL << Set Print Headers( headerleft, "", "" );

winJOURNAL << Set page setup(

		margins( 0.5, 0.5, 0.5, 0.5 ), 

		scale( 0.6 ), 

		portrait( 1 ), 

		paper size( "A3" )

	);

	winJOURNAL << get page setup();



// Save pdf and journal
winJOURNAL << get page setup();//get setup information
winJOURNAL << Save PDF( Concat( pathlocation || "\Reports\" || "Error Report" || "_" || datetimestamper || ".pdf" ) );

Close All( data tables , journals);
Throw("!R-Squared Limit  Is Missing!");
);

If(
IsMissing(outlierlimitnum) , 
Beep();
win = New Window( "Alert!",
bb = Border Box( Sides( 15 ), // top and bottom border
Text Box( "Within Group Jackknife z Outlier Limit Is Missing!", << set wrap (1000));
)
);
Close All( data tables , journals );
bb << Set Color( "red" ); // set the border color to red
// Error Report for Configuration File Loading
// Set up the report window
heading = New Window( "Astellas Potency Report",
	V List Box(
		String Col Box( "", {spacer} ),
		H List Box( String Col Box( "", {spacer} ) ),
		String Col Box( "", {spacer} ),
		H List Box( String Col Box( "", {spacer} ) ),
		H List Box( V List Box( Picture Box( Astellaslogo ) ), ),
		H List Box( String Col Box( "", {spacer} ) ),
		H List Box( cb = Text Box( "Astellas Infectivity Assay Report" ) ),
		H List Box( at = Text Box( "JMP Script Error Report" ) ), 

	),
	V List Box( H List Box( String Col Box( "", {spacer} ) ) ),
	V List Box(
		H List Box(
			String Col Box( "", {spacer} ),
			String Col Box( "Configuration File:", {confignamer} ),
			String Col Box( "", {spacer} ),
			String Col Box( "Date: ", {dateint} ),
			String Col Box( "", {spacer} ), 

		),
	),
	V List Box( H List Box( String Col Box( "", {spacer} ) ) ), 
);
cb << Font Color( 19 ) << Set Font Size( 20 ) << set Font Style( "Bold" );
cb << Set Wrap( 1000 );
at << Set Font Size( 20 );
at << Font Color( 19 ) << set Font Style( "Bold" );
Heading << journal << close window;

username = Text Box( "Error:" );
username<< journal ;

win<<journal;
		
//User Report
userreport = New Window( "User Report",
	V List Box(
		String Col Box( "", {spacer} ),
		String Col Box( "User Information",
			{usernamedisplay, computernamedisplay, logonserverdisplay, userdomaindisplay, scriptver,
			Concat( "JMP Version ", jmpreport )}
		),
		String Col Box( "", {spacer} ),
		String Col Box( "", {spacer} ),
		String Col Box( "", {spacer} ), 

	),
	V List Box( H List Box( String Col Box( "", {dashliner, "Analyst Signature/Date"} ) ) ),
	String Col Box( "", {spacer} ),
	String Col Box( "", {spacer} ),
	String Col Box( "", {spacer} ),
	V List Box( H List Box( String Col Box( "", {dashliner, "Approver Signature/Date"} ) ) ), 

);
userreport<<journal<<close window;

//Define setup information to save in pdf
//get the date stamp for the file name
winJOURNAL = Current Journal();
datetimestamper = Substitute( Char( dateint ), ":", "-" );
Current Journal() << Set Window Title( Concat( "Error Report" || "_" || datetimestamper ) );
winJOURNAL = Current Journal();

//set the print footers
winJOURNAL << Set Print Footers(
	"&d;"/*left*/,
	"Astellas Gene Therapies Proprietary and Confidential Information"/*center*/,
	"Page &pn; of &pc;"/*right*/
);
headerleft = Concat( "Error Report" || "_" || datetimestamper );
winJOURNAL << Set Print Headers( headerleft, "", "" );

winJOURNAL << Set page setup(

		margins( 0.5, 0.5, 0.5, 0.5 ), 

		scale( 0.6 ), 

		portrait( 1 ), 

		paper size( "A3" )

	);

	winJOURNAL << get page setup();

//Save pdf journal and data file to chosen file from the preset JMP Preferences
savepath = Char( Get Preferences() );
positionB = Contains( savepath, "Save As Directory" );
pathlocation = Substr( savepath, positionB );

positionC = Contains( pathlocation, "\!"" );
positionD = Contains( pathlocation, "\!"", 1 + positionC );

pathlocation = Substr( pathlocation, 1 + positionC, positionD - (1 + positionC) );

// Save pdf and journal
winJOURNAL << get page setup();//get setup information
winJOURNAL << Save PDF( Concat( pathlocation || "\Reports\" || "Error Report" || "_" || datetimestamper || ".pdf" ) );

Close All( data tables , journals);
Throw("!Within Group Jackknife z Outlier Limit  Is Missing!");
);

If(
IsMissing(studoutlierlimitnum) , 
Beep();
win = New Window( "Alert!",
bb = Border Box( Sides( 15 ), // top and bottom border
Text Box( "Between Group Studentized Residuals Outlier Limit Is Missing!", << set wrap (1000));
)
);
Close All( data tables , journals );
bb << Set Color( "red" ); // set the border color to red
// Error Report for Configuration File Loading
// Set up the report window
heading = New Window( "Astellas Potency Report",
	V List Box(
		String Col Box( "", {spacer} ),
		H List Box( String Col Box( "", {spacer} ) ),
		String Col Box( "", {spacer} ),
		H List Box( String Col Box( "", {spacer} ) ),
		H List Box( V List Box( Picture Box( Astellaslogo ) ), ),
		H List Box( String Col Box( "", {spacer} ) ),
		H List Box( cb = Text Box( "Astellas Infectivity Assay Report" ) ),
		H List Box( at = Text Box( "JMP Script Error Report" ) ), 

	),
	V List Box( H List Box( String Col Box( "", {spacer} ) ) ),
	V List Box(
		H List Box(
			String Col Box( "", {spacer} ),
			String Col Box( "Configuration File:", {confignamer} ),
			String Col Box( "", {spacer} ),
			String Col Box( "Date: ", {dateint} ),
			String Col Box( "", {spacer} ), 

		),
	),
	V List Box( H List Box( String Col Box( "", {spacer} ) ) ), 
);
cb << Font Color( 19 ) << Set Font Size( 20 ) << set Font Style( "Bold" );
cb << Set Wrap( 1000 );
at << Set Font Size( 20 );
at << Font Color( 19 ) << set Font Style( "Bold" );
Heading << journal << close window;

username = Text Box( "Error:" );
username<< journal ;

win<<journal;
		
//User Report
userreport = New Window( "User Report",
	V List Box(
		String Col Box( "", {spacer} ),
		String Col Box( "User Information",
			{usernamedisplay, computernamedisplay, logonserverdisplay, userdomaindisplay, scriptver,
			Concat( "JMP Version ", jmpreport )}
		),
		String Col Box( "", {spacer} ),
		String Col Box( "", {spacer} ),
		String Col Box( "", {spacer} ), 

	),
	V List Box( H List Box( String Col Box( "", {dashliner, "Analyst Signature/Date"} ) ) ),
	String Col Box( "", {spacer} ),
	String Col Box( "", {spacer} ),
	String Col Box( "", {spacer} ),
	V List Box( H List Box( String Col Box( "", {dashliner, "Approver Signature/Date"} ) ) ), 

);
userreport<<journal<<close window;

//Define setup information to save in pdf
//get the date stamp for the file name
winJOURNAL = Current Journal();
datetimestamper = Substitute( Char( dateint ), ":", "-" );
Current Journal() << Set Window Title( Concat( "Error Report" || "_" || datetimestamper ) );
winJOURNAL = Current Journal();

//set the print footers
winJOURNAL << Set Print Footers(
	"&d;"/*left*/,
	"Astellas Gene Therapies Proprietary and Confidential Information"/*center*/,
	"Page &pn; of &pc;"/*right*/
);
headerleft = Concat( "Error Report" || "_" || datetimestamper );
winJOURNAL << Set Print Headers( headerleft, "", "" );

winJOURNAL << Set page setup(

		margins( 0.5, 0.5, 0.5, 0.5 ), 

		scale( 0.6 ), 

		portrait( 1 ), 

		paper size( "A3" )

	);

	winJOURNAL << get page setup();



// Save pdf and journal
winJOURNAL << get page setup();//get setup information
winJOURNAL << Save PDF( Concat( pathlocation || "\Reports\" || "Error Report" || "_" || datetimestamper || ".pdf" ) );

Close All( data tables , journals);
Throw("!Between Group Studentized Residuals Outlier Limit  Is Missing!");
);

If(
IsMissing(lowerparallel_limit) , 
Beep();
win = New Window( "Alert!",
bb = Border Box( Sides( 15 ), // top and bottom border
Text Box( "Parallelism Slope Ratio Lower Limit Is Missing!", << set wrap (1000));
)
);
Close All( data tables , journals );
bb << Set Color( "red" ); // set the border color to red
// Error Report for Configuration File Loading
// Set up the report window
heading = New Window( "Astellas Potency Report",
	V List Box(
		String Col Box( "", {spacer} ),
		H List Box( String Col Box( "", {spacer} ) ),
		String Col Box( "", {spacer} ),
		H List Box( String Col Box( "", {spacer} ) ),
		H List Box( V List Box( Picture Box( Astellaslogo ) ), ),
		H List Box( String Col Box( "", {spacer} ) ),
		H List Box( cb = Text Box( "Astellas Infectivity Assay Report" ) ),
		H List Box( at = Text Box( "JMP Script Error Report" ) ), 

	),
	V List Box( H List Box( String Col Box( "", {spacer} ) ) ),
	V List Box(
		H List Box(
			String Col Box( "", {spacer} ),
			String Col Box( "Configuration File:", {confignamer} ),
			String Col Box( "", {spacer} ),
			String Col Box( "Date: ", {dateint} ),
			String Col Box( "", {spacer} ), 

		),
	),
	V List Box( H List Box( String Col Box( "", {spacer} ) ) ), 
);
cb << Font Color( 19 ) << Set Font Size( 20 ) << set Font Style( "Bold" );
cb << Set Wrap( 1000 );
at << Set Font Size( 20 );
at << Font Color( 19 ) << set Font Style( "Bold" );
Heading << journal << close window;

username = Text Box( "Error:" );
username<< journal ;

win<<journal;
		
//User Report
userreport = New Window( "User Report",
	V List Box(
		String Col Box( "", {spacer} ),
		String Col Box( "User Information",
			{usernamedisplay, computernamedisplay, logonserverdisplay, userdomaindisplay, scriptver,
			Concat( "JMP Version ", jmpreport )}
		),
		String Col Box( "", {spacer} ),
		String Col Box( "", {spacer} ),
		String Col Box( "", {spacer} ), 

	),
	V List Box( H List Box( String Col Box( "", {dashliner, "Analyst Signature/Date"} ) ) ),
	String Col Box( "", {spacer} ),
	String Col Box( "", {spacer} ),
	String Col Box( "", {spacer} ),
	V List Box( H List Box( String Col Box( "", {dashliner, "Approver Signature/Date"} ) ) ), 

);
userreport<<journal<<close window;

//Define setup information to save in pdf
//get the date stamp for the file name
winJOURNAL = Current Journal();
datetimestamper = Substitute( Char( dateint ), ":", "-" );
Current Journal() << Set Window Title( Concat( "Error Report" || "_" || datetimestamper ) );
winJOURNAL = Current Journal();

//set the print footers
winJOURNAL << Set Print Footers(
	"&d;"/*left*/,
	"Astellas Gene Therapies Proprietary and Confidential Information"/*center*/,
	"Page &pn; of &pc;"/*right*/
);
headerleft = Concat( "Error Report" || "_" || datetimestamper );
winJOURNAL << Set Print Headers( headerleft, "", "" );

winJOURNAL << Set page setup(

		margins( 0.5, 0.5, 0.5, 0.5 ), 

		scale( 0.6 ), 

		portrait( 1 ), 

		paper size( "A3" )

	);

	winJOURNAL << get page setup();


// Save pdf and journal
winJOURNAL << get page setup();//get setup information
winJOURNAL << Save PDF( Concat( pathlocation || "\Reports\" || "Error Report" || "_" || datetimestamper || ".pdf" ) );

Close All( data tables , journals);
Throw("!Parallelism Slope Ratio Lower Limit Is Missing!");
);

If(
IsMissing(upperparallel_limit) , 
Beep();
win = New Window( "Alert!",
bb = Border Box( Sides( 15 ), // top and bottom border
Text Box( "Parallelism Slope Ratio Upper Limit Is Missing!", << set wrap (1000));
)
);
Close All( data tables , journals );
bb << Set Color( "red" ); // set the border color to red
// Error Report for Configuration File Loading
// Set up the report window
heading = New Window( "Astellas Potency Report",
	V List Box(
		String Col Box( "", {spacer} ),
		H List Box( String Col Box( "", {spacer} ) ),
		String Col Box( "", {spacer} ),
		H List Box( String Col Box( "", {spacer} ) ),
		H List Box( V List Box( Picture Box( Astellaslogo ) ), ),
		H List Box( String Col Box( "", {spacer} ) ),
		H List Box( cb = Text Box( "Astellas AT132 InfectivityAssay Report" ) ),
		H List Box( at = Text Box( "JMP Script Error Report" ) ), 

	),
	V List Box( H List Box( String Col Box( "", {spacer} ) ) ),
	V List Box(
		H List Box(
			String Col Box( "", {spacer} ),
			String Col Box( "Configuration File:", {confignamer} ),
			String Col Box( "", {spacer} ),
			String Col Box( "Date: ", {dateint} ),
			String Col Box( "", {spacer} ), 

		),
	),
	V List Box( H List Box( String Col Box( "", {spacer} ) ) ), 
);
cb << Font Color( 19 ) << Set Font Size( 20 ) << set Font Style( "Bold" );
cb << Set Wrap( 1000 );
at << Set Font Size( 20 );
at << Font Color( 19 ) << set Font Style( "Bold" );
Heading << journal << close window;

username = Text Box( "Error:" );
username<< journal ;

win<<journal;
		
//User Report
userreport = New Window( "User Report",
	V List Box(
		String Col Box( "", {spacer} ),
		String Col Box( "User Information",
			{usernamedisplay, computernamedisplay, logonserverdisplay, userdomaindisplay, scriptver,
			Concat( "JMP Version ", jmpreport )}
		),
		String Col Box( "", {spacer} ),
		String Col Box( "", {spacer} ),
		String Col Box( "", {spacer} ), 

	),
	V List Box( H List Box( String Col Box( "", {dashliner, "Analyst Signature/Date"} ) ) ),
	String Col Box( "", {spacer} ),
	String Col Box( "", {spacer} ),
	String Col Box( "", {spacer} ),
	V List Box( H List Box( String Col Box( "", {dashliner, "Approver Signature/Date"} ) ) ), 

);
userreport<<journal<<close window;

//Define setup information to save in pdf
//get the date stamp for the file name
winJOURNAL = Current Journal();
datetimestamper = Substitute( Char( dateint ), ":", "-" );
Current Journal() << Set Window Title( Concat( "Error Report" || "_" || datetimestamper ) );
winJOURNAL = Current Journal();

//set the print footers
winJOURNAL << Set Print Footers(
	"&d;"/*left*/,
	"Astellas Gene Therapies Proprietary and Confidential Information"/*center*/,
	"Page &pn; of &pc;"/*right*/
);
headerleft = Concat( "Error Report" || "_" || datetimestamper );
winJOURNAL << Set Print Headers( headerleft, "", "" );

winJOURNAL << Set page setup(

		margins( 0.5, 0.5, 0.5, 0.5 ), 

		scale( 0.6 ), 

		portrait( 1 ), 

		paper size( "A3" )

	);

	winJOURNAL << get page setup();


// Save pdf and journal
winJOURNAL << get page setup();//get setup information
winJOURNAL << Save PDF( Concat( pathlocation || "\Protein Expression\Reports\" || "Error Report" || "_" || datetimestamper || ".pdf" ) );

Close All( data tables , journals);
Throw("!Parallelism Slope Ratio Upper Limit Is Missing!");
);
If(
IsMissing(linearity_limit) , 
Beep();
win = New Window( "Alert!",
bb = Border Box( Sides( 15 ), // top and bottom border
Text Box( "Linearity Ratio Limit Is Missing!", << set wrap (1000));
)
);
Close All( data tables , journals );
bb << Set Color( "red" ); // set the border color to red
// Error Report for Configuration File Loading
// Set up the report window
heading = New Window( "Astellas Potency Report",
	V List Box(
		String Col Box( "", {spacer} ),
		H List Box( String Col Box( "", {spacer} ) ),
		String Col Box( "", {spacer} ),
		H List Box( String Col Box( "", {spacer} ) ),
		H List Box( V List Box( Picture Box( Astellaslogo ) ), ),
		H List Box( String Col Box( "", {spacer} ) ),
		H List Box( cb = Text Box( "Astellas AT132 InfectivityAssay Report" ) ),
		H List Box( at = Text Box( "JMP Script Error Report" ) ), 

	),
	V List Box( H List Box( String Col Box( "", {spacer} ) ) ),
	V List Box(
		H List Box(
			String Col Box( "", {spacer} ),
			String Col Box( "Configuration File:", {confignamer} ),
			String Col Box( "", {spacer} ),
			String Col Box( "Date: ", {dateint} ),
			String Col Box( "", {spacer} ), 

		),
	),
	V List Box( H List Box( String Col Box( "", {spacer} ) ) ), 
);
cb << Font Color( 19 ) << Set Font Size( 20 ) << set Font Style( "Bold" );
cb << Set Wrap( 1000 );
at << Set Font Size( 20 );
at << Font Color( 19 ) << set Font Style( "Bold" );
Heading << journal << close window;

username = Text Box( "Error:" );
username<< journal ;

win<<journal;
		
//User Report
userreport = New Window( "User Report",
	V List Box(
		String Col Box( "", {spacer} ),
		String Col Box( "User Information",
			{usernamedisplay, computernamedisplay, logonserverdisplay, userdomaindisplay, scriptver,
			Concat( "JMP Version ", jmpreport )}
		),
		String Col Box( "", {spacer} ),
		String Col Box( "", {spacer} ),
		String Col Box( "", {spacer} ), 

	),
	V List Box( H List Box( String Col Box( "", {dashliner, "Analyst Signature/Date"} ) ) ),
	String Col Box( "", {spacer} ),
	String Col Box( "", {spacer} ),
	String Col Box( "", {spacer} ),
	V List Box( H List Box( String Col Box( "", {dashliner, "Approver Signature/Date"} ) ) ), 

);
userreport<<journal<<close window;

//Define setup information to save in pdf
//get the date stamp for the file name
winJOURNAL = Current Journal();
datetimestamper = Substitute( Char( dateint ), ":", "-" );
Current Journal() << Set Window Title( Concat( "Error Report" || "_" || datetimestamper ) );
winJOURNAL = Current Journal();

//set the print footers
winJOURNAL << Set Print Footers(
	"&d;"/*left*/,
	"Astellas Gene Therapies Proprietary and Confidential Information"/*center*/,
	"Page &pn; of &pc;"/*right*/
);
headerleft = Concat( "Error Report" || "_" || datetimestamper );
winJOURNAL << Set Print Headers( headerleft, "", "" );

winJOURNAL << Set page setup(

		margins( 0.5, 0.5, 0.5, 0.5 ), 

		scale( 0.6 ), 

		portrait( 1 ), 

		paper size( "A3" )

	);

	winJOURNAL << get page setup();


// Save pdf and journal
winJOURNAL << get page setup();//get setup information
winJOURNAL << Save PDF( Concat( pathlocation || "\Protein Expression\Reports\" || "Error Report" || "_" || datetimestamper || ".pdf" ) );

Close All( data tables , journals);
Throw("!Linearity Ratio Lower Limit Is Missing!");
);


If(
IsMissing(Doselimit) , 
Beep();
win = New Window( "Alert!",
bb = Border Box( Sides( 15 ), // top and bottom border
Text Box( "Dose Response Test Limit Is Missing!", << set wrap (1000));
)
);
Close All( data tables , journals );
bb << Set Color( "red" ); // set the border color to red
// Error Report for Configuration File Loading
// Set up the report window
heading = New Window( "Astellas Potency Report",
	V List Box(
		String Col Box( "", {spacer} ),
		H List Box( String Col Box( "", {spacer} ) ),
		String Col Box( "", {spacer} ),
		H List Box( String Col Box( "", {spacer} ) ),
		H List Box( V List Box( Picture Box( Astellaslogo ) ), ),
		H List Box( String Col Box( "", {spacer} ) ),
		H List Box( cb = Text Box( "Astellas Infectivity Assay Report" ) ),
		H List Box( at = Text Box( "JMP Script Error Report" ) ), 

	),
	V List Box( H List Box( String Col Box( "", {spacer} ) ) ),
	V List Box(
		H List Box(
			String Col Box( "", {spacer} ),
			String Col Box( "Configuration File:", {confignamer} ),
			String Col Box( "", {spacer} ),
			String Col Box( "Date: ", {dateint} ),
			String Col Box( "", {spacer} ), 

		),
	),
	V List Box( H List Box( String Col Box( "", {spacer} ) ) ), 
);
cb << Font Color( 19 ) << Set Font Size( 20 ) << set Font Style( "Bold" );
cb << Set Wrap( 1000 );
at << Set Font Size( 20 );
at << Font Color( 19 ) << set Font Style( "Bold" );
Heading << journal << close window;

username = Text Box( "Error:" );
username<< journal ;

win<<journal;
		
//User Report
userreport = New Window( "User Report",
	V List Box(
		String Col Box( "", {spacer} ),
		String Col Box( "User Information",
			{usernamedisplay, computernamedisplay, logonserverdisplay, userdomaindisplay, scriptver,
			Concat( "JMP Version ", jmpreport )}
		),
		String Col Box( "", {spacer} ),
		String Col Box( "", {spacer} ),
		String Col Box( "", {spacer} ), 

	),
	V List Box( H List Box( String Col Box( "", {dashliner, "Analyst Signature/Date"} ) ) ),
	String Col Box( "", {spacer} ),
	String Col Box( "", {spacer} ),
	String Col Box( "", {spacer} ),
	V List Box( H List Box( String Col Box( "", {dashliner, "Approver Signature/Date"} ) ) ), 

);
userreport<<journal<<close window;

//Define setup information to save in pdf
//get the date stamp for the file name
winJOURNAL = Current Journal();
datetimestamper = Substitute( Char( dateint ), ":", "-" );
Current Journal() << Set Window Title( Concat( "Error Report" || "_" || datetimestamper ) );
winJOURNAL = Current Journal();

//set the print footers
winJOURNAL << Set Print Footers(
	"&d;"/*left*/,
	"Astellas Gene Therapies Proprietary and Confidential Information"/*center*/,
	"Page &pn; of &pc;"/*right*/
);
headerleft = Concat( "Error Report" || "_" || datetimestamper );
winJOURNAL << Set Print Headers( headerleft, "", "" );

winJOURNAL << Set page setup(

		margins( 0.5, 0.5, 0.5, 0.5 ), 

		scale( 0.6 ), 

		portrait( 1 ), 

		paper size( "A3" )

	);

	winJOURNAL << get page setup();


// Save pdf and journal
winJOURNAL << get page setup();//get setup information
winJOURNAL << Save PDF( Concat( pathlocation || "\Reports\" || "Error Report" || "_" || datetimestamper || ".pdf" ) );

Close All( data tables , journals);
Throw("!Dose Response Test Limit Is Missing!");
);

If(
IsMissing(CVLimit) , 
Beep();
win = New Window( "Alert!",
bb = Border Box( Sides( 15 ), // top and bottom border
Text Box( "CV Limit Is Missing!", << set wrap (1000));
)
);
Close All( data tables , journals );
bb << Set Color( "red" ); // set the border color to red
// Error Report for Configuration File Loading
// Set up the report window
heading = New Window( "Astellas Potency Report",
	V List Box(
		String Col Box( "", {spacer} ),
		H List Box( String Col Box( "", {spacer} ) ),
		String Col Box( "", {spacer} ),
		H List Box( String Col Box( "", {spacer} ) ),
		H List Box( V List Box( Picture Box( Astellaslogo ) ), ),
		H List Box( String Col Box( "", {spacer} ) ),
		H List Box( cb = Text Box( "Astellas Infectivity Assay Report" ) ),
		H List Box( at = Text Box( "JMP Script Error Report" ) ), 

	),
	V List Box( H List Box( String Col Box( "", {spacer} ) ) ),
	V List Box(
		H List Box(
			String Col Box( "", {spacer} ),
			String Col Box( "Configuration File:", {confignamer} ),
			String Col Box( "", {spacer} ),
			String Col Box( "Date: ", {dateint} ),
			String Col Box( "", {spacer} ), 

		),
	),
	V List Box( H List Box( String Col Box( "", {spacer} ) ) ), 
);
cb << Font Color( 19 ) << Set Font Size( 20 ) << set Font Style( "Bold" );
cb << Set Wrap( 1000 );
at << Set Font Size( 20 );
at << Font Color( 19 ) << set Font Style( "Bold" );
Heading << journal << close window;

username = Text Box( "Error:" );
username<< journal ;

win<<journal;
		
//User Report
userreport = New Window( "User Report",
	V List Box(
		String Col Box( "", {spacer} ),
		String Col Box( "User Information",
			{usernamedisplay, computernamedisplay, logonserverdisplay, userdomaindisplay, scriptver,
			Concat( "JMP Version ", jmpreport )}
		),
		String Col Box( "", {spacer} ),
		String Col Box( "", {spacer} ),
		String Col Box( "", {spacer} ), 

	),
	V List Box( H List Box( String Col Box( "", {dashliner, "Analyst Signature/Date"} ) ) ),
	String Col Box( "", {spacer} ),
	String Col Box( "", {spacer} ),
	String Col Box( "", {spacer} ),
	V List Box( H List Box( String Col Box( "", {dashliner, "Approver Signature/Date"} ) ) ), 

);
userreport<<journal<<close window;

//Define setup information to save in pdf
//get the date stamp for the file name
winJOURNAL = Current Journal();
datetimestamper = Substitute( Char( dateint ), ":", "-" );
Current Journal() << Set Window Title( Concat( "Error Report" || "_" || datetimestamper ) );
winJOURNAL = Current Journal();

//set the print footers
winJOURNAL << Set Print Footers(
	"&d;"/*left*/,
	"Astellas Gene Therapies Proprietary and Confidential Information"/*center*/,
	"Page &pn; of &pc;"/*right*/
);
headerleft = Concat( "Error Report" || "_" || datetimestamper );
winJOURNAL << Set Print Headers( headerleft, "", "" );

winJOURNAL << Set page setup(

		margins( 0.5, 0.5, 0.5, 0.5 ), 

		scale( 0.6 ), 

		portrait( 1 ), 

		paper size( "A3" )

	);

	winJOURNAL << get page setup();

// Save pdf and journal
winJOURNAL << get page setup();//get setup information
winJOURNAL << Save PDF( Concat( pathlocation || "\Reports\" || "Error Report" || "_" || datetimestamper || ".pdf" ) );

Close All( data tables , journals);
Throw("!CV Limit Is Missing!");
);

If(
IsMissing(filenamer) , 
Beep();
win = New Window( "Alert!",
bb = Border Box( Sides( 15 ), // top and bottom border
Text Box( "Report File Name Is Missing!", << set wrap (1000));
)
);
Close All( data tables , journals );
bb << Set Color( "red" ); // set the border color to red
// Error Report for Configuration File Loading
// Set up the report window
heading = New Window( "Astellas Potency Report",
	V List Box(
		String Col Box( "", {spacer} ),
		H List Box( String Col Box( "", {spacer} ) ),
		String Col Box( "", {spacer} ),
		H List Box( String Col Box( "", {spacer} ) ),
		H List Box( V List Box( Picture Box( Astellaslogo ) ), ),
		H List Box( String Col Box( "", {spacer} ) ),
		H List Box( cb = Text Box( "Astellas Infectivity Assay Report" ) ),
		H List Box( at = Text Box( "JMP Script Error Report" ) ), 

	),
	V List Box( H List Box( String Col Box( "", {spacer} ) ) ),
	V List Box(
		H List Box(
			String Col Box( "", {spacer} ),
			String Col Box( "Configuration File:", {confignamer} ),
			String Col Box( "", {spacer} ),
			String Col Box( "Date: ", {dateint} ),
			String Col Box( "", {spacer} ), 

		),
	),
	V List Box( H List Box( String Col Box( "", {spacer} ) ) ), 
);
cb << Font Color( 19 ) << Set Font Size( 20 ) << set Font Style( "Bold" );
cb << Set Wrap( 1000 );
at << Set Font Size( 20 );
at << Font Color( 19 ) << set Font Style( "Bold" );
Heading << journal << close window;

username = Text Box( "Error:" );
username<< journal ;

win<<journal;
		
//User Report
userreport = New Window( "User Report",
	V List Box(
		String Col Box( "", {spacer} ),
		String Col Box( "User Information",
			{usernamedisplay, computernamedisplay, logonserverdisplay, userdomaindisplay, scriptver,
			Concat( "JMP Version ", jmpreport )}
		),
		String Col Box( "", {spacer} ),
		String Col Box( "", {spacer} ),
		String Col Box( "", {spacer} ), 

	),
	V List Box( H List Box( String Col Box( "", {dashliner, "Analyst Signature/Date"} ) ) ),
	String Col Box( "", {spacer} ),
	String Col Box( "", {spacer} ),
	String Col Box( "", {spacer} ),
	V List Box( H List Box( String Col Box( "", {dashliner, "Approver Signature/Date"} ) ) ), 

);
userreport<<journal<<close window;

//Define setup information to save in pdf
//get the date stamp for the file name
winJOURNAL = Current Journal();
datetimestamper = Substitute( Char( dateint ), ":", "-" );
Current Journal() << Set Window Title( Concat( "Error Report" || "_" || datetimestamper ) );
winJOURNAL = Current Journal();

//set the print footers
winJOURNAL << Set Print Footers(
	"&d;"/*left*/,
	"Astellas Gene Therapies Proprietary and Confidential Information"/*center*/,
	"Page &pn; of &pc;"/*right*/
);
headerleft = Concat( "Error Report" || "_" || datetimestamper );
winJOURNAL << Set Print Headers( headerleft, "", "" );

winJOURNAL << Set page setup(

		margins( 0.5, 0.5, 0.5, 0.5 ), 

		scale( 0.6 ), 

		portrait( 1 ), 

		paper size( "A3" )

	);

	winJOURNAL << get page setup();


// Save pdf and journal
winJOURNAL << get page setup();//get setup information
winJOURNAL << Save PDF( Concat( pathlocation || "\Reports\" || "Error Report" || "_" || datetimestamper || ".pdf" ) );

Close All( data tables , journals);
Throw("!Report File Name Is Missing!");
);

If(
IsMissing(SN1) , 
Beep();
win = New Window( "Alert!",
bb = Border Box( Sides( 15 ), // top and bottom border
Text Box( "Reference Standard Is Missing!", << set wrap (1000));
)
);
Close All( data tables , journals );
bb << Set Color( "red" ); // set the border color to red
// Error Report for Configuration File Loading
// Set up the report window
heading = New Window( "Astellas Potency Report",
	V List Box(
		String Col Box( "", {spacer} ),
		H List Box( String Col Box( "", {spacer} ) ),
		String Col Box( "", {spacer} ),
		H List Box( String Col Box( "", {spacer} ) ),
		H List Box( V List Box( Picture Box( Astellaslogo ) ), ),
		H List Box( String Col Box( "", {spacer} ) ),
		H List Box( cb = Text Box( "Astellas Infectivity Assay Report" ) ),
		H List Box( at = Text Box( "JMP Script Error Report" ) ), 

	),
	V List Box( H List Box( String Col Box( "", {spacer} ) ) ),
	V List Box(
		H List Box(
			String Col Box( "", {spacer} ),
			String Col Box( "Configuration File:", {confignamer} ),
			String Col Box( "", {spacer} ),
			String Col Box( "Date: ", {dateint} ),
			String Col Box( "", {spacer} ), 

		),
	),
	V List Box( H List Box( String Col Box( "", {spacer} ) ) ), 
);
cb << Font Color( 19 ) << Set Font Size( 20 ) << set Font Style( "Bold" );
cb << Set Wrap( 1000 );
at << Set Font Size( 20 );
at << Font Color( 19 ) << set Font Style( "Bold" );
Heading << journal << close window;

username = Text Box( "Error:" );
username<< journal ;

win<<journal;
		
//User Report
userreport = New Window( "User Report",
	V List Box(
		String Col Box( "", {spacer} ),
		String Col Box( "User Information",
			{usernamedisplay, computernamedisplay, logonserverdisplay, userdomaindisplay, scriptver,
			Concat( "JMP Version ", jmpreport )}
		),
		String Col Box( "", {spacer} ),
		String Col Box( "", {spacer} ),
		String Col Box( "", {spacer} ), 

	),
	V List Box( H List Box( String Col Box( "", {dashliner, "Analyst Signature/Date"} ) ) ),
	String Col Box( "", {spacer} ),
	String Col Box( "", {spacer} ),
	String Col Box( "", {spacer} ),
	V List Box( H List Box( String Col Box( "", {dashliner, "Approver Signature/Date"} ) ) ), 

);
userreport<<journal<<close window;

//Define setup information to save in pdf
//get the date stamp for the file name
winJOURNAL = Current Journal();
datetimestamper = Substitute( Char( dateint ), ":", "-" );
Current Journal() << Set Window Title( Concat( "Error Report" || "_" || datetimestamper ) );
winJOURNAL = Current Journal();

//set the print footers
winJOURNAL << Set Print Footers(
	"&d;"/*left*/,
	"Astellas Gene Therapies Proprietary and Confidential Information"/*center*/,
	"Page &pn; of &pc;"/*right*/
);
headerleft = Concat( "Error Report" || "_" || datetimestamper );
winJOURNAL << Set Print Headers( headerleft, "", "" );

winJOURNAL << Set page setup(

		margins( 0.5, 0.5, 0.5, 0.5 ), 

		scale( 0.6 ), 

		portrait( 1 ), 

		paper size( "A3" )

	);

	winJOURNAL << get page setup();


// Save pdf and journal
winJOURNAL << get page setup();//get setup information
winJOURNAL << Save PDF( Concat( pathlocation || "\Reports\" || "Error Report" || "_" || datetimestamper || ".pdf" ) );

Close All( data tables , journals);
Throw("!Reference Standard Is Missing!");
);

If(
IsMissing(SN2) , 
Beep();
win = New Window( "Alert!",
bb = Border Box( Sides( 15 ), // top and bottom border
Text Box( "Assay Control Is Missing!", << set wrap (1000));
)
);
Close All( data tables , journals );
bb << Set Color( "red" ); // set the border color to red
// Error Report for Configuration File Loading
// Set up the report window
heading = New Window( "Astellas Potency Report",
	V List Box(
		String Col Box( "", {spacer} ),
		H List Box( String Col Box( "", {spacer} ) ),
		String Col Box( "", {spacer} ),
		H List Box( String Col Box( "", {spacer} ) ),
		H List Box( V List Box( Picture Box( Astellaslogo ) ), ),
		H List Box( String Col Box( "", {spacer} ) ),
		H List Box( cb = Text Box( "Astellas Infectivity Assay Report" ) ),
		H List Box( at = Text Box( "JMP Script Error Report" ) ), 

	),
	V List Box( H List Box( String Col Box( "", {spacer} ) ) ),
	V List Box(
		H List Box(
			String Col Box( "", {spacer} ),
			String Col Box( "Configuration File:", {confignamer} ),
			String Col Box( "", {spacer} ),
			String Col Box( "Date: ", {dateint} ),
			String Col Box( "", {spacer} ), 

		),
	),
	V List Box( H List Box( String Col Box( "", {spacer} ) ) ), 
);
cb << Font Color( 19 ) << Set Font Size( 20 ) << set Font Style( "Bold" );
cb << Set Wrap( 1000 );
at << Set Font Size( 20 );
at << Font Color( 19 ) << set Font Style( "Bold" );
Heading << journal << close window;

username = Text Box( "Error:" );
username<< journal ;

win<<journal;
		
//User Report
userreport = New Window( "User Report",
	V List Box(
		String Col Box( "", {spacer} ),
		String Col Box( "User Information",
			{usernamedisplay, computernamedisplay, logonserverdisplay, userdomaindisplay, scriptver,
			Concat( "JMP Version ", jmpreport )}
		),
		String Col Box( "", {spacer} ),
		String Col Box( "", {spacer} ),
		String Col Box( "", {spacer} ), 

	),
	V List Box( H List Box( String Col Box( "", {dashliner, "Analyst Signature/Date"} ) ) ),
	String Col Box( "", {spacer} ),
	String Col Box( "", {spacer} ),
	String Col Box( "", {spacer} ),
	V List Box( H List Box( String Col Box( "", {dashliner, "Approver Signature/Date"} ) ) ), 

);
userreport<<journal<<close window;

//Define setup information to save in pdf
//get the date stamp for the file name
winJOURNAL = Current Journal();
datetimestamper = Substitute( Char( dateint ), ":", "-" );
Current Journal() << Set Window Title( Concat( "Error Report" || "_" || datetimestamper ) );
winJOURNAL = Current Journal();

//set the print footers
winJOURNAL << Set Print Footers(
	"&d;"/*left*/,
	"Astellas Gene Therapies Proprietary and Confidential Information"/*center*/,
	"Page &pn; of &pc;"/*right*/
);
headerleft = Concat( "Error Report" || "_" || datetimestamper );
winJOURNAL << Set Print Headers( headerleft, "", "" );

winJOURNAL << Set page setup(

		margins( 0.5, 0.5, 0.5, 0.5 ), 

		scale( 0.6 ), 

		portrait( 1 ), 

		paper size( "A3" )

	);

	winJOURNAL << get page setup();



// Save pdf and journal
winJOURNAL << get page setup();//get setup information
winJOURNAL << Save PDF( Concat( pathlocation || "\Reports\" || "Error Report" || "_" || datetimestamper || ".pdf" ) );

Close All( data tables , journals);
Throw("!Assay Control Is Missing!");
);

If(
IsMissing(SN3)&IsMissing(SN4)&IsMissing(SN5)&IsMissing(SN6), 
Beep();
win = New Window( "Alert!",
bb = Border Box( Sides( 15 ), // top and bottom border
Text Box( "Sample Information Is Missing!", << set wrap (1000));
)
);
Close All( data tables , journals );
bb << Set Color( "red" ); // set the border color to red
// Error Report for Configuration File Loading
// Set up the report window
heading = New Window( "Astellas Potency Report",
	V List Box(
		String Col Box( "", {spacer} ),
		H List Box( String Col Box( "", {spacer} ) ),
		String Col Box( "", {spacer} ),
		H List Box( String Col Box( "", {spacer} ) ),
		H List Box( V List Box( Picture Box( Astellaslogo ) ), ),
		H List Box( String Col Box( "", {spacer} ) ),
		H List Box( cb = Text Box( "Astellas Infectivity Assay Report" ) ),
		H List Box( at = Text Box( "JMP Script Error Report" ) ), 

	),
	V List Box( H List Box( String Col Box( "", {spacer} ) ) ),
	V List Box(
		H List Box(
			String Col Box( "", {spacer} ),
			String Col Box( "Configuration File:", {confignamer} ),
			String Col Box( "", {spacer} ),
			String Col Box( "Date: ", {dateint} ),
			String Col Box( "", {spacer} ), 

		),
	),
	V List Box( H List Box( String Col Box( "", {spacer} ) ) ), 
);
cb << Font Color( 19 ) << Set Font Size( 20 ) << set Font Style( "Bold" );
cb << Set Wrap( 1000 );
at << Set Font Size( 20 );
at << Font Color( 19 ) << set Font Style( "Bold" );
Heading << journal << close window;

username = Text Box( "Error:" );
username<< journal ;

win<<journal;
		
//User Report
userreport = New Window( "User Report",
	V List Box(
		String Col Box( "", {spacer} ),
		String Col Box( "User Information",
			{usernamedisplay, computernamedisplay, logonserverdisplay, userdomaindisplay, scriptver,
			Concat( "JMP Version ", jmpreport )}
		),
		String Col Box( "", {spacer} ),
		String Col Box( "", {spacer} ),
		String Col Box( "", {spacer} ), 

	),
	V List Box( H List Box( String Col Box( "", {dashliner, "Analyst Signature/Date"} ) ) ),
	String Col Box( "", {spacer} ),
	String Col Box( "", {spacer} ),
	String Col Box( "", {spacer} ),
	V List Box( H List Box( String Col Box( "", {dashliner, "Approver Signature/Date"} ) ) ), 

);
userreport<<journal<<close window;

//Define setup information to save in pdf
//get the date stamp for the file name
winJOURNAL = Current Journal();
datetimestamper = Substitute( Char( dateint ), ":", "-" );
Current Journal() << Set Window Title( Concat( "Error Report" || "_" || datetimestamper ) );
winJOURNAL = Current Journal();

//set the print footers
winJOURNAL << Set Print Footers(
	"&d;"/*left*/,
	"Astellas Gene Therapies Proprietary and Confidential Information"/*center*/,
	"Page &pn; of &pc;"/*right*/
);
headerleft = Concat( "Error Report" || "_" || datetimestamper );
winJOURNAL << Set Print Headers( headerleft, "", "" );

winJOURNAL << Set page setup(

		margins( 0.5, 0.5, 0.5, 0.5 ), 

		scale( 0.6 ), 

		portrait( 1 ), 

		paper size( "A3" )

	);

	winJOURNAL << get page setup();

//Save pdf journal and data file to chosen file from the preset JMP Preferences
savepath = Char( Get Preferences() );
positionB = Contains( savepath, "Save As Directory" );
pathlocation = Substr( savepath, positionB );

positionC = Contains( pathlocation, "\!"" );
positionD = Contains( pathlocation, "\!"", 1 + positionC );

pathlocation = Substr( pathlocation, 1 + positionC, positionD - (1 + positionC) );

// Save pdf and journal
winJOURNAL << get page setup();//get setup information
winJOURNAL << Save PDF( Concat( pathlocation || "\Reports\" || "Error Report" || "_" || datetimestamper || ".pdf" ) );

Close All( data tables , journals);
Throw("!Sample Information Is Missing!");
);

If(
IsMissing(platetotal) , 
Beep();
win = New Window( "Alert!",
bb = Border Box( Sides( 15 ), // top and bottom border
Text Box( "Total Number of Plates Is Missing!" )
)
);
bb << Set Color( "red" ); // set the border color to red
// Error Report for Configuration File Loading
// Set up the report window
heading = New Window( "Astellas Potency Report",
	V List Box(
		String Col Box( "", {spacer} ),
		H List Box( String Col Box( "", {spacer} ) ),
		String Col Box( "", {spacer} ),
		H List Box( String Col Box( "", {spacer} ) ),
		H List Box( V List Box( Picture Box( Astellaslogo ) ), ),
		H List Box( String Col Box( "", {spacer} ) ),
		H List Box( cb = Text Box( "Astellas Infectivity Assay Report" ) ),
		H List Box( at = Text Box( "JMP Script Error Report" ) ), 

	),
	V List Box( H List Box( String Col Box( "", {spacer} ) ) ),
	V List Box(
		H List Box(
			String Col Box( "", {spacer} ),
			String Col Box( "Configuration File:", {confignamer} ),
			String Col Box( "", {spacer} ),
			String Col Box( "Date: ", {dateint} ),
			String Col Box( "", {spacer} ), 

		),
	),
	V List Box( H List Box( String Col Box( "", {spacer} ) ) ), 
);
cb << Font Color( 19 ) << Set Font Size( 20 ) << set Font Style( "Bold" );
cb << Set Wrap( 1000 );
at << Set Font Size( 20 );
at << Font Color( 19 ) << set Font Style( "Bold" );
Heading << journal << close window;

username = Text Box( "Error:" );
username<< journal ;

win<<journal;
		
//User Report
userreport = New Window( "User Report",
	V List Box(
		String Col Box( "", {spacer} ),
		String Col Box( "User Information",
			{usernamedisplay, computernamedisplay, logonserverdisplay, userdomaindisplay, scriptver,
			Concat( "JMP Version ", jmpreport )}
		),
		String Col Box( "", {spacer} ),
		String Col Box( "", {spacer} ),
		String Col Box( "", {spacer} ), 

	),
	V List Box( H List Box( String Col Box( "", {dashliner, "Analyst Signature/Date"} ) ) ),
	String Col Box( "", {spacer} ),
	String Col Box( "", {spacer} ),
	String Col Box( "", {spacer} ),
	V List Box( H List Box( String Col Box( "", {dashliner, "Approver Signature/Date"} ) ) ), 

);
userreport<<journal<<close window;

//Define setup information to save in pdf
//get the date stamp for the file name
winJOURNAL = Current Journal();
datetimestamper = Substitute( Char( dateint ), ":", "-" );
Current Journal() << Set Window Title( Concat( "Error Report" || "_" || datetimestamper ) );
winJOURNAL = Current Journal();

//set the print footers
winJOURNAL << Set Print Footers(
	"&d;"/*left*/,
	"Astellas Gene Therapies Proprietary and Confidential Information"/*center*/,
	"Page &pn; of &pc;"/*right*/
);
headerleft = Concat( "Error Report" || "_" || datetimestamper );
winJOURNAL << Set Print Headers( headerleft, "", "" );

winJOURNAL << Set page setup(

		margins( 0.5, 0.5, 0.5, 0.5 ), 

		scale( 0.6 ), 

		portrait( 1 ), 

		paper size( "A3" )

	);

	winJOURNAL << get page setup();



// Save pdf and journal
winJOURNAL << get page setup();//get setup information
winJOURNAL << Save PDF( Concat( pathlocation || "\Reports\" || "Error Report" || "_" || datetimestamper || ".pdf" ) );

Close All( data tables , journals);
Throw("!Total Number of Plates Is Missing!");
);

//GUI for selecting data file from QuantaSoft 
Filelist2 = Pick File( "Select Plate File", Concat( pathlocation, "\Data File\" ), {"Plate File|csv"}, 1, 0, "", multiple );	
			
datafilenamerlist = Filelist2;
platenumber = N Items( datafilenamerlist );

if (
platenumber == 1,  

positionA = Contains( datafilenamerlist[1] , "/" , -1); //finds first position for file name
platenameA =  Substr( datafilenamerlist[1], positionA+1 );//subtracts folder path from file name

positionC = Contains( platenameA , "." );//finds last position for file name

platenamerA =Substr( platenameA, 1, positionC - 1 );//final template file name
,
platenumber == 2, 

positionA = Contains( datafilenamerlist[1] , "/" , -1); //finds first position for file name
positionB = Contains( datafilenamerlist[2] , "/" , -1); //finds first position for file name
platenameA =  Substr( datafilenamerlist[1], positionA+1 );//subtracts folder path from file name
platenameB =  Substr( datafilenamerlist[2], positionB+1 );//subtracts folder path from file name

positionC = Contains( platenameA , "." );//finds last position for file name
positionD = Contains( platenameB , "." );//finds last position for file name

platenamerA =Substr( platenameA, 1, positionC - 1 );//final template file name
platenamerB = Substr( platenameB, 1, positionD - 1 );//final template file name
,
platenumber == 3,  

positionA = Contains( datafilenamerlist[1] , "/" , -1); //finds first position for file name
positionB = Contains( datafilenamerlist[2] , "/" , -1); //finds first position for file name
positionC = Contains( datafilenamerlist[2] , "/" , -1); //finds first position for file name
platenameA =  Substr( datafilenamerlist[1], positionA+1 );//subtracts folder path from file name
platenameB =  Substr( datafilenamerlist[2], positionB+1 );//subtracts folder path from file name
platenameC =  Substr( datafilenamerlist[2], positionB+1 );//subtracts folder path from file name

positionD = Contains( platenameA , "." );//finds last position for file name
positionE = Contains( platenameB , "." );//finds last position for file name
positionF = Contains( platenameC , "." );//finds last position for file name

platenamerA =Substr( platenameA, 1, positionC - 1 );//final template file name
platenamerB = Substr( platenameB, 1, positionD - 1 );//final template file name
platenamerC = Substr( platenameB, 1, positionD - 1 );//final template file name
);

// Loading user selected files
dtname = List( platenumber  );

For( i = 1, i < platenumber + 1, i++,
	dt = Open(Filelist2[i] );
	dtname[i] = dt << get name;
);

//Load user selected files depending on the number of pcr plates

//1 pcr plate
If(platenumber==1,
	data table(dtname[1])<<New Column( "Infection Plate",
	Numeric,
	"Continuous",
	Format( "Best", 12 ),
	formula(
		1
	)
);

dttext = Data Table( dtname[1] );
dttext << Subset( Columns(), Rows() );
);

//2 pcr plates
If( platenumber  == 2,
current data table(data table(dtname[1]));
	data table(dtname[1])<<New Column( "Infection Plate",
	Numeric,
	"Continuous",
	Format( "Best", 12 ),
	formula(
		1
	)
);
current data table(data table(dtname[2]));
	data table(dtname[2])<<New Column( "Infection Plate",
	Numeric,
	"Continuous",
	Format( "Best", 12 ),
	formula(
		2
	)
);
current data table(Data Table( dtname[1] ) );
	dttext = Data Table( dtname[1] ) << Concatenate( Data Table( dtname[2] ) );
	//Close( dtname[1], no save ); **removed to save raw data file to the report
	//Close( dtname[2], no save ); **removed to save raw data file to the report
			
);

//3 pcr plates
If( platenumber == 3,
	data table(dtname[1])<<New Column( "Infection Plate",
	Numeric,
	"Continuous",
	Format( "Best", 12 ),
	formula(
		1
	)
);
	data table(dtname[2])<<New Column( "Infection Plate",
	Numeric,
	"Continuous",
	Format( "Best", 12 ),
	formula(
		2
	)
);
	data table(dtname[3])<<New Column( "Infection Plate",
	Numeric,
	"Continuous",
	Format( "Best", 12 ),
	formula(
		3
	)
);
	dttext = Data Table( dtname[1] ) << Concatenate( Data Table( dtname[2] ), Data Table( dtname[3] ) );
);

dttext = Current Data Table();

dttext << delete columns( 2, 3, 5, 6, 7 );
dttext << delete columns( 4 :: 58 );

//get the corresponding number of samples based on the number of rows
totalrownumbers=nrows(dttext);

//Delete the values that don't correspond to concentration values
:Sample << data type( "Numeric" );
dttext << select where( Is Missing( :Sample ) ) << delete rows;


maintablerows=nrows(dttext);

// Error Report for Data File Loading
If (IsMissing(SN1), rowcheck1=0, rowcheck1=30);
If (IsMissing(SN2), rowcheck2=0, rowcheck2=30);
If (IsMissing(SN3), rowcheck3=0, rowcheck3=30);
If (IsMissing(SN4), rowcheck4=0, rowcheck4=30);
If (IsMissing(SN5), rowcheck5=0, rowcheck5=30);
If (IsMissing(SN6), rowcheck6=0, rowcheck6=30);

totalrowcheck = rowcheck1+rowcheck2+rowcheck3+rowcheck4+rowcheck5+rowcheck6;

If(
totalrowcheck<maintablerows , 
Beep();
win = New Window( "Alert!",
bb = Border Box( Sides( 15 ), // top and bottom border
Text Box( "Total Number of Samples Less Than Plate Data Sample Number. Add Missing Sample Information To Configuration File!" ),
)
);
bb << Set Color( "red" ); // set the border color to red

// Set up the report window
heading = New Window( "Astellas Potency Report",
	V List Box(
		String Col Box( "", {spacer} ),
		H List Box( String Col Box( "", {spacer} ) ),
		String Col Box( "", {spacer} ),
		H List Box( String Col Box( "", {spacer} ) ),
		H List Box( V List Box( Picture Box( Astellaslogo ) ), ),
		H List Box( String Col Box( "", {spacer} ) ),
		H List Box( cb = Text Box( "Astellas Infectivity Assay Report" ) ),
		H List Box( at = Text Box( "JMP Script Error Report" ) ), 

	),
	V List Box( H List Box( String Col Box( "", {spacer} ) ) ),
	V List Box(
		H List Box(
			String Col Box( "", {spacer} ),
			String Col Box( "Configuration File:", {confignamer} ),
			String Col Box( "", {spacer} ),
			String Col Box( "Date: ", {dateint} ),
			String Col Box( "", {spacer} ), 

		),
	),
	V List Box( H List Box( String Col Box( "", {spacer} ) ) ), 
);
cb << Font Color( 19 ) << Set Font Size( 20 ) << set Font Style( "Bold" );
cb << Set Wrap( 1000 );
at << Set Font Size( 20 );
at << Font Color( 19 ) << set Font Style( "Bold" );
Heading << journal << close window;

username = Text Box( "Error:" );
username<< journal ;

win<<journal;
		
//User Report
userreport = New Window( "User Report",
	V List Box(
		String Col Box( "", {spacer} ),
		String Col Box( "User Information",
			{usernamedisplay, computernamedisplay, logonserverdisplay, userdomaindisplay, scriptver,
			Concat( "JMP Version ", jmpreport )}
		),
		String Col Box( "", {spacer} ),
		String Col Box( "", {spacer} ),
		String Col Box( "", {spacer} ), 

	),
	V List Box( H List Box( String Col Box( "", {dashliner, "Analyst Signature/Date"} ) ) ),
	String Col Box( "", {spacer} ),
	String Col Box( "", {spacer} ),
	String Col Box( "", {spacer} ),
	V List Box( H List Box( String Col Box( "", {dashliner, "Approver Signature/Date"} ) ) ), 

);
userreport<<journal<<close window;

//Define setup information to save in pdf
//get the date stamp for the file name
winJOURNAL = Current Journal();
datetimestamper = Substitute( Char( dateint ), ":", "-" );
Current Journal() << Set Window Title( Concat( "Error Report" || "_" || datetimestamper ) );
winJOURNAL = Current Journal();

//set the print footers
winJOURNAL << Set Print Footers(
	"&d;"/*left*/,
	"Astellas Gene Therapies Proprietary and Confidential Information"/*center*/,
	"Page &pn; of &pc;"/*right*/
);
headerleft = Concat( "Error Report" || "_" || datetimestamper );
winJOURNAL << Set Print Headers( headerleft, "", "" );

winJOURNAL << Set page setup(

		margins( 0.5, 0.5, 0.5, 0.5 ), 

		scale( 0.6 ), 

		portrait( 1 ), 

		paper size( "A3" )

	);

	winJOURNAL << get page setup();


// Save pdf and journal
winJOURNAL << get page setup();//get setup information
winJOURNAL << Save PDF( Concat( pathlocation || "\Reports\" || "Error Report" || "_" || datetimestamper || ".pdf" ) );

Close All( data tables , journals);
Throw("!Total Number of Samples Less Than Plate Data Sample Number. Add Missing Sample Information To Configuration File!");

,

totalrowcheck>maintablerows , 
Beep();
win = New Window( "Alert!",
bb = Border Box( Sides( 15 ), // top and bottom border
Text Box( "Total Number of Samples Greater Than Plate Data Sample Number. Load More Data Files!" ),
)
);
bb << Set Color( "red" ); // set the border color to red
// Error Report for Configuration File Loading
// Set up the report window
heading = New Window( "Astellas Potency Report",
	V List Box(
		String Col Box( "", {spacer} ),
		H List Box( String Col Box( "", {spacer} ) ),
		String Col Box( "", {spacer} ),
		H List Box( String Col Box( "", {spacer} ) ),
		H List Box( V List Box( Picture Box( Astellaslogo ) ), ),
		H List Box( String Col Box( "", {spacer} ) ),
		H List Box( cb = Text Box( "Astellas Infectivity Assay Report" ) ),
		H List Box( at = Text Box( "JMP Script Error Report" ) ), 

	),
	V List Box( H List Box( String Col Box( "", {spacer} ) ) ),
	V List Box(
		H List Box(
			String Col Box( "", {spacer} ),
			String Col Box( "Configuration File:", {confignamer} ),
			String Col Box( "", {spacer} ),
			String Col Box( "Date: ", {dateint} ),
			String Col Box( "", {spacer} ), 

		),
	),
	V List Box( H List Box( String Col Box( "", {spacer} ) ) ), 
);
cb << Font Color( 19 ) << Set Font Size( 20 ) << set Font Style( "Bold" );
cb << Set Wrap( 1000 );
at << Set Font Size( 20 );
at << Font Color( 19 ) << set Font Style( "Bold" );
Heading << journal << close window;

username = Text Box( "Error:" );
username<< journal ;

win<<journal;
		
//User Report
userreport = New Window( "User Report",
	V List Box(
		String Col Box( "", {spacer} ),
		String Col Box( "User Information",
			{usernamedisplay, computernamedisplay, logonserverdisplay, userdomaindisplay, scriptver,
			Concat( "JMP Version ", jmpreport )}
		),
		String Col Box( "", {spacer} ),
		String Col Box( "", {spacer} ),
		String Col Box( "", {spacer} ), 

	),
	V List Box( H List Box( String Col Box( "", {dashliner, "Analyst Signature/Date"} ) ) ),
	String Col Box( "", {spacer} ),
	String Col Box( "", {spacer} ),
	String Col Box( "", {spacer} ),
	V List Box( H List Box( String Col Box( "", {dashliner, "Approver Signature/Date"} ) ) ), 

);
userreport<<journal<<close window;

//Define setup information to save in pdf
//get the date stamp for the file name
winJOURNAL = Current Journal();
datetimestamper = Substitute( Char( dateint ), ":", "-" );
Current Journal() << Set Window Title( Concat( "Error Report" || "_" || datetimestamper ) );
winJOURNAL = Current Journal();

//set the print footers
winJOURNAL << Set Print Footers(
	"&d;"/*left*/,
	"Astellas Gene Therapies Proprietary and Confidential Information"/*center*/,
	"Page &pn; of &pc;"/*right*/
);
headerleft = Concat( "Error Report" || "_" || datetimestamper );
winJOURNAL << Set Print Headers( headerleft, "", "" );

winJOURNAL << Set page setup(

		margins( 0.5, 0.5, 0.5, 0.5 ), 

		scale( 0.6 ), 

		portrait( 1 ), 

		paper size( "A3" )

	);

	winJOURNAL << get page setup();


// Save pdf and journal
winJOURNAL << get page setup();//get setup information
winJOURNAL << Save PDF( Concat( pathlocation || "\Reports\" || "Error Report" || "_" || datetimestamper || ".pdf" ) );

Close All( data tables , journals);
Throw("!Total Number of Samples Greater Than Plate Data Sample Number. Load More Data Files!");
);

//Sort the Sample column by the infection plate
dttext<< Sort(
			By( :Infection Plate, :Sample ),
			Order( Ascending, Ascending ), replace);

close(dttext, no save);

dttext=current data table();

//Change data type back to character for remaining formulas
:Sample << data type( "Character" );

assayval = 30;

dttext << New Column( "Group",
	Character,
	"Nominal",
	Formula(
		If( Row() <= assayval,
			SN1,
			If( Row() <= assayval * 2,
				SN2,
				If( Row() <= assayval * 3,
					SN3,
					If( Row() <= assayval * 4,
						SN4,
						If(
							Row() <= assayval * 5, 
							SN5,
							
						If(
							 Row() <= assayval * 6,
									SN6,
							empty()

								)
						)
					)
				)
			)
		)
	)
);
:Group << Set Property( "Value Colors", Color Theme( "SAS Analysis" ) );
:Group << color cell by value;
//Change data type of the concentration column
:Concentration << data type( numeric ) << modeling type( "continuous" );

//Set the final concentrations based on being between 50 and 5000
dttext << New Column( "Final Concentration",
	Numeric,
	"Continuous",
	Format( "Best", 12 ),
	Formula( If( 50 <= :Concentration < 5000, :Concentration, 0 ) )
);

Current Data Table(dtconfig );

pmcolumn1details = Column (6)  << get values;
pmcolumn2details = Column (7) << get values;
pmcolumn3details = Column (8) << get values;
pmcolumn4details = Column (9) << get values;
pmcolumn5details = Column (10) << get values;
pmcolumn6details = Column (11) << get values;
pmcolumn7details = Column (12) << get values;
pmcolumn8details = Column (13) << get values;
pmcolumn9details = Column (14) << get values;
pmcolumn10details = Column (15) << get values;
pmcolumn11details = Column (16) << get values;
pmcolumn12details = Column (17) << get values;

	//Dilution factors that correspond to High dilution factor from materials template
//A Row
dfhighA1name = Num( pmcolumn1details[1] );
dfhighA2name = Num( pmcolumn2details[1] );
dfhighA3name = Num( pmcolumn3details[1] );
dfhighA4name = Num( pmcolumn4details[1] );
dfhighA5name = Num( pmcolumn5details[1] );
dfhighA6name = Num( pmcolumn6details[1] );
dfhighA7name = Num( pmcolumn7details[1] );
dfhighA8name = Num( pmcolumn8details[1] );
dfhighA9name = Num( pmcolumn9details[1] );
dfhighA10name = Num( pmcolumn10details[1] );
dfhighA11name = Num( pmcolumn11details[1] );
dfhighA12name = Num( pmcolumn12details[1] );

	//B Row
dfhighB1name = Num( pmcolumn1details[2] );
dfhighB2name = Num( pmcolumn2details[2] );
dfhighB3name = Num( pmcolumn3details[2] );
dfhighB4name = Num( pmcolumn4details[2] );
dfhighB5name = Num( pmcolumn5details[2] );
dfhighB6name = Num( pmcolumn6details[2] );
dfhighB7name = Num( pmcolumn7details[2] );
dfhighB8name = Num( pmcolumn8details[2] );
dfhighB9name = Num( pmcolumn9details[2] );
dfhighB10name = Num( pmcolumn10details[2] );
dfhighB11name = Num( pmcolumn11details[2] );
dfhighB12name = Num( pmcolumn12details[2] );

	//C Row
dfhighC1name = Num( pmcolumn1details[3] );
dfhighC2name = Num( pmcolumn2details[3] );
dfhighC3name = Num( pmcolumn3details[3] );
dfhighC4name = Num( pmcolumn4details[3] );
dfhighC5name = Num( pmcolumn5details[3] );
dfhighC6name = Num( pmcolumn6details[3] );
dfhighC7name = Num( pmcolumn7details[3] );
dfhighC8name = Num( pmcolumn8details[3] );
dfhighC9name = Num( pmcolumn9details[3] );
dfhighC10name = Num( pmcolumn10details[3] );
dfhighC11name = Num( pmcolumn11details[3] );
dfhighC12name = Num( pmcolumn12details[3] );

	//D Row
dfhighD1name = Num( pmcolumn1details[4] );
dfhighD2name = Num( pmcolumn2details[4] );
dfhighD3name = Num( pmcolumn3details[4] );
dfhighD4name = Num( pmcolumn4details[4] );
dfhighD5name = Num( pmcolumn5details[4] );
dfhighD6name = Num( pmcolumn6details[4] );
dfhighD7name = Num( pmcolumn7details[4] );
dfhighD8name = Num( pmcolumn8details[4] );
dfhighD9name = Num( pmcolumn9details[4] );
dfhighD10name = Num( pmcolumn10details[4] );
dfhighD11name = Num( pmcolumn11details[4] );
dfhighD12name = Num( pmcolumn12details[4] );

	//E Row
dfhighE1name = Num( pmcolumn1details[5] );
dfhighE2name = Num( pmcolumn2details[5] );
dfhighE3name = Num( pmcolumn3details[5] );
dfhighE4name = Num( pmcolumn4details[5] );
dfhighE5name = Num( pmcolumn5details[5] );
dfhighE6name = Num( pmcolumn6details[5] );
dfhighE7name = Num( pmcolumn7details[5] );
dfhighE8name = Num( pmcolumn8details[5] );
dfhighE9name = Num( pmcolumn9details[5] );
dfhighE10name = Num( pmcolumn10details[5] );
dfhighE11name = Num( pmcolumn11details[5] );
dfhighE12name = Num( pmcolumn12details[5] );

	//F Row
dfhighF1name = Num( pmcolumn1details[6] );
dfhighF2name = Num( pmcolumn2details[6] );
dfhighF3name = Num( pmcolumn3details[6] );
dfhighF4name = Num( pmcolumn4details[6] );
dfhighF5name = Num( pmcolumn5details[6] );
dfhighF6name = Num( pmcolumn6details[6] );
dfhighF7name = Num( pmcolumn7details[6] );
dfhighF8name = Num( pmcolumn8details[6] );
dfhighF9name = Num( pmcolumn9details[6] );
dfhighF10name = Num( pmcolumn10details[6] );
dfhighF11name = Num( pmcolumn11details[6] );
dfhighF12name = Num( pmcolumn12details[6] );

	//G Row
dfhighG1name = Num( pmcolumn1details[7] );
dfhighG2name = Num( pmcolumn2details[7] );
dfhighG3name = Num( pmcolumn3details[7] );
dfhighG4name = Num( pmcolumn4details[7] );
dfhighG5name = Num( pmcolumn5details[7] );
dfhighG6name = Num( pmcolumn6details[7] );
dfhighG7name = Num( pmcolumn7details[7] );
dfhighG8name = Num( pmcolumn8details[7] );
dfhighG9name = Num( pmcolumn9details[7] );
dfhighG10name = Num( pmcolumn10details[7] );
dfhighG11name = Num( pmcolumn11details[7] );
dfhighG12name = Num( pmcolumn12details[7] );

	//H Row
dfhighH1name = Num( pmcolumn1details[8] );
dfhighH2name = Num( pmcolumn2details[8] );
dfhighH3name = Num( pmcolumn3details[8] );
dfhighH4name = Num( pmcolumn4details[8] );
dfhighH5name = Num( pmcolumn5details[8] );
dfhighH6name = Num( pmcolumn6details[8] );
dfhighH7name = Num( pmcolumn7details[8] );
dfhighH8name = Num( pmcolumn8details[8] );
dfhighH9name = Num( pmcolumn9details[8] );
dfhighH10name = Num( pmcolumn10details[8] );
dfhighH11name = Num( pmcolumn11details[8] );
dfhighH12name = Num( pmcolumn12details[8] );


	//Dilution factors that correspond to Medium dilution factor from materials template
	//A Row
	dfmidA1name=num(pmcolumn1details[11]);
	dfmidA2name=num(pmcolumn2details[11]);
	dfmidA3name=num(pmcolumn3details[11]);
	dfmidA4name=num(pmcolumn4details[11]);
	dfmidA5name=num(pmcolumn5details[11]);
	dfmidA6name=num(pmcolumn6details[11]);
	dfmidA7name=num(pmcolumn7details[11]);
	dfmidA8name=num(pmcolumn8details[11]);
	dfmidA9name=num(pmcolumn9details[11]);
	dfmidA10name=num(pmcolumn10details[11]);
	dfmidA11name=num(pmcolumn11details[11]);
	dfmidA12name=num(pmcolumn12details[11]);

	//B Row
	dfmidB1name=num(pmcolumn1details[12]);
	dfmidB2name=num(pmcolumn2details[12]);
	dfmidB3name=num(pmcolumn3details[12]);
	dfmidB4name=num(pmcolumn4details[12]);
	dfmidB5name=num(pmcolumn5details[12]);
	dfmidB6name=num(pmcolumn6details[12]);
	dfmidB7name=num(pmcolumn7details[12]);
	dfmidB8name=num(pmcolumn8details[12]);
	dfmidB9name=num(pmcolumn9details[12]);
	dfmidB10name=num(pmcolumn10details[12]);
	dfmidB11name=num(pmcolumn11details[12]);
	dfmidB12name=num(pmcolumn12details[12]);

	//C Row
	dfmidC1name=num(pmcolumn1details[13]);
	dfmidC2name=num(pmcolumn2details[13]);
	dfmidC3name=num(pmcolumn3details[13]);
	dfmidC4name=num(pmcolumn4details[13]);
	dfmidC5name=num(pmcolumn5details[13]);
	dfmidC6name=num(pmcolumn6details[13]);
	dfmidC7name=num(pmcolumn7details[13]);
	dfmidC8name=num(pmcolumn8details[13]);
	dfmidC9name=num(pmcolumn9details[13]);
	dfmidC10name=num(pmcolumn10details[13]);
	dfmidC11name=num(pmcolumn11details[13]);
	dfmidC12name=num(pmcolumn12details[13]);

	//D Row
	dfmidD1name=num(pmcolumn1details[14]);
	dfmidD2name=num(pmcolumn2details[14]);
	dfmidD3name=num(pmcolumn3details[14]);
	dfmidD4name=num(pmcolumn4details[14]);
	dfmidD5name=num(pmcolumn5details[14]);
	dfmidD6name=num(pmcolumn6details[14]);
	dfmidD7name=num(pmcolumn7details[14]);
	dfmidD8name=num(pmcolumn8details[14]);
	dfmidD9name=num(pmcolumn9details[14]);
	dfmidD10name=num(pmcolumn10details[14]);
	dfmidD11name=num(pmcolumn11details[14]);
	dfmidD12name=num(pmcolumn12details[14]);

	//E Row
	dfmidE1name=num(pmcolumn1details[15]);
	dfmidE2name=num(pmcolumn2details[15]);
	dfmidE3name=num(pmcolumn3details[15]);
	dfmidE4name=num(pmcolumn4details[15]);
	dfmidE5name=num(pmcolumn5details[15]);
	dfmidE6name=num(pmcolumn6details[15]);
	dfmidE7name=num(pmcolumn7details[15]);
	dfmidE8name=num(pmcolumn8details[15]);
	dfmidE9name=num(pmcolumn9details[15]);
	dfmidE10name=num(pmcolumn10details[15]);
	dfmidE11name=num(pmcolumn11details[15]);
	dfmidE12name=num(pmcolumn12details[15]);

	//F Row
	dfmidF1name=num(pmcolumn1details[16]);
	dfmidF2name=num(pmcolumn2details[16]);
	dfmidF3name=num(pmcolumn3details[16]);
	dfmidF4name=num(pmcolumn4details[16]);
	dfmidF5name=num(pmcolumn5details[16]);
	dfmidF6name=num(pmcolumn6details[16]);
	dfmidF7name=num(pmcolumn7details[16]);
	dfmidF8name=num(pmcolumn8details[16]);
	dfmidF9name=num(pmcolumn9details[16]);
	dfmidF10name=num(pmcolumn10details[16]);
	dfmidF11name=num(pmcolumn11details[16]);
	dfmidF12name=num(pmcolumn12details[16]);

	//G Row
	dfmidG1name=num(pmcolumn1details[17]);
	dfmidG2name=num(pmcolumn2details[17]);
	dfmidG3name=num(pmcolumn3details[17]);
	dfmidG4name=num(pmcolumn4details[17]);
	dfmidG5name=num(pmcolumn5details[17]);
	dfmidG6name=num(pmcolumn6details[17]);
	dfmidG7name=num(pmcolumn7details[17]);
	dfmidG8name=num(pmcolumn8details[17]);
	dfmidG9name=num(pmcolumn9details[17]);
	dfmidG10name=num(pmcolumn10details[17]);
	dfmidG11name=num(pmcolumn11details[17]);
	dfmidG12name=num(pmcolumn12details[17]);

	//H Row
	dfmidH1name=num(pmcolumn1details[18]);
	dfmidH2name=num(pmcolumn2details[18]);
	dfmidH3name=num(pmcolumn3details[18]);
	dfmidH4name=num(pmcolumn4details[18]);
	dfmidH5name=num(pmcolumn5details[18]);
	dfmidH6name=num(pmcolumn6details[18]);
	dfmidH7name=num(pmcolumn7details[18]);
	dfmidH8name=num(pmcolumn8details[18]);
	dfmidH9name=num(pmcolumn9details[18]);
	dfmidH10name=num(pmcolumn10details[18]);
	dfmidH11name=num(pmcolumn11details[18]);
	dfmidH12name=num(pmcolumn12details[18]);

	//Dilution factors that correspond to low dilution factor from materials template
	//A Row
	dflowA1name=num(pmcolumn1details[21]);
	dflowA2name=num(pmcolumn2details[21]);
	dflowA3name=num(pmcolumn3details[21]);
	dflowA4name=num(pmcolumn4details[21]);
	dflowA5name=num(pmcolumn5details[21]);
	dflowA6name=num(pmcolumn6details[21]);
	dflowA7name=num(pmcolumn7details[21]);
	dflowA8name=num(pmcolumn8details[21]);
	dflowA9name=num(pmcolumn9details[21]);
	dflowA10name=num(pmcolumn10details[21]);
	dflowA11name=num(pmcolumn11details[21]);
	dflowA12name=num(pmcolumn12details[21]);

	//B Row
	dflowB1name=num(pmcolumn1details[22]);
	dflowB2name=num(pmcolumn2details[22]);
	dflowB3name=num(pmcolumn3details[22]);
	dflowB4name=num(pmcolumn4details[22]);
	dflowB5name=num(pmcolumn5details[22]);
	dflowB6name=num(pmcolumn6details[22]);
	dflowB7name=num(pmcolumn7details[22]);
	dflowB8name=num(pmcolumn8details[22]);
	dflowB9name=num(pmcolumn9details[22]);
	dflowB10name=num(pmcolumn10details[22]);
	dflowB11name=num(pmcolumn11details[22]);
	dflowB12name=num(pmcolumn12details[2]);

	//C Row
	dflowC1name=num(pmcolumn1details[23]);
	dflowC2name=num(pmcolumn2details[23]);
	dflowC3name=num(pmcolumn3details[23]);
	dflowC4name=num(pmcolumn4details[23]);
	dflowC5name=num(pmcolumn5details[23]);
	dflowC6name=num(pmcolumn6details[23]);
	dflowC7name=num(pmcolumn7details[23]);
	dflowC8name=num(pmcolumn8details[23]);
	dflowC9name=num(pmcolumn9details[23]);
	dflowC10name=num(pmcolumn10details[23]);
	dflowC11name=num(pmcolumn11details[23]);
	dflowC12name=num(pmcolumn12details[23]);

	//D Row
	dflowD1name=num(pmcolumn1details[24]);
	dflowD2name=num(pmcolumn2details[24]);
	dflowD3name=num(pmcolumn3details[24]);
	dflowD4name=num(pmcolumn4details[24]);
	dflowD5name=num(pmcolumn5details[24]);
	dflowD6name=num(pmcolumn6details[24]);
	dflowD7name=num(pmcolumn7details[24]);
	dflowD8name=num(pmcolumn8details[24]);
	dflowD9name=num(pmcolumn9details[24]);
	dflowD10name=num(pmcolumn10details[24]);
	dflowD11name=num(pmcolumn11details[24]);
	dflowD12name=num(pmcolumn12details[24]);

	//E Row
	dflowE1name=num(pmcolumn1details[25]);
	dflowE2name=num(pmcolumn2details[25]);
	dflowE3name=num(pmcolumn3details[25]);
	dflowE4name=num(pmcolumn4details[25]);
	dflowE5name=num(pmcolumn5details[25]);
	dflowE6name=num(pmcolumn6details[25]);
	dflowE7name=num(pmcolumn7details[25]);
	dflowE8name=num(pmcolumn8details[25]);
	dflowE9name=num(pmcolumn9details[25]);
	dflowE10name=num(pmcolumn10details[25]);
	dflowE11name=num(pmcolumn11details[25]);
	dflowE12name=num(pmcolumn12details[25]);

	//F Row
	dflowF1name=num(pmcolumn1details[26]);
	dflowF2name=num(pmcolumn2details[26]);
	dflowF3name=num(pmcolumn3details[26]);
	dflowF4name=num(pmcolumn4details[26]);
	dflowF5name=num(pmcolumn5details[26]);
	dflowF6name=num(pmcolumn6details[26]);
	dflowF7name=num(pmcolumn7details[26]);
	dflowF8name=num(pmcolumn8details[26]);
	dflowF9name=num(pmcolumn9details[26]);
	dflowF10name=num(pmcolumn10details[26]);
	dflowF11name=num(pmcolumn11details[26]);
	dflowF12name=num(pmcolumn12details[26]);

	//G Row
	dflowG1name=num(pmcolumn1details[27]);
	dflowG2name=num(pmcolumn2details[27]);
	dflowG3name=num(pmcolumn3details[27]);
	dflowG4name=num(pmcolumn4details[27]);
	dflowG5name=num(pmcolumn5details[27]);
	dflowG6name=num(pmcolumn6details[27]);
	dflowG7name=num(pmcolumn7details[27]);
	dflowG8name=num(pmcolumn8details[27]);
	dflowG9name=num(pmcolumn9details[27]);
	dflowG10name=num(pmcolumn10details[27]);
	dflowG11name=num(pmcolumn11details[27]);
	dflowG12name=num(pmcolumn12details[27]);

	//H Row
	dflowH1name=num(pmcolumn1details[28]);
	dflowH2name=num(pmcolumn2details[28]);
	dflowH3name=num(pmcolumn3details[28]);
	dflowH4name=num(pmcolumn4details[28]);
	dflowH5name=num(pmcolumn5details[28]);
	dflowH6name=num(pmcolumn6details[28]);
	dflowH7name=num(pmcolumn7details[28]);
	dflowH8name=num(pmcolumn8details[28]);
	dflowH9name=num(pmcolumn9details[28]);
	dflowH10name=num(pmcolumn10details[28]);
	dflowH11name=num(pmcolumn11details[28]);
	dflowH12name=num(pmcolumn12details[28]);
	
	
//MOI concentration
A1con=column2details[30];
B1con=column2details[31];
C1con=column2details[32];
D1con=column2details[33];
E1con=column2details[34];

If(
IsMissing(A1con)|IsMissing(B1con)|IsMissing(C1con)|IsMissing(D1con)|IsMissing(E1con), 
Beep();
win = New Window( "Alert!",
bb = Border Box( Sides( 15 ), // top and bottom border
Text Box( "MOI Serial Dilution(s) Are Missing!" )
)
);
bb << Set Color( "red" ); // set the border color to red
// Error Report for Configuration File Loading
// Set up the report window
heading = New Window( "Astellas Potency Report",
	V List Box(
		String Col Box( "", {spacer} ),
		H List Box( String Col Box( "", {spacer} ) ),
		String Col Box( "", {spacer} ),
		H List Box( String Col Box( "", {spacer} ) ),
		H List Box( V List Box( Picture Box( Astellaslogo ) ), ),
		H List Box( String Col Box( "", {spacer} ) ),
		H List Box( cb = Text Box( "Astellas Infectivity Assay Report" ) ),
		H List Box( at = Text Box( "JMP Script Error Report" ) ), 

	),
	V List Box( H List Box( String Col Box( "", {spacer} ) ) ),
	V List Box(
		H List Box(
			String Col Box( "", {spacer} ),
			String Col Box( "Configuration File:", {confignamer} ),
			String Col Box( "", {spacer} ),
			String Col Box( "Date: ", {dateint} ),
			String Col Box( "", {spacer} ), 

		),
	),
	V List Box( H List Box( String Col Box( "", {spacer} ) ) ), 
);
cb << Font Color( 19 ) << Set Font Size( 20 ) << set Font Style( "Bold" );
cb << Set Wrap( 1000 );
at << Set Font Size( 20 );
at << Font Color( 19 ) << set Font Style( "Bold" );
Heading << journal << close window;

username = Text Box( "Error:" );
username<< journal ;

win<<journal;
		
//User Report
userreport = New Window( "User Report",
	V List Box(
		String Col Box( "", {spacer} ),
		String Col Box( "User Information",
			{usernamedisplay, computernamedisplay, logonserverdisplay, userdomaindisplay, scriptver,
			Concat( "JMP Version ", jmpreport )}
		),
		String Col Box( "", {spacer} ),
		String Col Box( "", {spacer} ),
		String Col Box( "", {spacer} ), 

	),
	V List Box( H List Box( String Col Box( "", {dashliner, "Analyst Signature/Date"} ) ) ),
	String Col Box( "", {spacer} ),
	String Col Box( "", {spacer} ),
	String Col Box( "", {spacer} ),
	V List Box( H List Box( String Col Box( "", {dashliner, "Approver Signature/Date"} ) ) ), 

);
userreport<<journal<<close window;

//Define setup information to save in pdf
//get the date stamp for the file name
winJOURNAL = Current Journal();
datetimestamper = Substitute( Char( dateint ), ":", "-" );
Current Journal() << Set Window Title( Concat( "Error Report" || "_" || datetimestamper ) );
winJOURNAL = Current Journal();

//set the print footers
winJOURNAL << Set Print Footers(
	"&d;"/*left*/,
	"Astellas Gene Therapies Proprietary and Confidential Information"/*center*/,
	"Page &pn; of &pc;"/*right*/
);
headerleft = Concat( "Error Report" || "_" || datetimestamper );
winJOURNAL << Set Print Headers( headerleft, "", "" );

winJOURNAL << Set page setup(

		margins( 0.5, 0.5, 0.5, 0.5 ), 

		scale( 0.6 ), 

		portrait( 1 ), 

		paper size( "A3" )

	);

	winJOURNAL << get page setup();


// Save pdf and journal
winJOURNAL << get page setup();//get setup information
winJOURNAL << Save PDF( Concat( pathlocation || "\Reports\" || "Error Report" || "_" || datetimestamper || ".pdf" ) );

Close All( data tables , journals);
Throw("!MOI Serial Dilution(s) Are Missing!");
); 


//dilution factor map for each sample
sampdf1=column3details[20];
sampdf2=column3details[21];
sampdf3=column3details[22];
sampdf4=column3details[23];
sampdf5=column3details[24];
sampdf6=column3details[25];

//create dilution factor map column
dttext<<New Column( "Dilution Factor Map",
	Character,
	"Nominal",
	Formula(
		If( :Group == SN1,
			sampdf1,
			If( :Group == SN2,
				sampdf2,
				If( :Group == SN3,
					sampdf3,
					If( :Group == SN4,
						sampdf4,
						If( :Group == SN5,
							sampdf5,
						If(:Group == SN6,
							sampdf6,
						empty();
								)
						)
					)
				)
			)
		)
	)
);

//
if(totalrownumbers==168,
dttext<<New Column( "Dilution Factor",
	Numeric,
	"Continuous",
	Format( "Best", 12 ),
	Formula(
		If( :Dilution Factor Map == "High",
			Match( :Well,
				"A01", dfhighA1name,
				"A02", dfhighA2name,
				"A03", dfhighA3name,
				"A04", dfhighA4name,
				"A05", dfhighA5name,
				"A06", dfhighA6name,
				"A07", dfhighA7name,
				"A08", dfhighA8name,
				"A09", dfhighA9name,
				"A10", dfhighA10name,
				"B01", dfhighB1name,
				"B02", dfhighB2name,
				"B03", dfhighB3name,
				"B04", dfhighB4name,
				"B05", dfhighB5name,
				"B06", dfhighB6name,
				"B07", dfhighB7name,
				"B08", dfhighB8name,
				"B09", dfhighB9name,
				"B10", dfhighB10name,
				"C01", dfhighC1name,
				"C02", dfhighC2name,
				"C03", dfhighC3name,
				"C04", dfhighC4name,
				"C05", dfhighC5name,
				"C06", dfhighC6name,
				"C07", dfhighC7name,
				"C08", dfhighC8name,
				"C09", dfhighC9name,
				"C10", dfhighC10name,
				"D01", dfhighD1name,
				"D02", dfhighD2name,
				"D03", dfhighD3name,
				"D04", dfhighD4name,
				"D05", dfhighD5name,
				"D06", dfhighD6name,
				"D07", dfhighD7name,
				"D08", dfhighD8name,
				"D09", dfhighD9name,
				"D10", dfhighD10name,
				"E01", dfhighE1name,
				"E02", dfhighE2name,
				"E03", dfhighE3name,
				"E04", dfhighE4name,
				"E05", dfhighE5name,
				"E06", dfhighE6name,
				"E07", dfhighE7name,
				"E08", dfhighE8name,
				"E09", dfhighE9name,
				"E10", dfhighE10name,
				"F01", dfhighF1name,
				"F02", dfhighF2name,
				"F03", dfhighF3name,
				"F04", dfhighF4name,
				"F05", dfhighF5name,
				"F06", dfhighF6name,
				"F07", dfhighF7name,
				"F08", dfhighF8name,
				"F09", dfhighF9name,
				"F10", dfhighF10name,
				"G01", dfhighG1name,
				"G02", dfhighG2name,
				"G03", dfhighG3name,
				"G04", dfhighG4name,
				"G05", dfhighG5name,
				"G06", dfhighG6name,
				"G07", dfhighG7name,
				"G08", dfhighG8name,
				"G09", dfhighG9name,
				"G10", dfhighG10name,
				"H01", dfhighH1name,
				"H02", dfhighH2name,
				"H03", dfhighH3name,
				"H04", dfhighH4name,
				"H05", dfhighH5name,
				"H06", dfhighH6name,
				"H07", dfhighH7name,
				"H08", dfhighH8name,
				"H09", dfhighH9name,
				"H10", dfhighH10name,
				
				Empty(), Empty()
			),
			If( :Dilution Factor Map == "Medium",
				Match( :Well,
					"A01", dfmidA1name,
					"A02", dfmidA2name,
					"A03", dfmidA3name,
					"A04", dfmidA4name,
					"A05", dfmidA5name,
					"A06", dfmidA6name,
					"A07", dfmidA7name,
					"A08", dfmidA8name,
					"A09", dfmidA9name,
					"A10", dfmidA10name,
					"A11", dfmidA11name,
					"A12", dfmidA12name,					
					"B01", dfmidB1name,
					"B02", dfmidB2name,
					"B03", dfmidB3name,
					"B04", dfmidB4name,
					"B05", dfmidB5name,
					"B06", dfmidB6name,
					"B07", dfmidB7name,
					"B08", dfmidB8name,
					"B09", dfmidB9name,
					"B10", dfmidB10name,
					"B11", dfmidB11name,
					"B12", dfmidB12name,					
					"C01", dfmidC1name,
					"C02", dfmidC2name,
					"C03", dfmidC3name,
					"C04", dfmidC4name,
					"C05", dfmidC5name,
					"C06", dfmidC6name,
					"C07", dfmidC7name,
					"C08", dfmidC8name,
					"C09", dfmidC9name,
					"C10", dfmidC10name,
					"C11", dfmidC11name,
					"C12", dfmidC12name,
					"D01", dfmidD1name,
					"D02", dfmidD2name,
					"D03", dfmidD3name,
					"D04", dfmidD4name,
					"D05", dfmidD5name,
					"D06", dfmidD6name,
					"D07", dfmidD7name,
					"D08", dfmidD8name,
					"D09", dfmidD9name,
					"D10", dfmidD10name,
					"D11", dfmidD11name,
					"D12", dfmidD12name,
					"E01", dfmidE1name,
					"E02", dfmidE2name,
					"E03", dfmidE3name,
					"E04", dfmidE4name,
					"E05", dfmidE5name,
					"E06", dfmidE6name,
					"E07", dfmidE7name,
					"E08", dfmidE8name,
					"E09", dfmidE9name,
					"E10", dfmidE10name,
					"E11", dfmidE11name,
					"E12", dfmidE12name,
					"F01", dfmidF1name,
					"F02", dfmidF2name,
					"F03", dfmidF3name,
					"F04", dfmidF4name,
					"F05", dfmidF5name,
					"F06", dfmidF6name,
					"F07", dfmidF7name,
					"F08", dfmidF8name,
					"F09", dfmidF9name,
					"F10", dfmidF10name,
					"F11", dfmidF11name,
					"F12", dfmidF12name,
					"G01", dfmidG1name,
					"G02", dfmidG2name,
					"G03", dfmidG3name,
					"G04", dfmidG4name,
					"G05", dfmidG5name,
					"G06", dfmidG6name,
					"G07", dfmidG7name,
					"G08", dfmidG8name,
					"G09", dfmidG9name,
					"G10", dfmidG10name,
					"G11", dfmidG11name,
					"G12", dfmidG12name,
					"H01", dfmidH1name,
					"H02", dfmidH2name,
					"H03", dfmidH3name,
					"H04", dfmidH4name,
					"H05", dfmidH5name,
					"H06", dfmidH6name,
					"H07", dfmidH7name,
					"H08", dfmidH8name,
					"H09", dfmidH9name,
					"H10", dfmidH10name,
					"H11", dfmidH11name,
					"H12", dfmidH12name,
					Empty(), Empty()
				),
				If( :Dilution Factor Map == "Low",
					Match( :Well,
						"A01", dflowA1name,
						"A02", dflowA2name,
						"A03", dflowA3name,
						"A04", dflowA4name,
						"A05", dflowA5name,
						"A06", dflowA6name,
						"A07", dflowA7name,
						"A08", dflowA8name,
						"A09", dflowA9name,
						"A10", dflowA10name,
						"A11", dflowA11name,
						"A12", dflowA12name,
						"B01", dflowB1name,
						"B02", dflowB2name,
						"B03", dflowB3name,
						"B04", dflowB4name,
						"B05", dflowB5name,
						"B06", dflowB6name,
						"B07", dflowB7name,
						"B08", dflowB8name,
						"B09", dflowB9name,
						"B10", dflowB10name,
						"B11", dflowB11name,
						"B12", dflowB12name,
						"C01", dflowC1name,
						"C02", dflowC2name,
						"C03", dflowC3name,
						"C04", dflowC4name,
						"C05", dflowC5name,
						"C06", dflowC6name,
						"C07", dflowC7name,
						"C08", dflowC8name,
						"C09", dflowC9name,
						"C10", dflowC10name,
						"C11", dflowC11name,
						"C12", dflowC12name,
						"D01", dflowD1name,
						"D02", dflowD2name,
						"D03", dflowD3name,
						"D04", dflowD4name,
						"D05", dflowD5name,
						"D06", dflowD6name,
						"D07", dflowD7name,
						"D08", dflowD8name,
						"D09", dflowD9name,
						"D10", dflowD10name,
						"D11", dflowD11name,
						"D12", dflowD12name,
						"E01", dflowE1name,
						"E02", dflowE2name,
						"E03", dflowE3name,
						"E04", dflowE4name,
						"E05", dflowE5name,
						"E06", dflowE6name,
						"E07", dflowE7name,
						"E08", dflowE8name,
						"E09", dflowE9name,
						"E10", dflowE10name,
						"E11", dflowE11name,
						"E12", dflowE12name,
						"F01", dflowF1name,
						"F02", dflowF2name,
						"F03", dflowF3name,
						"F04", dflowF4name,
						"F05", dflowF5name,
						"F06", dflowF6name,
						"F07", dflowF7name,
						"F08", dflowF8name,
						"F09", dflowF9name,
						"F10", dflowF10name,
						"F11", dflowF11name,
						"F12", dflowF12name,
						"G01", dflowG1name,
						"G02", dflowG2name,
						"G03", dflowG3name,
						"G04", dflowG4name,
						"G05", dflowG5name,
						"G06", dflowG6name,
						"G07", dflowG7name,
						"G08", dflowG8name,
						"G09", dflowG9name,
						"G10", dflowG10name,
						"G11", dflowG11name,
						"G12", dflowG12name,
						"H01", dflowH1name,
						"H02", dflowH2name,
						"H03", dflowH3name,
						"H04", dflowH4name,
						"H05", dflowH5name,
						"H06", dflowH6name,
						"H07", dflowH7name,
						"H08", dflowH8name,
						"H09", dflowH9name,
						"H10", dflowH10name,
						"H11", dflowH11name,
						"H12", dflowH12name,
						Empty(), Empty()
					)
				)
			)
		)
	)
);
,

if(totalrownumbers==192|totalrownumbers==96,
//create dilution factor column
dttext<<New Column( "Dilution Factor",
	Numeric,
	"Continuous",
	Format( "Best", 12 ),
	Formula(
		If( :Dilution Factor Map == "High",
			Match( :Well,
				"A01", dfhighA1name,
				"A02", dfhighA2name,
				"A03", dfhighA3name,
				"A04", dfhighA4name,
				"A05", dfhighA5name,
				"A06", dfhighA6name,
				"A07", dfhighA7name,
				"A08", dfhighA8name,
				"A09", dfhighA9name,
				"A10", dfhighA10name,
				"A11", dfhighA11name,
				"A12", dfhighA12name,
				"B01", dfhighB1name,
				"B02", dfhighB2name,
				"B03", dfhighB3name,
				"B04", dfhighB4name,
				"B05", dfhighB5name,
				"B06", dfhighB6name,
				"B07", dfhighB7name,
				"B08", dfhighB8name,
				"B09", dfhighB9name,
				"B10", dfhighB10name,
				"B11", dfhighB11name,
				"B12", dfhighB12name,				
				"C01", dfhighC1name,
				"C02", dfhighC2name,
				"C03", dfhighC3name,
				"C04", dfhighC4name,
				"C05", dfhighC5name,
				"C06", dfhighC6name,
				"C07", dfhighC7name,
				"C08", dfhighC8name,
				"C09", dfhighC9name,
				"C10", dfhighC10name,
				"C11", dfhighC11name,
				"C12", dfhighC12name,				
				"D01", dfhighD1name,
				"D02", dfhighD2name,
				"D03", dfhighD3name,
				"D04", dfhighD4name,
				"D05", dfhighD5name,
				"D06", dfhighD6name,
				"D07", dfhighD7name,
				"D08", dfhighD8name,
				"D09", dfhighD9name,
				"D10", dfhighD10name,
				"D11", dfhighD11name,
				"D12", dfhighD12name,				
				"E01", dfhighE1name,
				"E02", dfhighE2name,
				"E03", dfhighE3name,
				"E04", dfhighE4name,
				"E05", dfhighE5name,
				"E06", dfhighE6name,
				"E07", dfhighE7name,
				"E08", dfhighE8name,
				"E09", dfhighE9name,
				"E10", dfhighE10name,
				"E11", dfhighE11name,
				"E12", dfhighE12name,				
				"F01", dfhighF1name,
				"F02", dfhighF2name,
				"F03", dfhighF3name,
				"F04", dfhighF4name,
				"F05", dfhighF5name,
				"F06", dfhighF6name,
				"F07", dfhighF7name,
				"F08", dfhighF8name,
				"F09", dfhighF9name,
				"F10", dfhighF10name,
				"F11", dfhighF11name,
				"F12", dfhighF12name,				
				"G01", dfhighG1name,
				"G02", dfhighG2name,
				"G03", dfhighG3name,
				"G04", dfhighG4name,
				"G05", dfhighG5name,
				"G06", dfhighG6name,
				"G07", dfhighG7name,
				"G08", dfhighG8name,
				"G09", dfhighG9name,
				"G10", dfhighG10name,
				"G11", dfhighG11name,
				"G12", dfhighG12name,				
				"H01", dfhighH1name,
				"H02", dfhighH2name,
				"H03", dfhighH3name,
				"H04", dfhighH4name,
				"H05", dfhighH5name,
				"H06", dfhighH6name,
				"H07", dfhighH7name,
				"H08", dfhighH8name,
				"H09", dfhighH9name,
				"H10", dfhighH10name,
				"H11", dfhighH11name,
				"H12", dfhighH12name,				
				
				Empty(), Empty()
			),
			If( :Dilution Factor Map == "Medium",
				Match( :Well,
					"A01", dfmidA1name,
					"A02", dfmidA2name,
					"A03", dfmidA3name,
					"A04", dfmidA4name,
					"A05", dfmidA5name,
					"A06", dfmidA6name,
					"A07", dfmidA7name,
					"A08", dfmidA8name,
					"A09", dfmidA9name,
					"A10", dfmidA10name,
					"A11", dfmidA11name,
					"A12", dfmidA12name,					
					"B01", dfmidB1name,
					"B02", dfmidB2name,
					"B03", dfmidB3name,
					"B04", dfmidB4name,
					"B05", dfmidB5name,
					"B06", dfmidB6name,
					"B07", dfmidB7name,
					"B08", dfmidB8name,
					"B09", dfmidB9name,
					"B10", dfmidB10name,
					"B11", dfmidB11name,
					"B12", dfmidB12name,					
					"C01", dfmidC1name,
					"C02", dfmidC2name,
					"C03", dfmidC3name,
					"C04", dfmidC4name,
					"C05", dfmidC5name,
					"C06", dfmidC6name,
					"C07", dfmidC7name,
					"C08", dfmidC8name,
					"C09", dfmidC9name,
					"C10", dfmidC10name,
					"C11", dfmidC11name,
					"C12", dfmidC12name,
					"D01", dfmidD1name,
					"D02", dfmidD2name,
					"D03", dfmidD3name,
					"D04", dfmidD4name,
					"D05", dfmidD5name,
					"D06", dfmidD6name,
					"D07", dfmidD7name,
					"D08", dfmidD8name,
					"D09", dfmidD9name,
					"D10", dfmidD10name,
					"D11", dfmidD11name,
					"D12", dfmidD12name,
					"E01", dfmidE1name,
					"E02", dfmidE2name,
					"E03", dfmidE3name,
					"E04", dfmidE4name,
					"E05", dfmidE5name,
					"E06", dfmidE6name,
					"E07", dfmidE7name,
					"E08", dfmidE8name,
					"E09", dfmidE9name,
					"E10", dfmidE10name,
					"E11", dfmidE11name,
					"E12", dfmidE12name,
					"F01", dfmidF1name,
					"F02", dfmidF2name,
					"F03", dfmidF3name,
					"F04", dfmidF4name,
					"F05", dfmidF5name,
					"F06", dfmidF6name,
					"F07", dfmidF7name,
					"F08", dfmidF8name,
					"F09", dfmidF9name,
					"F10", dfmidF10name,
					"F11", dfmidF11name,
					"F12", dfmidF12name,
					"G01", dfmidG1name,
					"G02", dfmidG2name,
					"G03", dfmidG3name,
					"G04", dfmidG4name,
					"G05", dfmidG5name,
					"G06", dfmidG6name,
					"G07", dfmidG7name,
					"G08", dfmidG8name,
					"G09", dfmidG9name,
					"G10", dfmidG10name,
					"G11", dfmidG11name,
					"G12", dfmidG12name,
					"H01", dfmidH1name,
					"H02", dfmidH2name,
					"H03", dfmidH3name,
					"H04", dfmidH4name,
					"H05", dfmidH5name,
					"H06", dfmidH6name,
					"H07", dfmidH7name,
					"H08", dfmidH8name,
					"H09", dfmidH9name,
					"H10", dfmidH10name,
					"H11", dfmidH11name,
					"H12", dfmidH12name,
					Empty(), Empty()
				),
				If( :Dilution Factor Map == "Low",
					Match( :Well,
						"A01", dflowA1name,
						"A02", dflowA2name,
						"A03", dflowA3name,
						"A04", dflowA4name,
						"A05", dflowA5name,
						"A06", dflowA6name,
						"A07", dflowA7name,
						"A08", dflowA8name,
						"A09", dflowA9name,
						"A10", dflowA10name,
						"A11", dflowA11name,
						"A12", dflowA12name,
						"B01", dflowB1name,
						"B02", dflowB2name,
						"B03", dflowB3name,
						"B04", dflowB4name,
						"B05", dflowB5name,
						"B06", dflowB6name,
						"B07", dflowB7name,
						"B08", dflowB8name,
						"B09", dflowB9name,
						"B10", dflowB10name,
						"B11", dflowB11name,
						"B12", dflowB12name,
						"C01", dflowC1name,
						"C02", dflowC2name,
						"C03", dflowC3name,
						"C04", dflowC4name,
						"C05", dflowC5name,
						"C06", dflowC6name,
						"C07", dflowC7name,
						"C08", dflowC8name,
						"C09", dflowC9name,
						"C10", dflowC10name,
						"C11", dflowC11name,
						"C12", dflowC12name,
						"D01", dflowD1name,
						"D02", dflowD2name,
						"D03", dflowD3name,
						"D04", dflowD4name,
						"D05", dflowD5name,
						"D06", dflowD6name,
						"D07", dflowD7name,
						"D08", dflowD8name,
						"D09", dflowD9name,
						"D10", dflowD10name,
						"D11", dflowD11name,
						"D12", dflowD12name,
						"E01", dflowE1name,
						"E02", dflowE2name,
						"E03", dflowE3name,
						"E04", dflowE4name,
						"E05", dflowE5name,
						"E06", dflowE6name,
						"E07", dflowE7name,
						"E08", dflowE8name,
						"E09", dflowE9name,
						"E10", dflowE10name,
						"E11", dflowE11name,
						"E12", dflowE12name,
						"F01", dflowF1name,
						"F02", dflowF2name,
						"F03", dflowF3name,
						"F04", dflowF4name,
						"F05", dflowF5name,
						"F06", dflowF6name,
						"F07", dflowF7name,
						"F08", dflowF8name,
						"F09", dflowF9name,
						"F10", dflowF10name,
						"F11", dflowF11name,
						"F12", dflowF12name,
						"G01", dflowG1name,
						"G02", dflowG2name,
						"G03", dflowG3name,
						"G04", dflowG4name,
						"G05", dflowG5name,
						"G06", dflowG6name,
						"G07", dflowG7name,
						"G08", dflowG8name,
						"G09", dflowG9name,
						"G10", dflowG10name,
						"G11", dflowG11name,
						"G12", dflowG12name,
						"H01", dflowH1name,
						"H02", dflowH2name,
						"H03", dflowH3name,
						"H04", dflowH4name,
						"H05", dflowH5name,
						"H06", dflowH6name,
						"H07", dflowH7name,
						"H08", dflowH8name,
						"H09", dflowH9name,
						"H10", dflowH10name,
						"H11", dflowH11name,
						"H12", dflowH12name,
						Empty(), Empty()
					)
				)
			)
		)
	)
);


,


//create dilution factor column
dttext<<New Column( "Dilution Factor",
	Numeric,
	"Continuous",
	Format( "Best", 12 ),
	Formula(
		If( :Dilution Factor Map == "High",
			Match( :Well,
				"A01", dfhighA1name,
				"A02", dfhighA2name,
				"A03", dfhighA3name,
				"A04", dfhighA4name,
				"A05", dfhighA5name,
				"A06", dfhighA6name,
				"A07", dfhighA7name,
				"A08", dfhighA8name,
				"A09", dfhighA9name,
				"A10", dfhighA10name,
				"B01", dfhighB1name,
				"B02", dfhighB2name,
				"B03", dfhighB3name,
				"B04", dfhighB4name,
				"B05", dfhighB5name,
				"B06", dfhighB6name,
				"B07", dfhighB7name,
				"B08", dfhighB8name,
				"B09", dfhighB9name,
				"B10", dfhighB10name,
				"C01", dfhighC1name,
				"C02", dfhighC2name,
				"C03", dfhighC3name,
				"C04", dfhighC4name,
				"C05", dfhighC5name,
				"C06", dfhighC6name,
				"C07", dfhighC7name,
				"C08", dfhighC8name,
				"C09", dfhighC9name,
				"C10", dfhighC10name,
				"D01", dfhighD1name,
				"D02", dfhighD2name,
				"D03", dfhighD3name,
				"D04", dfhighD4name,
				"D05", dfhighD5name,
				"D06", dfhighD6name,
				"D07", dfhighD7name,
				"D08", dfhighD8name,
				"D09", dfhighD9name,
				"D10", dfhighD10name,
				"E01", dfhighE1name,
				"E02", dfhighE2name,
				"E03", dfhighE3name,
				"E04", dfhighE4name,
				"E05", dfhighE5name,
				"E06", dfhighE6name,
				"E07", dfhighE7name,
				"E08", dfhighE8name,
				"E09", dfhighE9name,
				"E10", dfhighE10name,
				"F01", dfhighF1name,
				"F02", dfhighF2name,
				"F03", dfhighF3name,
				"F04", dfhighF4name,
				"F05", dfhighF5name,
				"F06", dfhighF6name,
				"F07", dfhighF7name,
				"F08", dfhighF8name,
				"F09", dfhighF9name,
				"F10", dfhighF10name,
				"G01", dfhighG1name,
				"G02", dfhighG2name,
				"G03", dfhighG3name,
				"G04", dfhighG4name,
				"G05", dfhighG5name,
				"G06", dfhighG6name,
				"G07", dfhighG7name,
				"G08", dfhighG8name,
				"G09", dfhighG9name,
				"G10", dfhighG10name,
				"H01", dfhighH1name,
				"H02", dfhighH2name,
				"H03", dfhighH3name,
				"H04", dfhighH4name,
				"H05", dfhighH5name,
				"H06", dfhighH6name,
				"H07", dfhighH7name,
				"H08", dfhighH8name,
				"H09", dfhighH9name,
				"H10", dfhighH10name,
				Empty(), Empty()
			),
			If( :Dilution Factor Map == "Medium",
				Match( :Well,
					"A01", dfmidA1name,
					"A02", dfmidA2name,
					"A03", dfmidA3name,
					"A04", dfmidA4name,
					"A05", dfmidA5name,
					"A06", dfmidA6name,
					"A07", dfmidA7name,
					"A08", dfmidA8name,
					"A09", dfmidA9name,
					"A10", dfmidA10name,
					"B01", dfmidB1name,
					"B02", dfmidB2name,
					"B03", dfmidB3name,
					"B04", dfmidB4name,
					"B05", dfmidB5name,
					"B06", dfmidB6name,
					"B07", dfmidB7name,
					"B08", dfmidB8name,
					"B09", dfmidB9name,
					"B10", dfmidB10name,
					"C01", dfmidC1name,
					"C02", dfmidC2name,
					"C03", dfmidC3name,
					"C04", dfmidC4name,
					"C05", dfmidC5name,
					"C06", dfmidC6name,
					"C07", dfmidC7name,
					"C08", dfmidC8name,
					"C09", dfmidC9name,
					"C10", dfmidC10name,
					"D01", dfmidD1name,
					"D02", dfmidD2name,
					"D03", dfmidD3name,
					"D04", dfmidD4name,
					"D05", dfmidD5name,
					"D06", dfmidD6name,
					"D07", dfmidD7name,
					"D08", dfmidD8name,
					"D09", dfmidD9name,
					"D10", dfmidD10name,
					"E01", dfmidE1name,
					"E02", dfmidE2name,
					"E03", dfmidE3name,
					"E04", dfmidE4name,
					"E05", dfmidE5name,
					"E06", dfmidE6name,
					"E07", dfmidE7name,
					"E08", dfmidE8name,
					"E09", dfmidE9name,
					"E10", dfmidE10name,
					"F01", dfmidF1name,
					"F02", dfmidF2name,
					"F03", dfmidF3name,
					"F04", dfmidF4name,
					"F05", dfmidF5name,
					"F06", dfmidF6name,
					"F07", dfmidF7name,
					"F08", dfmidF8name,
					"F09", dfmidF9name,
					"F10", dfmidF10name,
					"G01", dfmidG1name,
					"G02", dfmidG2name,
					"G03", dfmidG3name,
					"G04", dfmidG4name,
					"G05", dfmidG5name,
					"G06", dfmidG6name,
					"G07", dfmidG7name,
					"G08", dfmidG8name,
					"G09", dfmidG9name,
					"G10", dfmidG10name,
					"H01", dfmidH1name,
					"H02", dfmidH2name,
					"H03", dfmidH3name,
					"H04", dfmidH4name,
					"H05", dfmidH5name,
					"H06", dfmidH6name,
					"H07", dfmidH7name,
					"H08", dfmidH8name,
					"H09", dfmidH9name,
					"H10", dfmidH10name,
					Empty(), Empty()
				),
				If( :Dilution Factor Map == "Low",
					Match( :Well,
						"A01", dflowA1name,
						"A02", dflowA2name,
						"A03", dflowA3name,
						"A04", dflowA4name,
						"A05", dflowA5name,
						"A06", dflowA6name,
						"A07", dflowA7name,
						"A08", dflowA8name,
						"A09", dflowA9name,
						"A10", dflowA10name,
						"B01", dflowB1name,
						"B02", dflowB2name,
						"B03", dflowB3name,
						"B04", dflowB4name,
						"B05", dflowB5name,
						"B06", dflowB6name,
						"B07", dflowB7name,
						"B08", dflowB8name,
						"B09", dflowB9name,
						"B10", dflowB10name,
						"C01", dflowC1name,
						"C02", dflowC2name,
						"C03", dflowC3name,
						"C04", dflowC4name,
						"C05", dflowC5name,
						"C06", dflowC6name,
						"C07", dflowC7name,
						"C08", dflowC8name,
						"C09", dflowC9name,
						"C10", dflowC10name,
						"D01", dflowD1name,
						"D02", dflowD2name,
						"D03", dflowD3name,
						"D04", dflowD4name,
						"D05", dflowD5name,
						"D06", dflowD6name,
						"D07", dflowD7name,
						"D08", dflowD8name,
						"D09", dflowD9name,
						"D10", dflowD10name,
						"E01", dflowE1name,
						"E02", dflowE2name,
						"E03", dflowE3name,
						"E04", dflowE4name,
						"E05", dflowE5name,
						"E06", dflowE6name,
						"E07", dflowE7name,
						"E08", dflowE8name,
						"E09", dflowE9name,
						"E10", dflowE10name,
						"F01", dflowF1name,
						"F02", dflowF2name,
						"F03", dflowF3name,
						"F04", dflowF4name,
						"F05", dflowF5name,
						"F06", dflowF6name,
						"F07", dflowF7name,
						"F08", dflowF8name,
						"F09", dflowF9name,
						"F10", dflowF10name,
						"G01", dflowG1name,
						"G02", dflowG2name,
						"G03", dflowG3name,
						"G04", dflowG4name,
						"G05", dflowG5name,
						"G06", dflowG6name,
						"G07", dflowG7name,
						"G08", dflowG8name,
						"G09", dflowG9name,
						"G10", dflowG10name,
						"H01", dflowH1name,
						"H02", dflowH2name,
						"H03", dflowH3name,
						"H04", dflowH4name,
						"H05", dflowH5name,
						"H06", dflowH6name,
						"H07", dflowH7name,
						"H08", dflowH8name,
						"H09", dflowH9name,
						"H10", dflowH10name,
						Empty(), Empty()
					)
				)
			)
		)
	)
);

);

);


//Create Copies column
dttext << New Column( "Copies/uL",
	Numeric,
	"Continuous",
	Format( "Best", 12 ),
	Formula( Num( :Final Concentration ) * 5 )
);

//Create Vg/mL column
dttext << New Column( "Vg/mL",
	Numeric,
	"Continuous",
	Format( "Scientific", 12, 2 ),
	Formula( If( :Name( "Copies/uL" ) != 0, :Name( "Copies/uL" ) * :Dilution Factor * 1000 ) )
);

//Create column for each pair of Sample Replicates
dttext << New Column( "Sample Group", Character, "Nominal", Formula( Word( 1, :Sample, "." ) ) );

//Create new data table that has the average Vg/mL values
dttextsum2 = dttext << Summary(
	Group( :Group, :Sample Group ),
	Mean( :Name( "Vg/mL" ) ),
	Std Dev( :Name( "Vg/mL" ) ),
	CV( :Name( "Vg/mL" ) ),
	Freq( "None" ),
	Weight( "None" ),
);
:Group << color cell by value;

//list of concentrations
moilist = List();
moilist[1] = Char( A1con );
moilist[2] = Char( B1con );
moilist[3] = Char( C1con );
moilist[4] = Char( D1con );
moilist[5] = Char( E1con );

//record nominal dose to calculate infectious 
nominaldose = C1con;

//Make MOI Column
current data table(dttextsum2);
dttextsum2 << New Column( "MOI (Vg/cell)",
	continuous,
	numeric,
	Values( Repeat( moilist, Floor( N Rows( dttextsum2 ) / N Items( moilist ) ) ) )
);

//Change MOI column to Scientific Notation
:Name("MOI (Vg/cell)") << Format( "Scientific", 12 );

//Transform the MOI data using Log 10
dttextsum2 << New Column( "Log10 MOI (Vg/cell)", continuous, numeric, formula( Log10( Name("MOI (Vg/cell)") ) ));


//make log10 of each of the concentrations
moival1 = Log10( num(A1con) );
moival2 = Log10( num(B1con) );
moival3 = Log10( num(C1con) );
moival4 = Log10( num(D1con) );
moival5 = Log10( num(E1con) );


//Copy the table without formulas
Current Data Table( dttextsum2 );

dttextsum3=dttextsum2<<subset(invisible,Copy formula( 0 ), All rows, Selected columns only( 0 ));


close(dttextsum2, no save);

//Rename the data table to be dttextsum2
dttextsum2=dttextsum3;


//Rename the data table that will be used in analysis
dttextsum2 << set name( filenamer );

// Set up the report window that will be the first page of the pdf report
// this page includes the logos of Bioassay Sciences and Astellas
// it also includes user and time log information
// Set up the report window
heading = New Window( "Astellas Potency Report",
	V List Box(
		String Col Box( "", {spacer} ),
		H List Box( String Col Box( "", {spacer} ) ),
		String Col Box( "", {spacer} ),
		H List Box( String Col Box( "", {spacer} ) ),
		H List Box( V List Box( Picture Box( Astellaslogo ) ), ),
		H List Box( String Col Box( "", {spacer} ) ),
		H List Box( cb = Text Box( "Astellas Infectivity Assay Report" ) ),
		H List Box( at = Text Box( "Test Article Report" ) ), 

	),
	V List Box( H List Box( String Col Box( "", {spacer} ) ) ),
	V List Box(
		H List Box(
			String Col Box( "", {spacer} ),
			String Col Box( "Data File(s):", dtname),
			String Col Box( "", {spacer} ),			
			String Col Box("Configuration File:", {confignamer}
			),
			String Col Box( "", {spacer} ),
			String Col Box("Date: ",{dateint}),
			String Col Box( "", {spacer} ),
		),
		String Col Box( "", {spacer} ),
		H List Box(
			String Col Box( "", {spacer} ),
			String Col Box( "Total Number of Plate(s): ", {platetotal} )
				
		), 
	),
	V List Box( H List Box( String Col Box( "", {spacer} ) ) ),
);
cb << Font Color( 19 ) << Set Font Size( 20 ) << set Font Style( "Bold" );
cb << Set Wrap( 1000 );
at << Set Font Size( 20 );
at << Font Color( 19 ) << set Font Style( "Bold" );
Heading << journal << close window;

//User Report
userreport = New Window( "User Report",
	V List Box( H List Box( String Col Box( "", {liner} ) ) ),
	V List Box(

		String Col Box( "", {spacer} ), 
	
		H List Box( username = Text Box( "Assay Details" ) ),
		V List Box( H List Box( String Col Box( "", {liner} ) ) ),
		String Col Box( "", {spacer} ),
		String Col Box( "", {spacer} ),
		String Col Box( "User Information",
			{usernamedisplay, computernamedisplay, logonserverdisplay, userdomaindisplay, scriptver,
			Concat( "JMP Version ", jmpreport )}
		),
		String Col Box( "", {spacer} ),
		String Col Box( "", {spacer} ),
		String Col Box( "", {spacer} ), 

	),
	V List Box( H List Box( String Col Box( "", {dashliner, "Analyst Signature/Date"} ) ) ),
	String Col Box( "", {spacer} ),
	String Col Box( "", {spacer} ),
	String Col Box( "", {spacer} ),
	V List Box( H List Box( String Col Box( "", {dashliner, "Approver Signature/Date"} ) ) ), 
);
username << Set Font Size( 16 );
username << Font Color( 19 ) << set Font Style( "Bold" );
userreport << journal << close window;

//Page break to go to another page in the report
pagebreaker = New Window( "     Nothing Really",
	V List Box( String Col Box( "", {spacer} ), String Col Box( "", {spacer} ), Page Break Box(), )
);
pagebreaker << journal << close window;

//Make sure all analysis is done on the summary table
Current Data Table( dttextsum2 );

//change name of response columns
:Name( "Mean(Vg/mL)" ) << set name( "Vg/mL" );
:Name( "CV(Vg/mL)" ) << set name( "CV(%)" );

//create column for the log transformation of the Vg/mL column
dttextsum2 << New Column( "Log10 Vg/mL",
	Numeric,
	"Continuous",
	Format( "Best", 12 ),
	Formula( Log10( :Name( "Vg/mL" ) ) )
);

//Outlier Identification
//Outlier Jackknife z Within Group/Dose Outlier Determination
Current Data Table( dttextsum2 );
multi = Multivariate(
	Y( :Name( "Vg/mL" ) ),
	Estimation Method( "Row-wise" ),
	Matrix Format( "Square" ),
	Scatterplot Matrix( Density Ellipses( 1 ), Shaded Ellipses( 0 ), Ellipse Color( 3 ) ),
	Pairwise Correlations( 1 ),
	Mahalanobis Distances( 1 ),
	Jackknife Distances( 1 ),
	By( :Group, :Name("MOI (Vg/cell)") )
);
multi << Jackknife Distances( 1, Save Jackknife Distances );
multi << close window;
:Name("Jackknife Distances By Group By MOI (Vg/cell)")<< Set name( "Jackknife z" );
:Jackknife z << Format( "Fixed", 6, 3 );
dttextsum2 << New Column( "First Outlier Within Group Check",
	character,
	formula( If( Round( Abs( :Jackknife z ), 3 ) >=outlierlimitnum, "Outlier", "Pass" ) )
);
dttextsum2 << select all rows;
dttextsum2 << invert row selection;

dttextsum2 << select where( :First Outlier Within Group Check == "Outlier" ) << exclude( 1 );
dttextsum2 << ClearSelect;

//summary table for mean 
dtMeanSummary = dttextsum2 << Summary(
	invisible,
	Group( :Group, ::Name("MOI (Vg/cell)") ),
	Mean( :Name( "Vg/mL" ) ),
	link to original table (0)
);

ConcentrationColName = "MOI (Vg/cell)";

:Name("Mean(Vg/mL)")<<set name("Mean Vg/mL");

eval(eval expr(dttextsum2 << Update(
	With( dtMeanSummary ),
	Match Columns( :Group = :Group, expr(parse(":" || Log Capture( Print( ConcentrationColName ) ) || "n")) = expr(parse(":" || Log Capture( Print( ConcentrationColName ) ) || "n")) ),
	Add Columns from Update Table( :"Mean Vg/mL"n ),
	Replace Columns in Main Table( None )
)));
Close( dtMeanSummary, no save );

//get the standard deviation for each MOI
dtSDSummary = dttextsum2 << Summary(
	invisible,
	Group( :Group, :Name("MOI (Vg/cell)")),
	Std Dev( :Name( "Vg/mL" ) )
);

:Name("Std Dev(Vg/mL)")<<set name("Std Dev Vg/mL");

eval(eval expr(dttextsum2 << Update(
	With( dtSDSummary ),
	Match Columns( expr(parse(":" || Log Capture( Print( ConcentrationColName ) ) || "n")) = expr(parse(":" || Log Capture( Print( ConcentrationColName ) ) || "n")) ),
	Add Columns from Update Table( :"Std Dev Vg/mL"n ),
	Replace Columns in Main Table( None )
)));	
Close( dtSDSummary, no save );

Column(dttextsum2, N Cols()) << set name("SD (Vg/mL)");
:Name("Mean Vg/mL")<<set name("Mean (Vg/mL)");

dttextsum2 << New Column( "Analytical Error Upper",
	Numeric,
	"Continuous",
	Format( "Fixed Dec", 12, 3 ),
	Formula( :Name( "Mean (Vg/mL)" ) + 1.96 * :Name( "SD (Vg/mL)" ) )
);

dttextsum2 << New Column( "Analytical Error Lower",
	Numeric,
	"Continuous",
	Format( "Fixed Dec", 12, 3 ),
	Formula( :Name( "Mean (Vg/mL)" ) - 1.96 * :Name( "SD (Vg/mL)" ) )
);
	
dttextsum2 << New Column( "Outlier Within Group",
	Character( 7 ),
	"Nominal",
	Formula(
		Match( :First Outlier Within Group Check, 
				// Condition 1
			"Pass", "Pass", 
				// Condition 2
			"Outlier",
				If( :Name( "Vg/mL" ) > :"Analytical Error Lower"n & :Name( "Vg/mL" ) < :"Analytical Error Upper"n,
					"Pass",
					"Outlier"
				)
		)
	),
	Set Property( "Value Colors", {"Pass" = -15400938, "Outlier" = -16768477} ),
	Color Cell by Value
);
	
dttextsum2 << Clear Row States;
dttextsum2 << select where( :Outlier Within Group == "Outlier" ) << exclude;

//make the list of the test samples if there are 5 samples and the reference standard
	snames = List();
	snames[1] = SN1;
	snames[2] = SN2;
	snames[3] = SN3;
	snames[4] = SN4;
	snames[5] = SN5;
	snames[6] = SN6;

//create variables for the final materials list
	samplenames = List();


//Make the  final list of test articles and standard (if applicable)
	For( i = 1, i <= 6, i++,
		If( Eval( snames[i] ) == "",
			a = 1 + 2,
			samplenames[i] = Eval( snames[i] )
		)
	);


	//create subset for each pair of reference standard and test article for  between outlier detection
	current data table(dttextsum2);
	for(i=1, i<=nitems(samplenames), i++,
	dtbetween=dttextsum2<<select where( :Name( "Group" ) ==samplenames[i]|contains( :Name( "Group" ),"Standard"))<<subset(invisible);
	
	group1 = Fit Model(
		Y( :Name("Log 10 Vg/mL") ),
		Effects( :Group, :Name( "Log 10 MOI (Vg/cell)" ), :Group * :Name( "Log 10 MOI (Vg/cell)" ) ),
		Personality( "Standard Least Squares" ),
		Emphasis( "Effect Leverage" ),
		Run(
			:Name("Log 10 Vg/mL") << {Summary of Fit( 1 ), Analysis of Variance( 1 ), Parameter Estimates( 1 ), Scaled Estimates( 1 ),
			Plot Actual by Predicted( 1 ), Plot Residual by Predicted( 1 ), Plot Residual by Row( 1 ), Plot Studentized Residuals( 0 ),
			Plot Effect Leverage( 1 ), Plot Residual by Normal Quantiles( 0 ), Box Cox Y Transformation( 0 ), Show VIF( 1 )},
			Effect Summary( 0 )
		)
	); 
	group1r = group1 << report;
	group1r << Externally Studentized Residuals; 
	group1r << close window;

	:Name("Externally Studentized Residuals Log 10 Vg/mL") << set Name( "Externally Studentized Residuals" );
	:Externally Studentized Residuals << Format( "Fixed Dec", 7, 3 );
	dtbetween << New Column( "Outlier Between Group",
		Character,
		"Nominal",
		formula( If( Round( Abs( :Externally Studentized Residuals ), 3 ) >= studoutlierlimitnum, "Outlier", "Ok" ) )
	);

	:Outlier Between Group<<Set Property( "Value Colors", {"Ok" = -15400938, "Outlier" = -16768477} )<<Color Cell by Value;
	
	//delete standard data from the other subsets as it is in the original 
	if(i!=1,
		dtbetween<<select where(contains( :Name( "Group" ),"Standard"))<<delete rows;
		,
		empty();
		);
		
	);
	
	
	//close original data table without between group outlier detection
	close(dttextsum2, no save);
	
	//close the configuration file
	close(dtconfig, no save); 
	
	//close the original csv data tables
	close(dttext, no save);
	
	For( i = 1, i < platenumber + 1, i++,

	close(dtname[i], no save);
	);

	
	// Create list of subset tables 
Tables = {};
For( i = 1, i <= N Table(), i++,
	Insert Into( Tables, Data Table( i ) << get name );
);

	new Table("all data");
	// Concatenate all data tables
	For( i = 1, i <= N Items( Tables ), i++,
		 Data Table( "all data" ) << Concatenate(
			Data Table( Tables[i] ),
			append to first table(1)
		);
		Close( Data Table( Tables[i] ), No Save );
	);
	dttextsum2 = current data table();
	
	//hide unneeded columns
	:First Outlier Within Group Check<<hide(1);
	:Name("Mean (Vg/mL)")<<hide(1);
	:Name("SD (Vg/mL)")<<hide(1);
	:Analytical Error Upper<<hide(1);
	:Analytical Error Lower<<hide(1);
	

//EC50 STD 5 Dose Unconstrained Fixed

dttextsum2 << clear row states;
:Name( "MOI (Vg/cell)" ) << set modeling type( "Continuous" );
dttextsum2 << select where( :Outlier Within Group == "Outlier" ) << exclude;
dttextsum2 << select where( :Outlier Between Group == "Outlier" ) << exclude;
dttextsum2 << select where( :Group == rstandard );
dttextsum2 << invert row selection << exclude << hide;
fixedRFER = 9.73;

ec50refuncon = Fit Model(
	Y( :Name( "Log10 Vg/mL" ) ),
	Effects( :Name( "Log10 MOI (Vg/cell)" ) ),
	Personality( "Standard Least Squares" ),
	Emphasis( "Effect Leverage" ),
	Run(
		:Name( "Log10 Vg/mL" ) << {Summary of Fit( 1 ), Analysis of Variance( 1 ), Parameter Estimates( 1 ),
		Scaled Estimates( 1 ), Plot Actual by Predicted( 1 ), Plot Residual by Predicted( 1 ),
		Plot Residual by Row( 1 ), Plot Studentized Residuals( 0 ), Plot Effect Leverage( 1 ),
		Plot Residual by Normal Quantiles( 0 ), Box Cox Y Transformation( 0 ), Show VIF( 1 ),
		Inverse Prediction( Response( fixedRFER ), Term Value( Name( "Log10 MOI (Vg/cell)" )(.) ) )},
		Effect Summary( 0 )
	),
	SendToReport(
		Dispatch(
			{"Response Log10 Vg/mL", "Inverse Prediction"},
			"2",
			ScaleBox,
			{Min( 3.5 ), Max( 6.5 ), Inc( 0.5 ), Minor Ticks( 0 )}
		)
	)
);
ec50refunconr = ec50refuncon << report;
ec50refvalues = ec50refunconr["Inverse Prediction"][columnbox( 2 )] << getasmatrix;
ec50refunconfourdoselog = ec50refvalues[1];
ec50refunconfourdose = 10 ^ (ec50refunconfourdoselog);
ec50refunconr << close window;
dttextsum2 << clear row states;
dttextsum2 << select where( :Outlier Within Group == "Outlier" ) << exclude;
dttextsum2 << select where( :Outlier Between Group == "Outlier" ) << exclude;




//Systems Suitability List
ssuitabilitylistupper = List();
ssuitabilitylistlower = List();
ssuitabilitylistupper[1] = EC50refupperlimit;
ssuitabilitylistlower[1] = EC50reflowerlimit;



//Setup
samplesizedose = List();
parallelismsample = List();
parallelismvalidity = List();
linearitysample = List();
linearityvalidity = List();
cvperdose = List();
cvvalidity = List();
rpdelta = List();
doseresponse = List();
ec50lsl = List();
ec50usl = List();
rpdeltavalidity = List();
samplesec50ref = List();
samplesec50test = List();
samplesrp = List();
samplesrpu95 = List();
samplesrpl95 = List();
samplesoos = List();
samplesIR = List();
overallvalidity = List();

STDLotCF = 0;
StabilityCF = 0;
criterialist = List();
validlist = List();
criterialist[1] = "Reference Standard Curve Depth ≥";
criterialist[2] = "Sample Size Per Dose ≥";
criterialist[3] = "Parallelism Slope Ratio Lower Limit ≥";
criterialist[4] = "Parallelism Slope Ratio Upper Limit ≤";
criterialist[5] = "Linearity Ratio  ≤";
criterialist[6] = "R-squared ≥";
criterialist[7] = "Abs(Unconstrained - Constrained Relative Potency Delta) ≤";
criterialist[8] = "Dose Reponse Test  ≤";
criterialist[9] = "EC50 5 Dose Standard Unconstrained LSL Vg/cell ≥";
criterialist[10] = "EC50 5 Dose Standard Unconstrained USL Vg/cell ≤";


//Define the Validity Limits
validlist[1] = curvedepthlimit;
validlist[2] = ndoselimit;
validlist[3] = lowerparallel_limit;
validlist[4] = upperparallel_limit;
validlist[5] = linearity_limit;
validlist[6] = R2limit;
validlist[7] = RPDeltalimit;
validlist[8] = Doselimit;
validlist[9] = EC50reflowerlimit;
validlist[10] = EC50refupperlimit;

//Show the Reference Standard data in the report
dttextsum2 = Current Data Table();
dttextsum2 << select where( :Group == rstandard );

refstanddata = New Window( "     Data Display",
	V List Box(
		H List Box( String Col Box( "", {liner} ) ),
		String Col Box( "", {spacer} ),
		H List Box(
			refdataname = Text Box( Concat( rstandard, " ", "Reference Standard Data " ) ), 
				//String Col Box("", {spacer}),
		)
	),
	V List Box( H List Box( String Col Box( "", {liner} ) ) ), 

);
refdataname << Set Font Size( 16 );
refdataname << Font Color( 19 ) << set Font Style( "Bold" ) << set wrap( 2000 );
refstanddata << journal << close window;
dttextsum2 << Journal; 

//Add Limits of Outlier Detections to report below table
jackztb = Text Box( Concat( "Outliers detected in Outlier Within Group column are Jackknife z greater than ", Char( outlierlimitnum ),
" and RLU outside of 95% analytical error" ) );
jackztb << Font Color( 19 ) << set Font Style( "Bold" );
jackztb << Set Font Size( 12 );
jackztb << Set Wrap( 1000 );
jackztb << journal;

studrtb = Text Box( Concat( "Between Group Outliers are aboslute value of Externally Studentized Residuals greater than ", Char( studoutlierlimitnum ) ) );
studrtb << Font Color( 19 ) << set Font Style( "Bold" );
studrtb << Set Font Size( 12 );
studrtb << Set Wrap( 1000 );
studrtb << journal;

If( SN1 == rstandard,
	Empty(), 

	dttextsum2 << clear row states;
	dttextsum2 << select where( :Group == sn1 );

//Header for the first test sample
	ts1data = New Window( "     Data Display",
		V List Box(
			H List Box( String Col Box( "", {liner} ) ),
			String Col Box( "", {spacer} ),
			H List Box(
				ts1dataname = Text Box( Concat( SN1, " ", "Sample Data" ) ), 
				//String Col Box("", {spacer}),
			)
		),
		V List Box( H List Box( String Col Box( "", {liner} ) ) ), 

	);
	ts1dataname << Set Font Size( 16 );
	ts1dataname << Font Color( 19 ) << set Font Style( "Bold" ) << set wrap( 2000 );
	ts1data << journal << close window;
	dttextsum2 << Journal; 

//Add Limits of Outlier Detections to report below table
jackztb = Text Box( Concat( "Outliers detected in Outlier Within Group column are Jackknife z greater than ", Char( outlierlimitnum ),
" and RLU outside of 95% analytical error" ) );
jackztb << Font Color( 19 ) << set Font Style( "Bold" );
jackztb << Set Font Size( 12 );
jackztb << Set Wrap( 1000 );
jackztb << journal;

studrtb = Text Box( Concat( "Between Group Outliers are aboslute value of Externally Studentized Residuals greater than ", Char( studoutlierlimitnum ) ) );
studrtb << Font Color( 19 ) << set Font Style( "Bold" );
studrtb << Set Font Size( 12 );
studrtb << Set Wrap( 1000 );
studrtb << journal;

);


If( sn2 == "" | sn2 == rstandard,
	Empty(),
	dttextsum2 << clear row states;
	dttextsum2 << select where( :Group == sn2 );

//Header for the second Sample
	ts2data = New Window( "     Data Display",
		V List Box(
			H List Box( String Col Box( "", {liner} ) ),
			String Col Box( "", {spacer} ),
			H List Box(
				ts2dataname = Text Box( Concat( SN2, " ", "Sample Data" ) ), 
				//String Col Box("", {spacer}),
			)
		),
		V List Box( H List Box( String Col Box( "", {liner} ) ) ), 

	);
	ts2dataname << Set Font Size( 16 );
	ts2dataname << Font Color( 19 ) << set Font Style( "Bold" ) << set wrap( 2000 );
	ts2data << journal << close window;
	dttextsum2 << Journal; 

//Add Limits of Outlier Detections to report below table
jackztb = Text Box( Concat( "Outliers detected in Outlier Within Group column are Jackknife z greater than ", Char( outlierlimitnum ),
" and RLU outside of 95% analytical error" ) );
jackztb << Font Color( 19 ) << set Font Style( "Bold" );
jackztb << Set Font Size( 12 );
jackztb << Set Wrap( 1000 );
jackztb << journal;

studrtb = Text Box( Concat( "Between Group Outliers are aboslute value of Externally Studentized Residuals greater than ", Char( studoutlierlimitnum ) ) );
studrtb << Font Color( 19 ) << set Font Style( "Bold" );
studrtb << Set Font Size( 12 );
studrtb << Set Wrap( 1000 );
studrtb << journal;
);

If( platetotal == "2" & SN3 != "", 

//Page break
	pagebreaker = New Window( "     Nothing Really",
		V List Box( String Col Box( "", {spacer} ), String Col Box( "", {spacer} ), Page Break Box(), )
	);
	pagebreaker << journal << close window;



,
	Empty()
);

dttextsum2 << clear row states;
dttextsum2 << select where( :Group == sn3 );

If( SN3 == "" | SN3 == rstandard,
	Empty(), 

//Header for the third sample
	ts3data = New Window( "     Data Display",
		V List Box(
			H List Box( String Col Box( "", {liner} ) ),
			String Col Box( "", {spacer} ),
			H List Box(
				ts3dataname = Text Box( Concat( SN3, " ", "Sample Data" ) ), 
				//String Col Box("", {spacer}),
			)
		),
		V List Box( H List Box( String Col Box( "", {liner} ) ) ), 

	);
	ts3dataname << Set Font Size( 16 );
	ts3dataname << Font Color( 19 ) << set Font Style( "Bold" ) << set wrap( 2000 );
	ts3data << journal << close window;
	dttextsum2 << Journal; 

//Add Limits of Outlier Detections to report below table
jackztb = Text Box( Concat( "Outliers detected in Outlier Within Group column are Jackknife z greater than ", Char( outlierlimitnum ),
" and RLU outside of 95% analytical error" ) );
jackztb << Font Color( 19 ) << set Font Style( "Bold" );
jackztb << Set Font Size( 12 );
jackztb << Set Wrap( 1000 );
jackztb << journal;

studrtb = Text Box( Concat( "Between Group Outliers are aboslute value of Externally Studentized Residuals greater than ", Char( studoutlierlimitnum ) ) );
studrtb << Font Color( 19 ) << set Font Style( "Bold" );
studrtb << Set Font Size( 12 );
studrtb << Set Wrap( 1000 );
studrtb << journal;
);
//


If( platetotal == "3" & SN5 != "", 

//Page break
	pagebreaker = New Window( "     Nothing Really",
		V List Box( String Col Box( "", {spacer} ), String Col Box( "", {spacer} ), Page Break Box(), )
	);
	pagebreaker << journal << close window;



,
	Empty();

);

If( sn4 == "" | sn4 == rstandard,
	Empty(),
	dttextsum2 << clear row states;
	dttextsum2 << select where( :Group == sn4 );

//Header for the fourth sample
	ts4data = New Window( "     Data Display",
		V List Box(
			H List Box( String Col Box( "", {liner} ) ),
			String Col Box( "", {spacer} ),
			H List Box(
				ts4dataname = Text Box( Concat( SN4, " ", "Sample Data" ) ), 
				//String Col Box("", {spacer}),
			)
		),
		V List Box( H List Box( String Col Box( "", {liner} ) ) ), 

	);
	ts4dataname << Set Font Size( 16 );
	ts4dataname << Font Color( 19 ) << set Font Style( "Bold" ) << set wrap( 2000 );
	ts4data << journal << close window;
	dttextsum2 << Journal; 

//Add Limits of Outlier Detections to report below table
jackztb = Text Box( Concat( "Outliers detected in Outlier Within Group column are Jackknife z greater than ", Char( outlierlimitnum ),
" and RLU outside of 95% analytical error" ) );
jackztb << Font Color( 19 ) << set Font Style( "Bold" );
jackztb << Set Font Size( 12 );
jackztb << Set Wrap( 1000 );
jackztb << journal;

studrtb = Text Box( Concat( "Between Group Outliers are aboslute value of Externally Studentized Residuals greater than ", Char( studoutlierlimitnum ) ) );
studrtb << Font Color( 19 ) << set Font Style( "Bold" );
studrtb << Set Font Size( 12 );
studrtb << Set Wrap( 1000 );
studrtb << journal;
);
//


If( platetotal == "4" & SN5 != "", 

//Page break
	pagebreaker = New Window( "     Nothing Really",
		V List Box( String Col Box( "", {spacer} ), String Col Box( "", {spacer} ), Page Break Box(), )
	);
	pagebreaker << journal << close window;



,
	Empty();

);

If( sn5 == "" | sn5 == rstandard, 

	Empty()
, 

	dttextsum2 << clear row states;
	dttextsum2 << select where( :Group == sn5 );

//Header for the fifth sample
	ts5data = New Window( "     Data Display",
		V List Box(
			H List Box( String Col Box( "", {liner} ) ),
			String Col Box( "", {spacer} ),
			H List Box(
				ts5dataname = Text Box( Concat( SN5, " ", "Sample Data" ) ), 
				//String Col Box("", {spacer}),
			)
		),
		V List Box( H List Box( String Col Box( "", {liner} ) ) ), 

	);
	ts5dataname << Set Font Size( 16 );
	ts5dataname << Font Color( 19 ) << set Font Style( "Bold" ) << set wrap( 2000 );
	ts5data << journal << close window;
	dttextsum2 << Journal; 

//Add Limits of Outlier Detections to report below table
jackztb = Text Box( Concat( "Outliers detected in Outlier Within Group column are Jackknife z greater than ", Char( outlierlimitnum ),
" and RLU outside of 95% analytical error" ) );
jackztb << Font Color( 19 ) << set Font Style( "Bold" );
jackztb << Set Font Size( 12 );
jackztb << Set Wrap( 1000 );
jackztb << journal;

studrtb = Text Box( Concat( "Between Group Outliers are aboslute value of Externally Studentized Residuals greater than ", Char( studoutlierlimitnum ) ) );
studrtb << Font Color( 19 ) << set Font Style( "Bold" );
studrtb << Set Font Size( 12 );
studrtb << Set Wrap( 1000 );
studrtb << journal;
);

If( sn6 == "" | sn6 == rstandard, 

	Empty()
, 

	dttextsum2 << clear row states;
	dttextsum2 << select where( :Group == sn6 );

//Header for the fifth sample
	ts5data = New Window( "     Data Display",
		V List Box(
			H List Box( String Col Box( "", {liner} ) ),
			String Col Box( "", {spacer} ),
			H List Box(
				ts5dataname = Text Box( Concat( SN6, " ", "Sample Data" ) ), 
				//String Col Box("", {spacer}),
			)
		),
		V List Box( H List Box( String Col Box( "", {liner} ) ) ), 

	);
	ts5dataname << Set Font Size( 16 );
	ts5dataname << Font Color( 19 ) << set Font Style( "Bold" ) << set wrap( 2000 );
	ts5data << journal << close window;
	dttextsum2 << Journal; 

//Add Limits of Outlier Detections to report below table
jackztb = Text Box( Concat( "Outliers detected in Outlier Within Group column are Jackknife z greater than ", Char( outlierlimitnum ),
" and RLU outside of 95% analytical error" ) );
jackztb << Font Color( 19 ) << set Font Style( "Bold" );
jackztb << Set Font Size( 12 );
jackztb << Set Wrap( 1000 );
jackztb << journal;

studrtb = Text Box( Concat( "Between Group Outliers are aboslute value of Externally Studentized Residuals greater than ", Char( studoutlierlimitnum ) ) );
studrtb << Font Color( 19 ) << set Font Style( "Bold" );
studrtb << Set Font Size( 12 );
studrtb << Set Wrap( 1000 );
studrtb << journal;
);

//make the list of test articles removing the standard based on how many total samples are recorded on the first tab of the materials template
If( SN1 != "" & SN2 != "" & SN3 != "" & SN4 != "" & SN5 != ""&SN6!="" , 


//make the list of the test samples if there are 5 samples and the reference standard
	snames = List();
	snames[1] = SN1;
	snames[2] = SN2;
	snames[3] = SN3;
	snames[4] = SN4;
	snames[5] = SN5;
	snames[6] = SN6;

//create variables for the final materials list
	samplenames = List();


//Make the  final list of test articles and standard (if applicable)
	For( i = 1, i <= 6, i++,
		If( Eval( snames[i] ) == "",
			a = 1 + 2,
			samplenames[i] = Eval( snames[i] )
		)
	);


//Make the final list of test articles excluding the standard group (if applicable)
	delcols = List();
	delcols[1] = rstandard;

	For( i = 1, i <= N Items( samplenames ), i++,
		Remove From( samplenames, As List( Loc( samplenames, delcols[1] ) ) )
	);

,
If( SN1 != "" & SN2 != "" & SN3 != "" & SN4 != "" & SN5 != "" , 


//make the list of the test samples if there are 5 samples and the reference standard
	snames = List();
	snames[1] = SN1;
	snames[2] = SN2;
	snames[3] = SN3;
	snames[4] = SN4;
	snames[5] = SN5;

//create variables for the final materials list
	samplenames = List();


//Make the  final list of test articles and standard (if applicable)
	For( i = 1, i <= 5, i++,
		If( Eval( snames[i] ) == "",
			a = 1 + 2,
			samplenames[i] = Eval( snames[i] )
		)
	);


//Make the final list of test articles excluding the standard group (if applicable)
	delcols = List();
	delcols[1] = rstandard;

	For( i = 1, i <= N Items( samplenames ), i++,
		Remove From( samplenames, As List( Loc( samplenames, delcols[1] ) ) )
	);
, 

	If( SN1 != "" & SN2 != "" & SN3 != "" & SN4 != "" & SN5 != "" , 

//make the list of the test samples if there are 4 samples and the reference standard
		snames = List();
		snames[1] = SN1;
		snames[2] = SN2;
		snames[3] = SN3;
		snames[4] = SN4;
		snames[5] = SN5;


//create variables for the final materials list
		samplenames = List();


//Make the  final list of test articles and standard (if applicable)
		For( i = 1, i <= 5, i++,
			If( Eval( snames[i] ) == "",
				a = 1 + 2,
				samplenames[i] = Eval( snames[i] )
			)
		);


//Make the final list of test articles excluding the standard group (if applicable)
		delcols = List();
		delcols[1] = rstandard;

		For( i = 1, i <= N Items( samplenames ), i++,
			Remove From( samplenames, As List( Loc( samplenames, delcols[1] ) ) )
		);
	, 

		If( SN1 != "" & SN2 != "" & SN3 != "" & SN4 != "" & SN5 == "" , 

//make the list of the test samples if there are 3 samples and the reference standard
			snames = List();
			snames[1] = SN1;
			snames[2] = SN2;
			snames[3] = SN3;
			snames[4] = SN4;


//create variables for the final materials list
			samplenames = List();


//Make the  final list of test articles and standard (if applicable)
			For( i = 1, i <= 4, i++,
				If( Eval( snames[i] ) == "",
					a = 1 + 2,
					samplenames[i] = Eval( snames[i] )
				)
			);


//Make the final list of test articles excluding the standard group (if applicable)
			delcols = List();
			delcols[1] = rstandard;

			For( i = 1, i <= N Items( samplenames ), i++,
				Remove From( samplenames, As List( Loc( samplenames, delcols[1] ) ) )
			);
		, 

			If( SN1 != "" & SN2 != "" & SN3 != "" & SN4 == "" & SN5 == "" , 

//make the list of the test samples if there are 2 samples and the reference standard
				snames = List();
				snames[1] = SN1;
				snames[2] = SN2;
				snames[3] = SN3;


//create variables for the final materials list
				samplenames = List();


//Make the  final list of test articles and standard (if applicable)
				For( i = 1, i <= 3, i++,
					If( Eval( snames[i] ) == "",
						a = 1 + 2,
						samplenames[i] = Eval( snames[i] )
					)
				);


//Make the final list of test articles excluding the standard group (if applicable)
				delcols = List();
				delcols[1] = rstandard;

				For( i = 1, i <= N Items( samplenames ), i++,
					Remove From( samplenames, As List( Loc( samplenames, delcols[1] ) ) )
				);

			, 

				If( SN1 != "" & SN2 != "" & SN3 == "" & SN4 == "" & SN5 == "" , 

//make the list of the test samples if there is 1 sample and the reference standard
					snames = List();
					snames[1] = SN1;
					snames[2] = SN2;


//create variables for the final materials list
					samplenames = List();


//Make the  final list of test articles and standard (if applicable)
					For( i = 1, i <= 2, i++,
						If( Eval( snames[i] ) == "",
							a = 1 + 2,
							samplenames[i] = Eval( snames[i] )
						)
					);


//Make the final list of test articles excluding the standard group (if applicable)
					delcols = List();
					delcols[1] = rstandard;

					For( i = 1, i <= N Items( samplenames ), i++,
						Remove From( samplenames, As List( Loc( samplenames, delcols[1] ) ) )
					);

				, 

					Empty();
					
					)

				)
			)
		)
	)
);
 
 //Record the number of samples for the loop
samplenum = N Items( samplenames );

//Get max and min MOI value for masking
Current Data Table( dttextsum2 );
moinumbers = :Name ("MOI (Vg/cell)") << get as matrix;
maxmoi = Max( moinumbers );
minmoi = Min( moinumbers );

//Begin For loop for each sample
For( j = 1, j <= samplenum, j++, 

//Determine Max Min Values for the Y axis for Graphs
	dtsub = dttextsum2 << select where( :Group == rstandard | :Group == samplenames[j] ) <<
	subset( invisible );
	dtminmax = dtsub << Summary(
		Min( :Name( "Log10 Vg/mL" ) ),
		Max( :Name( "Log10 Vg/mL" ) ),
		Freq( "None" ),
		Weight( "None" )
	);
	graphmin = :Name( "Min(Log10 Vg/mL)" ) << get values;
	graphmin = graphmin[1];
	graphmax = :Name( "Max (Log10 Vg/mL)" ) << get values;
	graphmax = graphmax[1];
	Close( dtminmax, no save );
	Close( dtsub, no save );

	Current Data Table( dttextsum2 );
	dttextsum2 << clear row states;
	
//page break
if(j==4&totalrownumbers==192,
		pagebreaker = New Window( "     Nothing Really",
			V List Box( String Col Box( "", {spacer} ), String Col Box( "", {spacer} ), Page Break Box(), )
		);
		pagebreaker << journal << close window;
,
empty();

);

//Summary Table CV and n sample size check
	sumstatreport = New Window( "     Data Display",
		V List Box(
			H List Box( String Col Box( "", {liner} ) ),
			String Col Box( "", {spacer} ),
			H List Box(
				sumstat = Text Box( Concat( "Summary Statistics ", samplenames[j] ) ), 
				//String Col Box("", {spacer}),
			)
		),
		V List Box( H List Box( String Col Box( "", {liner} ) ) ), 

	);
	sumstat << Set Font Size( 16 );
	sumstat << Font Color( 19 ) << set Font Style( "Bold" ) << set wrap( 2000 );
	sumstatreport << journal << close window;
	dttextsum2 << clear row states;
	dttextsum2 << select where( :Outlier Within Group == "Outlier" ) << exclude;
	dttextsum2 << select where( :Outlier Between Group == "Outlier" ) << exclude;
	dttextsum2 << select where( Is Missing( :Group ) ) << exclude << hide;
	dttextsum2 << select where( :Name( "Group" ) == rstandard | :Name( "Group" ) == samplenames[j] ) <<
	invert row selection << exclude << Hide;
	:Name( "MOI (Vg/cell)" ) << set modeling type( "Continuous" );
	dtsummary = dttextsum2 << Summary(
		Group( :Name( "MOI (Vg/cell)" ), :Group ),
		Mean( :Name( "Vg/mL" ) ),
		Std Dev( :Name( "Vg/mL" ) ),
		CV( :Name( "Vg/mL" ) ),
		Freq( "None" ),
		Weight( "None" ),
		Link to original data table( 0 )
	);

	dtsummary << Sort( Replace table, By( :Group ), Order( Ascending ) );
	:Name( "Mean(Vg/mL)" ) << Format( "Fixed Dec", 7, 3 );
	:Name( "Std Dev(Vg/mL)" ) << Format( "Fixed Dec", 7, 3 );
	:Name( "CV(Vg/mL)" ) << Format( "Fixed Dec", 7, 1 );
	dtsummary<<select where(:N Rows ==0)<<delete rows;
	
	dtsummary=current data table();
	dtsummary << New Column( "CV Check",
		character,
		formula( If( :Name( "CV(Vg/mL)" ) <= CVlimit, "FIO", "FIO - Alert" ) ),
	);
	dtsummary << New Column( "Sample Size Check",
		character,
		formula( If( :N Rows >= ndoselimit, "Pass", "Fail" ) ),
		Set Property( "Value Colors", {"" = 2, "Pass" = -15400938, "Fail" = -16768477} ),
		Color Cell by Value(1),

	);
	cvchecker = :CV Check << get values;
	samplesizechecker = :Sample Size Check << get values;
	
	//Curve Depth Calculation
	dtsummary << New Column( "Curve Depth Max Min",
		continuous,
		formula(
			If(
				:Group == rstandard & :Name( "MOI (Vg/cell)" ) == minmoi | :Group == rstandard & :Name( "MOI (Vg/cell)" ) ==
				maxmoi,
				:Name( "Mean(Vg/mL)" ),
				Empty()
			)
		)
	);


	dtsummary << New Column( "Curve Depth",
		continuous,
		formula( Col Maximum( :Curve Depth Max Min ) - Col Minimum( :Curve Depth Max Min ) )
	);
	curvedepthstd = :Curve Depth << get values;
	cuvedepthstd = curvedepthstd[1];

	dtsummary << select where( :Group == rstandard ) << move rows( at start );
	dtsummary << clear select;
	dtsummary << New Column( "Standard Curve Depth",
		continuous,
		Format( "Fixed", 7, 2 ),
		formula( If( Row() == 1, Round( cuvedepthstd, 2 ) ) )
	);
	refcurvedepth = :Standard Curve Depth << Get Values;
	refcurvedepth = cuvedepthstd;
	dtsampcheck = dtsummary << select where( :Group == rstandard | :Group == samplenames[j] ) <<
	subset( invisible );
	Current Data Table( dtsampcheck ); 
	minngroup = :Name( "N Rows" ) << Get Values;
	minngroup = Minimum( minngroup );
	maxcvgroup = :Name( "CV(Vg/mL)" ) << get values;
	maxcvgroup = Maximum( maxcvgroup );
	Close( dtsampcheck, no save );
	Current Data Table( dtsummary );
	dtsummary << invert row selection;
	dtsummary << New Column( "Curve Depth Test",
		Character,
		"Nominal",
		Formula(
			If( :Standard Curve Depth >= curvedepthlimit,
				"Pass",
				"Fail"
			)
		),
		Set Property(
			"Value Colors",
			{"" = 2, "Pass" = -15400938, "Fail" = -16768477}
		),
		Color Cell by Value(1), 

	);
	curvedepthcheckers = :Curve Depth Test << get values;
	curvedepthcheck = curvedepthcheckers[1];
	:Curve Depth Max Min << hide;
	:Curve Depth << hide;
	:Name("CV(Vg/mL)")<<set name ("CV(%)");
	dtsummary << invert row selection;
	dtsummary << journal;
	Close( dtsummary, no save );

//Add Limits of CV, Sample Size, and Curve Depth to report below table
	cvtb = Text Box(
		Concat( "Coefficient of Variation Alert Limit (≤): ", Char( CVlimit ) )
	);
	cvtb << Font Color( 19 ) << set Font Style( "Bold" );
	cvtb << Set Wrap( 1000 );
	cvtb << Set Font Size( 12 );
	cvtb << journal;

	ssizetb = Text Box( Concat( "Minimum Sample Size (≥): ", Char( ndoselimit ) ) );
	ssizetb << Font Color( 19 ) << set Font Style( "Bold" );
	ssizetb << Set Font Size( 12 );
	ssizetb << Set Wrap( 1000 );
	ssizetb << journal;

	curdtb = Text Box( Concat( "Curve Depth Limit (≥): ", Char( Format(curvedepthlimit, "Scientific", 12, 1 ) ) ) ) ;
	curdtb << Font Color( 19 ) << set Font Style( "Bold" );
	curdtb << Set Font Size( 12 );
	curdtb << Set Wrap( 1000 );
	curdtb << journal;

//Best Linear Model Selection that meets all Validity Criteria
	//1)	All data
	//2)	Both low doses excluded
	//3)	Both high doses excluded
	//4)	STD low dose excluded
	//5)	STD high dose excluded
	//6)	Test low dose excluded
	//7)	Test high dose excluded
	//8)	STD low dose and test high dose excluded
	//9)	STD high dose and test low dose excluded

	//Model 1)All data
	dttextsum2 << clear row states;
	dttextsum2 << select where( :Outlier Within Group == "Outlier" ) << exclude;
	dttextsum2 << select where( :Outlier Between Group == "Outlier" ) << exclude;
	dttextsum2 << select where( :Group == rstandard | :Group == samplenames[j] ) << invert row selection <<
	exclude << Hide;
	dttextsum2 << select all rows;
	dttextsum2 << invert row selection;
	model1 = Fit Curve(
	Y( :Name( "Log10 Vg/mL" ) ),
	X( :Name( "Log 10 MOI (Vg/cell)" )),
	Group( :Group),
	Fit Linear(
		Equivalence Test(
			Reference Group(rstandard), 
			Equivalence with Ratios(
				1,
				Set Decision Lines( 0.5, 1.5 ),
				Show Summary Report( 1 )
				)
			)
		)
	);
	model1r = model1 << report;
	model1rootmean = model1r["Model Comparison"][columnbox( "RMSE" )] << getasmatrix;
	model1rsquare = model1r["Model Comparison"][columnbox( "R-Square" )] << getasmatrix;
	model1r2 = model1rsquare[1];
	model1rmse = model1rootmean[1];
	
	//slope ratio value
	model1ratio = model1r["Equivalence Summary"][columnbox( "Ratio")]<< get as matrix;
	model1sloperatio = model1ratio[2];
	
	//slope ratio lower limit 
	model1ratiolower = model1r["Equivalence Summary"][columnbox( "Lower Confidence Limit")]<< get as matrix;
	model1sloperatiolower = model1ratiolower[2];

	//slope ratio upper limit 
	model1ratioupper = model1r["Equivalence Summary"][columnbox( "Upper Confidence Limit")]<< get as matrix;
	model1sloperatioupper = model1ratioupper[2];
	
	
	model1r << close window;


		//model 1 quad and linearity ratio
		model1 =Fit Model(
		Y(:Name( "Log10 Vg/mL" ) ),
		Effects(
			:Group,
			:Name( "Log 10 MOI (Vg/cell)" ),
			:Group* :Name( "Log 10 MOI (Vg/cell)" ),
			:Name( "Log 10 MOI (Vg/cell)" ) * :Name( "Log 10 MOI (Vg/cell)" )
		),
		Personality( "Standard Least Squares" ),
		Emphasis( "Effect Leverage" ),
		Run(
			Profiler(
				1,
				Confidence Intervals( 1 ),
				Term Value(
					Concentration( 2.5, Lock( 0 ), Show( 1 ) ),
					Group( "Std", Lock( 0 ), Show( 1 ) )
				)
			),
			:Name("Log10 Vg/mL")<< {Summary of Fit( 1 ), Analysis of Variance( 1 ),
			Parameter Estimates( 1 ), Lack of Fit( 0 ), Scaled Estimates( 1 ),
			Plot Actual by Predicted( 1 ), Plot Residual by Predicted( 0 ),
			Plot Residual by Row( 1 ), Plot Studentized Residuals( 0 ),
			Plot Effect Leverage( 1 ), Plot Residual by Normal Quantiles( 0 ),
			Box Cox Y Transformation( 0 ), Show All Confidence Intervals( 1 ),
			Show VIF( 1 )}
			)
		);
		model1r = model1 << report;
		model1quadss = model1r["Scaled Estimates"][columnbox( "Scaled Estimate" )] << getasmatrix;
		model1conc = model1quadss[4];
		model1quad = model1quadss[7];
		model1quadp = Round( abs(Abs( model1quad * 1 ) / (model1conc * 2)) * 100, 3 );//Linearity Ratio Formula
		model1r << close window;

//Model 2 Both Low Doses Excluded
	dttextsum2 << clear row states;
	dttextsum2 << select where( :Outlier Within Group == "Outlier" ) << exclude;
	dttextsum2 << select where( :Outlier Between Group == "Outlier" ) << exclude;
	dttextsum2 << select where( :Group == rstandard | :Group == samplenames[j] ) << invert row selection <<
	exclude << Hide;
	dttextsum2 << select where( :Name( "MOI (Vg/cell)" ) == minmoi ) << exclude;
	dttextsum2 << select all rows;
	dttextsum2 << invert row selection;
		model2 = Fit Curve(
	Y( :Name( "Log10 Vg/mL" ) ),
	X( :Name( "Log 10 MOI (Vg/cell)" )),
	Group( :Group),
	Fit Linear(
		Equivalence Test(
			Reference Group(rstandard), 
			Equivalence with Ratios(
				1,
				Set Decision Lines( 0.5, 1.5 ),
				Show Summary Report( 1 )
				)
			)
		)
	);
	model2r = model2 << report;
	model2rootmean = model2r["Model Comparison"][columnbox( "RMSE" )] << getasmatrix;
	model2rsquare = model2r["Model Comparison"][columnbox( "R-Square" )] << getasmatrix;
	model2r2 = model2rsquare[1];
	model2rmse = model2rootmean[1];
	
	//slope ratio value
	model2ratio = model2r["Equivalence Summary"][columnbox( "Ratio")]<< get as matrix;
	model2sloperatio = model2ratio[2];
	
	//slope ratio lower limit 
	model2ratiolower = model2r["Equivalence Summary"][columnbox( "Lower Confidence Limit")]<< get as matrix;
	model2sloperatiolower = model2ratiolower[2];

	//slope ratio upper limit 
	model2ratioupper = model2r["Equivalence Summary"][columnbox( "Upper Confidence Limit")]<< get as matrix;
	model2sloperatioupper = model2ratioupper[2];
	
	
	model2r << close window;


		//model 2 quad and linearity ratio
		model2 =Fit Model(
		Y(:Name( "Log10 Vg/mL" ) ),
		Effects(
			:Group,
			:Name( "Log 10 MOI (Vg/cell)" ),
			:Group* :Name( "Log 10 MOI (Vg/cell)" ),
			:Name( "Log 10 MOI (Vg/cell)" ) * :Name( "Log 10 MOI (Vg/cell)" )
		),
		Personality( "Standard Least Squares" ),
		Emphasis( "Effect Leverage" ),
		Run(
			Profiler(
				1,
				Confidence Intervals( 1 ),
				Term Value(
					Concentration( 2.5, Lock( 0 ), Show( 1 ) ),
					Group( "Std", Lock( 0 ), Show( 1 ) )
				)
			),
			:Name("Log10 Vg/mL")<< {Summary of Fit( 1 ), Analysis of Variance( 1 ),
			Parameter Estimates( 1 ), Lack of Fit( 0 ), Scaled Estimates( 1 ),
			Plot Actual by Predicted( 1 ), Plot Residual by Predicted( 0 ),
			Plot Residual by Row( 1 ), Plot Studentized Residuals( 0 ),
			Plot Effect Leverage( 1 ), Plot Residual by Normal Quantiles( 0 ),
			Box Cox Y Transformation( 0 ), Show All Confidence Intervals( 1 ),
			Show VIF( 1 )}
			)
		);
		model2r = model2 << report;
		model2quadss = model2r["Scaled Estimates"][columnbox( "Scaled Estimate" )] << getasmatrix;
		model2conc = model2quadss[4];
		model2quad = model2quadss[7];
		model2quadp = Round( abs(Abs( model2quad * 1 ) / (model2conc * 2)) * 100, 3 );//Linearity Ratio Formula
		model2r << close window;


//Model 3 Both High Doses Excluded
	dttextsum2 << clear row states;
	dttextsum2 << select where( :Outlier Within Group == "Outlier" ) << exclude;
	dttextsum2 << select where( :Outlier Between Group == "Outlier" ) << exclude;
	dttextsum2 << select where( :Group == rstandard | :Group == samplenames[j] ) << invert row selection <<
	exclude << Hide;
	dttextsum2 << select where( :Name( "MOI (Vg/cell)" ) == maxmoi ) << exclude;
	dttextsum2 << select all rows;
	dttextsum2 << invert row selection;

	model3 = Fit Curve(
	Y( :Name( "Log10 Vg/mL" ) ),
	X( :Name( "Log 10 MOI (Vg/cell)" )),
	Group( :Group),
	Fit Linear(
		Equivalence Test(
			Reference Group(rstandard), 
			Equivalence with Ratios(
				1,
				Set Decision Lines( 0.5, 1.5 ),
				Show Summary Report( 1 )
				)
			)
		)
	);
	model3r = model3 << report;
	model3rootmean = model3r["Model Comparison"][columnbox( "RMSE" )] << getasmatrix;
	model3rsquare = model3r["Model Comparison"][columnbox( "R-Square" )] << getasmatrix;
	model3r2 = model3rsquare[1];
	model3rmse = model3rootmean[1];

	//slope ratio value
	model3ratio = model3r["Equivalence Summary"][columnbox( "Ratio")]<< get as matrix;
	model3sloperatio = model3ratio[2];
	
	//slope ratio lower limit 
	model3ratiolower = model3r["Equivalence Summary"][columnbox( "Lower Confidence Limit")]<< get as matrix;
	model3sloperatiolower = model3ratiolower[2];

	//slope ratio upper limit 
	model3ratioupper = model3r["Equivalence Summary"][columnbox( "Upper Confidence Limit")]<< get as matrix;
	model3sloperatioupper = model3ratioupper[2];
	
	model3r << close window;
	
		//model 3 quad and linearity ratio
		model3 =Fit Model(
		Y(:Name( "Log10 Vg/mL" ) ),
		Effects(
			:Group,
			:Name( "Log 10 MOI (Vg/cell)" ),
			:Group* :Name( "Log 10 MOI (Vg/cell)" ),
			:Name( "Log 10 MOI (Vg/cell)" ) * :Name( "Log 10 MOI (Vg/cell)" )
		),
		Personality( "Standard Least Squares" ),
		Emphasis( "Effect Leverage" ),
		Run(
			Profiler(
				1,
				Confidence Intervals( 1 ),
				Term Value(
					Concentration( 2.5, Lock( 0 ), Show( 1 ) ),
					Group( "Std", Lock( 0 ), Show( 1 ) )
				)
			),
			:Name("Log10 Vg/mL")<< {Summary of Fit( 1 ), Analysis of Variance( 1 ),
			Parameter Estimates( 1 ), Lack of Fit( 0 ), Scaled Estimates( 1 ),
			Plot Actual by Predicted( 1 ), Plot Residual by Predicted( 0 ),
			Plot Residual by Row( 1 ), Plot Studentized Residuals( 0 ),
			Plot Effect Leverage( 1 ), Plot Residual by Normal Quantiles( 0 ),
			Box Cox Y Transformation( 0 ), Show All Confidence Intervals( 1 ),
			Show VIF( 1 )}
			)
		);
		model3r = model3 << report;
		model3quadss = model3r["Scaled Estimates"][columnbox( "Scaled Estimate" )] << getasmatrix;
		model3conc = model3quadss[4];
		model3quad = model3quadss[7];
		model3quadp = Round( abs(Abs( model3quad * 1 ) / (model3conc * 2)) * 100, 3 );//Linearity Ratio Formula
		model3r << close window;


//Model 4)	STD Low Dose Excluded
	dttextsum2 << clear row states;
	dttextsum2 << select where( :Outlier Within Group == "Outlier" ) << exclude;
	dttextsum2 << select where( :Outlier Between Group == "Outlier" ) << exclude;
	dttextsum2 << select where( :Group == rstandard | :Group == samplenames[j] ) << invert row selection <<
	exclude << Hide;
	dttextsum2 << select where( :Group == rstandard & :Name( "MOI (Vg/cell)" ) == minmoi ) << exclude;
	dttextsum2 << select all rows;
	dttextsum2 << invert row selection;

	model4 = Fit Curve(
	Y( :Name( "Log10 Vg/mL" ) ),
	X( :Name( "Log 10 MOI (Vg/cell)" )),
	Group( :Group),
	Fit Linear(
		Equivalence Test(
			Reference Group(rstandard), 
			Equivalence with Ratios(
				1,
				Set Decision Lines( 0.5, 1.5 ),
				Show Summary Report( 1 )
				)
			)
		)
	);
	model4r = model4 << report;
	model4rootmean = model4r["Model Comparison"][columnbox( "RMSE" )] << getasmatrix;
	model4rsquare = model4r["Model Comparison"][columnbox( "R-Square" )] << getasmatrix;
	model4r2 = model4rsquare[1];
	model4rmse = model4rootmean[1];

	//slope ratio value
	model4ratio = model4r["Equivalence Summary"][columnbox( "Ratio")]<< get as matrix;
	model4sloperatio = model4ratio[2];
	
	//slope ratio lower limit 
	model4ratiolower = model4r["Equivalence Summary"][columnbox( "Lower Confidence Limit")]<< get as matrix;
	model4sloperatiolower = model4ratiolower[2];

	//slope ratio upper limit 
	model4ratioupper = model4r["Equivalence Summary"][columnbox( "Upper Confidence Limit")]<< get as matrix;
	model4sloperatioupper = model4ratioupper[2];
	
	model4r << close window;

		//model 4 quad and linearity ratio
		model4 =Fit Model(
		Y(:Name( "Log10 Vg/mL" ) ),
		Effects(
			:Group,
			:Name( "Log 10 MOI (Vg/cell)" ),
			:Group* :Name( "Log 10 MOI (Vg/cell)" ),
			:Name( "Log 10 MOI (Vg/cell)" ) * :Name( "Log 10 MOI (Vg/cell)" )
		),
		Personality( "Standard Least Squares" ),
		Emphasis( "Effect Leverage" ),
		Run(
			Profiler(
				1,
				Confidence Intervals( 1 ),
				Term Value(
					Concentration( 2.5, Lock( 0 ), Show( 1 ) ),
					Group("Std", Lock( 0 ), Show( 1 ) )
				)
			),
			:Name("Log10 Vg/mL")<< {Summary of Fit( 1 ), Analysis of Variance( 1 ),
			Parameter Estimates( 1 ), Lack of Fit( 0 ), Scaled Estimates( 1 ),
			Plot Actual by Predicted( 1 ), Plot Residual by Predicted( 0 ),
			Plot Residual by Row( 1 ), Plot Studentized Residuals( 0 ),
			Plot Effect Leverage( 1 ), Plot Residual by Normal Quantiles( 0 ),
			Box Cox Y Transformation( 0 ), Show All Confidence Intervals( 1 ),
			Show VIF( 1 )}
			)
		);
		model4r = model4 << report;
		model4quadss = model4r["Scaled Estimates"][columnbox( "Scaled Estimate" )] << getasmatrix;
		model4conc = model4quadss[4];
		model4quad = model4quadss[7];
		model4quadp = Round( abs(Abs( model4quad * 1 ) / (model4conc * 2)) * 100, 3 );//Linearity Ratio Formula
		model4r << close window;
	
//Model 5) STD High Dose Excluded
	dttextsum2 << clear row states;
	dttextsum2 << select where( :Outlier Within Group == "Outlier" ) << exclude;
	dttextsum2 << select where( :Outlier Between Group == "Outlier" ) << exclude;
	dttextsum2 << select where( :Group == rstandard | :Group == samplenames[j] ) << invert row selection <<
	exclude << Hide;
	dttextsum2 << select where( :Group == rstandard & :Name( "MOI (Vg/cell)" ) == maxmoi ) << exclude;
	dttextsum2 << select all rows;
	dttextsum2 << invert row selection;

	model5 = Fit Curve(
	Y( :Name( "Log10 Vg/mL" ) ),
	X(:Name( "Log 10 MOI (Vg/cell)" )),
	Group( :Group),
	Fit Linear(
		Equivalence Test(
			Reference Group(rstandard), 
			Equivalence with Ratios(
				1,
				Set Decision Lines( 0.5, 1.5 ),
				Show Summary Report( 1 )
				)
			)
		)
	);
	model5r = model5 << report;
	model5rootmean = model5r["Model Comparison"][columnbox( "RMSE" )] << getasmatrix;
	model5rsquare = model5r["Model Comparison"][columnbox( "R-Square" )] << getasmatrix;
	model5r2 = model5rsquare[1];
	model5rmse = model5rootmean[1];

	//slope ratio value
	model5ratio = model5r["Equivalence Summary"][columnbox( "Ratio")]<< get as matrix;
	model5sloperatio = model5ratio[2];
	
	//slope ratio lower limit 
	model5ratiolower = model5r["Equivalence Summary"][columnbox( "Lower Confidence Limit")]<< get as matrix;
	model5sloperatiolower = model5ratiolower[2];

	//slope ratio upper limit 
	model5ratioupper = model5r["Equivalence Summary"][columnbox( "Upper Confidence Limit")]<< get as matrix;
	model5sloperatioupper = model5ratioupper[2];
	
	model5r << close window;
	
		//model 5 quad and linearity ratio
		model5 =Fit Model(
		Y(:Name( "Log10 Vg/mL" ) ),
		Effects(
			:Group,
			:Name( "Log 10 MOI (Vg/cell)" ),
			:Group* :Name( "Log 10 MOI (Vg/cell)" ),
			:Name( "Log 10 MOI (Vg/cell)" ) * :Name( "Log 10 MOI (Vg/cell)" )
		),
		Personality( "Standard Least Squares" ),
		Emphasis( "Effect Leverage" ),
		Run(
			Profiler(
				1,
				Confidence Intervals( 1 ),
				Term Value(
					Concentration( 2.5, Lock( 0 ), Show( 1 ) ),
					Group( "Std", Lock( 0 ), Show( 1 ) )
				)
			),
			:Name("Log10 Vg/mL")<< {Summary of Fit( 1 ), Analysis of Variance( 1 ),
			Parameter Estimates( 1 ), Lack of Fit( 0 ), Scaled Estimates( 1 ),
			Plot Actual by Predicted( 1 ), Plot Residual by Predicted( 0 ),
			Plot Residual by Row( 1 ), Plot Studentized Residuals( 0 ),
			Plot Effect Leverage( 1 ), Plot Residual by Normal Quantiles( 0 ),
			Box Cox Y Transformation( 0 ), Show All Confidence Intervals( 1 ),
			Show VIF( 1 )}
			)
		);
		model5r = model5 << report;
		model5quadss = model5r["Scaled Estimates"][columnbox( "Scaled Estimate" )] << getasmatrix;
		model5conc = model5quadss[4];
		model5quad = model5quadss[7];
		model5quadp = Round( abs(Abs( model5quad * 1 ) / (model5conc * 2)) * 100, 3 );//Linearity Ratio Formula
		model5r << close window;
	
//Model 6) Test Low Dose Excluded
	dttextsum2 << clear row states;
	dttextsum2 << select where( :Outlier Within Group == "Outlier" ) << exclude;
	dttextsum2 << select where( :Outlier Between Group == "Outlier" ) << exclude;
	dttextsum2 << select where( :Group == rstandard | :Group == samplenames[j] ) << invert row selection <<
	exclude << Hide;
	dttextsum2 << select where( :Group == samplenames[j] & :Name( "MOI (Vg/cell)" ) == minmoi ) << exclude;
	dttextsum2 << select all rows;
	dttextsum2 << invert row selection;

	model6 = Fit Curve(
	Y( :Name( "Log10 Vg/mL" ) ),
	X(:Name( "Log 10 MOI (Vg/cell)" )),
	Group( :Group),
	Fit Linear(
		Equivalence Test(
			Reference Group(rstandard), 
			Equivalence with Ratios(
				1,
				Set Decision Lines( 0.5, 1.5 ),
				Show Summary Report( 1 )
				)
			)
		)
	);
	model6r = model6 << report;
	model6rootmean = model6r["Model Comparison"][columnbox( "RMSE" )] << getasmatrix;
	model6rsquare = model6r["Model Comparison"][columnbox( "R-Square" )] << getasmatrix;
	model6r2 = model6rsquare[1];
	model6rmse = model6rootmean[1];

	//slope ratio value
	model6ratio = model6r["Equivalence Summary"][columnbox( "Ratio")]<< get as matrix;
	model6sloperatio = model6ratio[2];
	
	//slope ratio lower limit 
	model6ratiolower = model6r["Equivalence Summary"][columnbox( "Lower Confidence Limit")]<< get as matrix;
	model6sloperatiolower = model6ratiolower[2];

	//slope ratio upper limit 
	model6ratioupper = model6r["Equivalence Summary"][columnbox( "Upper Confidence Limit")]<< get as matrix;
	model6sloperatioupper = model6ratioupper[2];
	
	model6r << close window;
	
		//model 6 quad and linearity ratio
		model6 =Fit Model(
		Y(:Name( "Log10 Vg/mL" ) ),
		Effects(
			:Group,
			:Name( "Log 10 MOI (Vg/cell)" ),
			:Group* :Name( "Log 10 MOI (Vg/cell)" ),
			:Name( "Log 10 MOI (Vg/cell)" ) * :Name( "Log 10 MOI (Vg/cell)" )
		),
		Personality( "Standard Least Squares" ),
		Emphasis( "Effect Leverage" ),
		Run(
			Profiler(
				1,
				Confidence Intervals( 1 ),
				Term Value(
					Concentration( 2.5, Lock( 0 ), Show( 1 ) ),
					Group( "Std", Lock( 0 ), Show( 1 ) )
				)
			),
			:Name("Log10 Vg/mL")<< {Summary of Fit( 1 ), Analysis of Variance( 1 ),
			Parameter Estimates( 1 ), Lack of Fit( 0 ), Scaled Estimates( 1 ),
			Plot Actual by Predicted( 1 ), Plot Residual by Predicted( 0 ),
			Plot Residual by Row( 1 ), Plot Studentized Residuals( 0 ),
			Plot Effect Leverage( 1 ), Plot Residual by Normal Quantiles( 0 ),
			Box Cox Y Transformation( 0 ), Show All Confidence Intervals( 1 ),
			Show VIF( 1 )}
			)
		);
		model6r = model6 << report;
		model6quadss = model6r["Scaled Estimates"][columnbox( "Scaled Estimate" )] << getasmatrix;
		model6conc = model6quadss[4];
		model6quad = model6quadss[7];
		model6quadp = Round( abs(Abs( model6quad * 1 ) / (model6conc * 2)) * 100, 3 );//Linearity Ratio Formula
		model6r << close window;

	
//Model 7) Test High Dose Excluded
	dttextsum2 << clear row states;
	dttextsum2 << select where( :Outlier Within Group == "Outlier" ) << exclude;
	dttextsum2 << select where( :Outlier Between Group == "Outlier" ) << exclude;
	dttextsum2 << select where( :Group == rstandard | :Group == samplenames[j] ) << invert row selection <<
	exclude << Hide;
	dttextsum2 << select where( :Group == samplenames[j] & :Name( "MOI (Vg/cell)" ) == maxmoi ) << exclude;
	dttextsum2 << select all rows;
	dttextsum2 << invert row selection;

	model7 = Fit Curve(
	Y( :Name( "Log10 Vg/mL" ) ),
	X( :Name( "Log 10 MOI (Vg/cell)" )),
	Group( :Group),
	Fit Linear(
		Equivalence Test(
			Reference Group(rstandard ), 
			Equivalence with Ratios(
				1,
				Set Decision Lines( 0.5, 1.5 ),
				Show Summary Report( 1 )
				)
			)
		)
	);
	model7r = model7 << report;
	model7rootmean = model7r["Model Comparison"][columnbox( "RMSE" )] << getasmatrix;
	model7rsquare = model7r["Model Comparison"][columnbox( "R-Square" )] << getasmatrix;
	model7r2 = model7rsquare[1];
	model7rmse = model7rootmean[1];

	//slope ratio value
	model7ratio = model7r["Equivalence Summary"][columnbox( "Ratio")]<< get as matrix;
	model7sloperatio = model7ratio[2];
	
	//slope ratio lower limit 
	model7ratiolower = model7r["Equivalence Summary"][columnbox( "Lower Confidence Limit")]<< get as matrix;
	model7sloperatiolower = model7ratiolower[2];

	//slope ratio upper limit 
	model7ratioupper = model7r["Equivalence Summary"][columnbox( "Upper Confidence Limit")]<< get as matrix;
	model7sloperatioupper = model7ratioupper[2];
	
	model7r << close window;
	
		//model 7 quad and linearity ratio
		model7 =Fit Model(
		Y(:Name( "Log10 Vg/mL" ) ),
		Effects(
			:Group,
			:Name( "Log 10 MOI (Vg/cell)" ),
			:Group* :Name( "Log 10 MOI (Vg/cell)" ),
			:Name( "Log 10 MOI (Vg/cell)" ) * :Name( "Log 10 MOI (Vg/cell)" )
		),
		Personality( "Standard Least Squares" ),
		Emphasis( "Effect Leverage" ),
		Run(
			Profiler(
				1,
				Confidence Intervals( 1 ),
				Term Value(
					Concentration( 2.5, Lock( 0 ), Show( 1 ) ),
					Group("Std", Lock( 0 ), Show( 1 ) )
				)
			),
			:Name("Log10 Vg/mL")<< {Summary of Fit( 1 ), Analysis of Variance( 1 ),
			Parameter Estimates( 1 ), Lack of Fit( 0 ), Scaled Estimates( 1 ),
			Plot Actual by Predicted( 1 ), Plot Residual by Predicted( 0 ),
			Plot Residual by Row( 1 ), Plot Studentized Residuals( 0 ),
			Plot Effect Leverage( 1 ), Plot Residual by Normal Quantiles( 0 ),
			Box Cox Y Transformation( 0 ), Show All Confidence Intervals( 1 ),
			Show VIF( 1 )}
			)
		);
		model7r = model7 << report;
		model7quadss = model7r["Scaled Estimates"][columnbox( "Scaled Estimate" )] << getasmatrix;
		model7conc = model7quadss[4];
		model7quad = model7quadss[7];
		model7quadp = Round( abs(Abs( model7quad * 1 ) / (model7conc * 2)) * 100, 3 );//Linearity Ratio Formula
		model7r << close window;

//Model 8) STD Low Dose and Test High Dose Excluded
	dttextsum2 << clear row states;
	dttextsum2 << select where( :Outlier Within Group == "Outlier" ) << exclude;
	dttextsum2 << select where( :Outlier Between Group == "Outlier" ) << exclude;
	dttextsum2 << select where( :Group == rstandard | :Group == samplenames[j] ) << invert row selection <<
	exclude << Hide;
	dttextsum2 << select where( :Group == rstandard & :Name( "MOI (Vg/cell)" ) == minmoi ) << exclude;
	dttextsum2 << select where( :Group == samplenames[j] & :Name( "MOI (Vg/cell)" ) == maxmoi ) << exclude;
	dttextsum2 << select all rows;
	dttextsum2 << invert row selection;

		model8 = Fit Curve(
	Y( :Name( "Log10 Vg/mL" ) ),
	X( :Name( "Log 10 MOI (Vg/cell)" )),
	Group( :Group),
	Fit Linear(
		Equivalence Test(
			Reference Group(rstandard ), 
			Equivalence with Ratios(
				1,
				Set Decision Lines( 0.5, 1.5 ),
				Show Summary Report( 1 )
				)
			)
		)
	);
	model8r = model8 << report;
	model8rootmean = model8r["Model Comparison"][columnbox( "RMSE" )] << getasmatrix;
	model8rsquare = model8r["Model Comparison"][columnbox( "R-Square" )] << getasmatrix;
	model8r2 = model8rsquare[1];
	model8rmse = model8rootmean[1];

	//slope ratio value
	model8ratio = model8r["Equivalence Summary"][columnbox( "Ratio")]<< get as matrix;
	model8sloperatio = model8ratio[2];
	
	//slope ratio lower limit 
	model8ratiolower = model8r["Equivalence Summary"][columnbox( "Lower Confidence Limit")]<< get as matrix;
	model8sloperatiolower = model8ratiolower[2];

	//slope ratio upper limit 
	model8ratioupper = model8r["Equivalence Summary"][columnbox( "Upper Confidence Limit")]<< get as matrix;
	model8sloperatioupper = model8ratioupper[2];
	
	model8r << close window;
	
		//model 8 quad and linearity ratio
		model8 =Fit Model(
		Y(:Name( "Log10 Vg/mL" ) ),
		Effects(
			:Group,
			:Name( "Log 10 MOI (Vg/cell)" ),
			:Group* :Name( "Log 10 MOI (Vg/cell)" ),
			:Name( "Log 10 MOI (Vg/cell)" ) * :Name( "Log 10 MOI (Vg/cell)" )
		),
		Personality( "Standard Least Squares" ),
		Emphasis( "Effect Leverage" ),
		Run(
			Profiler(
				1,
				Confidence Intervals( 1 ),
				Term Value(
					Concentration( 2.5, Lock( 0 ), Show( 1 ) ),
					Group( "Std", Lock( 0 ), Show( 1 ) )
				)
			),
			:Name("Log10 Vg/mL")<< {Summary of Fit( 1 ), Analysis of Variance( 1 ),
			Parameter Estimates( 1 ), Lack of Fit( 0 ), Scaled Estimates( 1 ),
			Plot Actual by Predicted( 1 ), Plot Residual by Predicted( 0 ),
			Plot Residual by Row( 1 ), Plot Studentized Residuals( 0 ),
			Plot Effect Leverage( 1 ), Plot Residual by Normal Quantiles( 0 ),
			Box Cox Y Transformation( 0 ), Show All Confidence Intervals( 1 ),
			Show VIF( 1 )}
			)
		);
		model8r = model8 << report;
		model8quadss = model8r["Scaled Estimates"][columnbox( "Scaled Estimate" )] << getasmatrix;
		model8conc = model8quadss[4];
		model8quad = model8quadss[7];
		model8quadp = Round( abs(Abs( model8quad * 1 ) / (model8conc * 2)) * 100, 3 );//Linearity Ratio Formula
		model8r << close window;

//Model 9) STD High Dose and Test Low Dose Excluded
	dttextsum2 << clear row states;
	dttextsum2 << select where( :Outlier Within Group == "Outlier" ) << exclude;
	dttextsum2 << select where( :Outlier Between Group == "Outlier" ) << exclude;
	dttextsum2 << select where( :Group == rstandard | :Group == samplenames[j] ) << invert row selection <<
	exclude << Hide;
	dttextsum2 << select where( :Group == rstandard & :Name( "MOI (Vg/cell)" ) == maxmoi ) << exclude;
	dttextsum2 << select where( :Group == samplenames[j] & :Name( "MOI (Vg/cell)" ) == minmoi ) << exclude;
	dttextsum2 << select all rows;
	dttextsum2 << invert row selection;

	model9 = Fit Curve(
	Y( :Name( "Log10 Vg/mL" ) ),
	X( :Name( "Log 10 MOI (Vg/cell)" )),
	Group( :Group),
	Fit Linear(
		Equivalence Test(
			Reference Group(rstandard ), 
			Equivalence with Ratios(
				1,
				Set Decision Lines( 0.5, 1.5 ),
				Show Summary Report( 1 )
				)
			)
		)
	);
	model9r = model9 << report;
	model9rootmean = model9r["Model Comparison"][columnbox( "RMSE" )] << getasmatrix;
	model9rsquare = model9r["Model Comparison"][columnbox( "R-Square" )] << getasmatrix;
	model9r2 = model9rsquare[1];
	model9rmse = model9rootmean[1];

	//slope ratio value
	model9ratio = model9r["Equivalence Summary"][columnbox( "Ratio")]<< get as matrix;
	model9sloperatio = model9ratio[2];
	
	//slope ratio lower limit 
	model9ratiolower = model9r["Equivalence Summary"][columnbox( "Lower Confidence Limit")]<< get as matrix;
	model9sloperatiolower = model9ratiolower[2];

	//slope ratio upper limit 
	model9ratioupper = model9r["Equivalence Summary"][columnbox( "Upper Confidence Limit")]<< get as matrix;
	model9sloperatioupper = model9ratioupper[2];
	
	model9r << close window;

		//model 9 quad and linearity ratio
		model9 =Fit Model(
		Y(:Name( "Log10 Vg/mL" ) ),
		Effects(
			:Group,
			:Name( "Log 10 MOI (Vg/cell)" ),
			:Group* :Name( "Log 10 MOI (Vg/cell)" ),
			:Name( "Log 10 MOI (Vg/cell)" ) * :Name( "Log 10 MOI (Vg/cell)" )
		),
		Personality( "Standard Least Squares" ),
		Emphasis( "Effect Leverage" ),
		Run(
			Profiler(
				1,
				Confidence Intervals( 1 ),
				Term Value(
					Concentration( 2.5, Lock( 0 ), Show( 1 ) ),
					Group( "Std", Lock( 0 ), Show( 1 ) )
				)
			),
			:Name("Log10 Vg/mL")<< {Summary of Fit( 1 ), Analysis of Variance( 1 ),
			Parameter Estimates( 1 ), Lack of Fit( 0 ), Scaled Estimates( 1 ),
			Plot Actual by Predicted( 1 ), Plot Residual by Predicted( 0 ),
			Plot Residual by Row( 1 ), Plot Studentized Residuals( 0 ),
			Plot Effect Leverage( 1 ), Plot Residual by Normal Quantiles( 0 ),
			Box Cox Y Transformation( 0 ), Show All Confidence Intervals( 1 ),
			Show VIF( 1 )}
			)
		);
		model9r = model9 << report;
		model9quadss = model9r["Scaled Estimates"][columnbox( "Scaled Estimate" )] << getasmatrix;
		model9conc = model9quadss[4];
		model9quad = model9quadss[7];
		model9quadp = Round( abs(Abs( model9quad * 1 ) / (model9conc * 2)) * 100, 3 );//Linearity Ratio Formula
		model9r << close window;
	
//Build the validity lists and Model Selection Table
	parallellist = List();
	parallellowerlist = List();
	parallelupperlist = List();
	modellist = List();
	linearitylist = List();
	r2list = List();
	rmselist = List();
	
//PLA List
	parallellist[1] = model1sloperatio;
	parallellist[2] = model2sloperatio;
	parallellist[3] = model3sloperatio;
	parallellist[4] = model4sloperatio;
	parallellist[5] = model5sloperatio;
	parallellist[6] = model6sloperatio;
	parallellist[7] = model7sloperatio;
	parallellist[8] = model8sloperatio;
	parallellist[9] = model9sloperatio;
	
		//Parallel List of slope ratio lower CI
	parallellowerlist[1] = model1sloperatiolower;
	parallellowerlist[2] = model2sloperatiolower;
	parallellowerlist[3] = model3sloperatiolower;
	parallellowerlist[4] = model4sloperatiolower;
	parallellowerlist[5] = model5sloperatiolower;
	parallellowerlist[6] = model6sloperatiolower;
	parallellowerlist[7] = model7sloperatiolower;
	parallellowerlist[8] = model8sloperatiolower;
	parallellowerlist[9] = model9sloperatiolower;
	
	//Parallel List of slope ratio of upper CI
	parallelupperlist[1] = model1sloperatioupper;
	parallelupperlist[2] = model2sloperatioupper;
	parallelupperlist[3] = model3sloperatioupper;
	parallelupperlist[4] = model4sloperatioupper;
	parallelupperlist[5] = model5sloperatioupper;
	parallelupperlist[6] = model6sloperatioupper;
	parallelupperlist[7] = model7sloperatioupper;
	parallelupperlist[8] = model8sloperatioupper;
	parallelupperlist[9] = model9sloperatioupper;

//Model List
	modellist[1] = "Model 1, All Doses";
	modellist[2] = "Model 2, Low Standard and Test Doses Excluded";
	modellist[3] = "Model 3, High Standard and Test Doses Excluded";
	modellist[4] = "Model 4, Standard Low Dose Only Excluded";
	modellist[5] = "Model 5, Standard High Dose Only Excluded";
	modellist[6] = "Model 6, Test Low Dose Only Excluded";
	modellist[7] = "Model 7, Test High Dose Only Excluded";
	modellist[8] = "Model 8, Standard Low Dose and Test High Dose Excluded";
	modellist[9] = "Model 9, Standard High Dose and Test Low Dose Excluded";
//Linearity List
	linearitylist[1] = model1quadp;
	linearitylist[2] = model2quadp;
	linearitylist[3] = model3quadp;
	linearitylist[4] = model4quadp;
	linearitylist[5] = model5quadp;
	linearitylist[6] = model6quadp;
	linearitylist[7] = model7quadp;
	linearitylist[8] = model8quadp;
	linearitylist[9] = model9quadp;
//R2 List
	r2list[1] = model1r2;
	r2list[2] = model2r2;
	r2list[3] = model3r2;
	r2list[4] = model4r2;
	r2list[5] = model5r2;
	r2list[6] = model6r2;
	r2list[7] = model7r2;
	r2list[8] = model8r2;
	r2list[9] = model9r2;
//RMSE List
	rmselist[1] = model1rmse;
	rmselist[2] = model2rmse;
	rmselist[3] = model3rmse;
	rmselist[4] = model4rmse;
	rmselist[5] = model5rmse;
	rmselist[6] = model6rmse;
	rmselist[7] = model7rmse;
	rmselist[8] = model8rmse;
	rmselist[9] = model9rmse;

//Build the Masking and Validity Criteria Table and Select the Best Model
	//Build the Masking and Validity Criteria Table and Select the Best Model
	dtmasking = New Table( "Masking and Validity","invisible" );
	dtmasking << add rows( 9 );
	dtmasking << New Column( "Model", character, set values( modellist ) );
	dtmasking << New Column( "Parallelism Slope Ratio", continuous, set values( parallellist ) );
	dtmasking << New Column( "Parallelism Slope Ratio Lower 95%", continuous, set values( parallellowerlist ) );
	dtmasking << New Column( "Parallelism Slope Ratio Upper 95%", continuous, set values( parallelupperlist ) );	
	dtmasking << New Column( "Linearity Ratio", continuous, set values( linearitylist ) );
	dtmasking << New Column( "R2", continous, set values( r2list ) );
	dtmasking << New Column( "RMSE", continous, set values( rmselist ) );
	dtmasking << delete columns( :Column 1 );
	:Name("Parallelism Slope Ratio") << Format( "Fixed Dec", 7, 3 );
	:Name("Parallelism Slope Ratio Lower 95%") << Format( "Fixed Dec", 7, 3)<<hide(1);
	:Name("Parallelism Slope Ratio Upper 95%") << Format( "Fixed Dec", 7, 3)<<hide(1); 
	:Linearity Ratio << Format( "Fixed Dec", 7, 3 );
	:R2 << Format( "Fixed Dec", 7, 3 );
	:RMSE << Format( "Fixed Dec", 7, 3 );
	
	//Determine the model
	dtmasking<<New Column( "Linearity Test",
	Character,
	"Nominal",
	Formula( If( :Linearity Ratio < linearity_limit, "Ok for Linearity", "Fail for Linearity" ) ),
	Set Display Width( 134 )
);
:Linearity Test<<hide;
	dtmasking<<New Column( "Parallelism Test",
	Character,
	"Nominal",
	Formula(
		If(
			:Name( "Parallelism Slope Ratio" ) >= lowerparallel_limit &
			:Name( "Parallelism Slope Ratio" ) <= upperparallel_limit,
			"Ok for Parallelism",
			"Fail for Parallelism"
		)
	)
);
:Parallelism Test<<hide;
	dtmasking<<New Column( "Combined",
	Character,
	"Nominal",
	Formula( :Linearity Test || " " || :Parallelism Test ),
	Set Display Width( 304 )
);
:Combined<<hide;

	dtmasking << New Column( "Validity Evaluation",
		Character,
		"Nominal",
		Set Property(
			"Value Colors",
			{"Fails both Parallelism and Linearity" = 35, "Fails Parallelism and is Linear" = -16768477,
			"Parallel and Fails Linearity" = -16768477, "Parallel and Linear" = -15400938}
		),
		Color Cell by Value,
		Formula(
			If(
				:Parallelism Test == "Ok for Parallelism" & :Linearity Test == "Ok for Linearity", "Parallel and Linear",
				:Parallelism Test != "Ok for Parallelism" & :Linearity Test == "Ok for Linearity", "Fails Parallelism and is Linear",
				:Parallelism Test== "Ok for Parallelism"& :Linearity Test != "Ok for Linearity", "Parallel and Fails Linearity",
				:Parallelism Test != "Ok for Parallelism"& :Linearity Test != "Ok for Linearity", "Fails both Parallelism and Linearity"
			)
		)
	);
	
	dtmasking << New Column( "Masking Rank",
		Numeric,
		"Continuous",
		Format( "Best", 12 ),
		Formula(
			Match( :Validity Evaluation,
				"Fails Parallelism and is Linear", 2,
				"Parallel and Fails Linearity", 2,
				"Parallel and Linear", 1,
				"Fails both Parallelism and Linearity", 3
			)
		), 

	);
	
	
	:Masking Rank<<hide(1);
	
	dtmasking<<New Column( "Modelling Rank",
		Numeric,
		"Continuous",
		Format( "Best", 12 ),
		Formula(
			If(
				(Contains( :Model, "1" ) | Contains( :Model, "2" ) |
				Contains( :Model, "3" )) & :Masking Rank == 1,
				1,
				2
			)
		)
	);
	
	//create column for difference of slope ratio from 1
	dtmasking<<New Column( "Delta",
		Numeric,
		"Continuous",
		Format( "Best", 12 ),
		Formula( Abs( :Name( "Parallelism Slope Ratio" ) - 1 ) )
	);
	
	
	:Delta<<hide(1);
	
	modellingranklist=:Modelling Rank<<get as matrix;
	
	:Modelling Rank <<hide(1);
	
	if(contains(modellingranklist,1),
	
	//sort based on passing both parallelism and linearity and having the smallest difference in slope ratio to 1
	dtmasking << Sort(
		By(  :Modelling Rank, :Masking Rank, :Delta ),
		Order( Ascending, Ascending, Ascending ),
		replace table( 1 )
	);
	,
	//sort based on passing both parallelism and linearity and having the smallest difference in slope ratio to 1
	dtmasking << Sort(
		By( :Masking Rank, :Delta ),
		Order( Ascending, Ascending ),
		replace table( 1 )
	);
);	
	dtmasking << New Column( "Selected Model", Character, "Nominal", Formula( If( Row() == 1, :Model[1] ) ), );
	modelgetter = :Selected Model << get values;
	plamodel = modelgetter[1];
	paralellsloperatios = :Name("Parallelism Slope Ratio") << get values;
	paralellsloperatioslower = :Name("Parallelism Slope Ratio Lower 95%") <<get values;
	paralellsloperatiosupper = :Name("Parallelism Slope Ratio Upper 95%") <<get values;
	linearityprobs = :Linearity Ratio << get values;
	sloperatioparallel = paralellsloperatios[1];
	sloperatioparallellower = paralellsloperatioslower[1];
	sloperatioparallelupper = paralellsloperatiosupper[1];
	plalinearityprob = linearityprobs[1];
	

If( samplenum==5&totalrownumbers!=192, 

//Page break
		pagebreaker = New Window( "     Nothing Really",
			V List Box( String Col Box( "", {spacer} ), String Col Box( "", {spacer} ), Page Break Box(), )
		);
		pagebreaker << journal << close window;
,
empty();

	);

	//Header for the Model Selection Report
	modelreport = New Window( "     Data Display",
		V List Box(
			H List Box( String Col Box( "", {liner} ) ),
			String Col Box( "", {spacer} ),
			H List Box(
				modelselect = Text Box( Concat( "Model Selection ", samplenames[j] ) ), 
				//String Col Box("", {spacer}),
			)
		),
		V List Box( H List Box( String Col Box( "", {liner} ) ) ), 

	);
	modelselect << Set Font Size( 16 );
	modelselect << Font Color( 19 ) << set Font Style( "Bold" ) << set wrap( 2000 );
	Modelreport << journal << close window;
	dtmasking << journal;
	Close( dtmasking, no save );

//Select the Dose Subset and Masking
	dttextsum2 << clear row states;
	dttextsum2 << select where( :Outlier Within Group == "Outlier" ) << exclude;
	dttextsum2 << select where( :Outlier Between Group == "Outlier" ) << exclude;
	dttextsum2 << select where( :Group == rstandard | :Group == samplenames[j] ) << invert row selection <<
	exclude << Hide;
	dttextsum2 << select all rows;
	dttextsum2 << invert row selection;
	If( plamodel == "Model 1, All Doses",
		a = 1 + 1, 

	);
	If( plamodel == "Model 2, Low Standard and Test Doses Excluded",
		dttextsum2 << select where( :Name( "MOI (Vg/cell)" ) == minmoi ) << exclude, 

	);
	If( plamodel == "Model 3, High Standard and Test Doses Excluded",
		dttextsum2 << select where( :Name( "MOI (Vg/cell)" ) == maxmoi ) << exclude, 

	);
	If( plamodel == "Model 4, Standard Low Dose Only Excluded",
		dttextsum2 << select where( :Group == rstandard & :Name( "MOI (Vg/cell)" ) == minmoi ) << exclude, 

	);
	If( plamodel == "Model 5, Standard High Dose Only Excluded",
		dttextsum2 << select where( :Group == rstandard & :Name( "MOI (Vg/cell)" ) == maxmoi ) << exclude, 

	);
	If( plamodel == "Model 6, Test Low Dose Only Excluded",
		dttextsum2 << select where( :Group == samplenames[j] & :Name( "MOI (Vg/cell)" ) == minmoi ) << exclude, 

	);
	If( plamodel == "Model 7, Test High Dose Only Excluded",
		dttextsum2 << select where( :Group == samplenames[j] & :Name( "MOI (Vg/cell)" ) == maxmoi ) << exclude, 

	);
	If( plamodel == "Model 8, Standard Low Dose and Test High Dose Excluded",
		dttextsum2 << select where( :Group == rstandard & :Name( "MOI (Vg/cell)" ) == minmoi ) << exclude;
		dttextsum2 << select where( :Group == samplenames[j] & :Name( "MOI (Vg/cell)" ) == maxmoi ) << exclude;
	, 

	);
	If( plamodel == "Model 9, Standard High Dose and Test Low Dose Excluded",
		dttextsum2 << select where( :Group == rstandard & :Name( "MOI (Vg/cell)" ) == maxmoi ) << exclude;
		dttextsum2 << select where( :Group == samplenames[j] & :Name( "MOI (Vg/cell)" ) == minmoi ) << exclude;
	);
	dttextsum2 << select all rows;
	dttextsum2 << invert row selection;

//Number of Outliers per Curve Fit


	//Relative Potency Unconstrained
	dtlogweight = dttextsum2 << Summary( Mean( :Name( "Log10 Vg/mL" ) ), Freq( "None" ), Weight( "None" ) );
	logmeanoveryweight = :Name( "Mean(Log10 Vg/mL)" ) << getasmatrix;
	logmeanoveryuncon = logmeanoveryweight[1];
	Close( dtlogweight, no save );
	unconpla = Fit Model(
		Y( :Name( "Log10 Vg/mL" ) ),
		Effects( :Group, :Name( "Log10 MOI (Vg/cell)" ), :Group * :Name( "Log10 MOI (Vg/cell)" ) ),
		Personality( "Standard Least Squares" ),
		Emphasis( "Effect Leverage" ),
		Run(
			Profiler(
				1,
				Confidence Intervals( 1 ),
				Term Value(
					Group( rstandard, Lock( 0 ), Show( 1 ) ),
					Name( "Log10 MOI (Vg/cell)" )(-1.30422, Lock( 0 ), Show( 1 ))
				)
			),
			:Name( "Log10 Vg/mL" ) << {Summary of Fit( 1 ), Analysis of Variance( 1 ),
			Parameter Estimates( 1 ), Scaled Estimates( 1 ), Plot Actual by Predicted( 1 ),
			Plot Residual by Predicted( 1 ), Plot Residual by Row( 1 ), Plot Studentized Residuals( 0 ),
			Plot Effect Leverage( 1 ), Plot Residual by Normal Quantiles( 0 ), Box Cox Y Transformation( 0 ),
			Show VIF( 1 ), Inverse Prediction(
				Response( logmeanoveryuncon ),
				Term Value( Group( All ), Name( "Log10 MOI (Vg/cell)" )(.) )
			)},
			Effect Summary( 0 )
		),
		SendToReport(
			Dispatch(
				{"Response Log10 Vg/mL", "Whole Model", "Regression Plot"},
				"2",
				ScaleBox,
				{Min( 3.575 )}
			),
			Dispatch(
				{"Response Log10 Vg/mL", "Whole Model", "Actual by Predicted Plot"},
				"2",
				ScaleBox,
				{Min( 3.575 )}
			),
			Dispatch( {"Response Log10 Vg/mL", "Prediction Profiler"}, "10000", ScaleBox, {Min( 3.575 )} ),
			Dispatch(
				{"Response Log10 Vg/mL", "Inverse Prediction"},
				"2",
				ScaleBox,
				{Min( 3 ), Max( 6.5 ), Inc( 0.5 ), Minor Ticks( 0 )}
			)
		)
	);

	unconplar = unconpla << report;
	dtunconlogdose = unconplar[Outline Box( "Response Log10 Vg/mL" )][Outline Box( "Inverse Prediction" )][
	Table Box( 1 )] << Make Into Data Table;
	Current Data Table( dtunconlogdose );
	dtunconlogdose << select where( :Group == rstandard );
	dtunconlogdose << move rows( atstart );
	unconlog10dose = :Name ("Predicted Log10 MOI (Vg/cell)")<< get as matrix;
	unconlog10dosel95s = :Name( "Lower 95%" ) << getasmatrix;
	unconlog10doseu95s = :Name( "Upper 95%" ) << getasmatrix;
	Close( dtunconlogdose, no save );
	unconPotency = 10 ^ (unconlog10dose[1]) / 10 ^ (unconlog10dose[2]);
	unconPotencyl95 = 10 ^ (unconlog10dose[1]) / 10 ^ (unconlog10doseu95s[2]);
	unconpotencyu95 = 10 ^ (unconlog10dose[1]) / 10 ^ (unconlog10dosel95s[2]);
	unconplar << close window;

//Relative Potency Constrained
	conpla = Fit Model(
		Y( :Name( "Log10 Vg/mL" ) ),
		Effects( :Group, :Name( "Log10 MOI (Vg/cell)" ), ),
		Personality( "Standard Least Squares" ),
		Emphasis( "Effect Leverage" ),
		Run(
			Profiler(
				1,
				Confidence Intervals( 1 ),
				Term Value(
					Group( rstandard, Lock( 0 ), Show( 1 ) ),
					Name( "Log10 MOI (Vg/cell)" )(-1.30422, Lock( 0 ), Show( 1 ))
				)
			),
			:Name( "Log10 Vg/mL" ) << {Summary of Fit( 1 ), Analysis of Variance( 1 ),
			Parameter Estimates( 1 ), Scaled Estimates( 1 ), Plot Actual by Predicted( 1 ),
			Plot Residual by Predicted( 1 ), Plot Residual by Row( 1 ), Plot Studentized Residuals( 0 ),
			Plot Effect Leverage( 1 ), Plot Residual by Normal Quantiles( 0 ), Box Cox Y Transformation( 0 ),
			Show VIF( 1 ), Inverse Prediction(
				Response( logmeanoveryuncon ),
				Term Value( Group( All ), Name( "Log10 MOI (Vg/cell)" )(.) )
			)},
			Effect Summary( 0 )
		),
		SendToReport(
			Dispatch(
				{"Response Log10 Vg/mL", "Whole Model", "Regression Plot"},
				"2",
				ScaleBox,
				{Min( 3.575 )}
			),
			Dispatch(
				{"Response Log10 Vg/mL", "Whole Model", "Actual by Predicted Plot"},
				"2",
				ScaleBox,
				{Min( 3.575 )}
			),
			Dispatch( {"Response Log10 Vg/mL", "Prediction Profiler"}, "10000", ScaleBox, {Min( 3.575 )} ),
			Dispatch(
				{"Response Log10 Vg/mL", "Inverse Prediction"},
				"2",
				ScaleBox,
				{Min( 3 ), Max( 6.5 ), Inc( 0.5 ), Minor Ticks( 0 )}
			)
		)
	);

	conplar = conpla << report;
	dtconlogdose = conplar[Outline Box( "Response Log10 Vg/mL" )][Outline Box( "Inverse Prediction" )][
	Table Box( 1 )] << Make Into Data Table;
	Current Data Table( dtconlogdose );
	dtconlogdose << select where( :Group == rstandard );
	dtconlogdose << move rows( atstart );
	conlog10dose = :Name("Predicted Log10 MOI (Vg/cell)") << get as matrix;
	conlog10dosel95s = :Name( "Lower 95%" ) << getasmatrix;
	conlog10doseu95s = :Name( "Upper 95%" ) << getasmatrix;
	Close( dtconlogdose, no save );
	conPotency = 10 ^ (conlog10dose[1]) / 10 ^ (conlog10dose[2]);
	conPotencyl95 = 10 ^ (conlog10dose[1]) / 10 ^ (conlog10doseu95s[2]);
	conpotencyu95 = 10 ^ (conlog10dose[1]) / 10 ^ (conlog10dosel95s[2]);
	ciconrange = conpotencyu95 * 100 - conPotencyl95 * 100;
	conslopes = conplar["Parameter Estimates"][columnbox( "Estimate" )] << getasmatrix;
	conslope = conslopes[3];
	doseresponsetests = conplar["Effect Tests"][columnbox( "Prob > F" )] << getasmatrix;
	r2constrained = conplar["Summary of Fit"][columnbox( 1 )] << getasmatrix;
	r2constrained = r2constrained[1];
	doseresponsetest = doseresponsetests[2];
	conplar << close window;

	Current Data Table( dttextsum2 );
	
	//fixed TA log value	
fixedTAvalue = 9.9;


	//constrained EC50 at fixed position for TA
ec50TAcon = Fit Model(
	Y( :Name( "Log10 Vg/mL" ) ),
	Effects(:Group, :Name( "Log10 MOI (Vg/cell)" ) ),
	Personality( "Standard Least Squares" ),
	Emphasis( "Effect Leverage" ),
	Run(
		:Name( "Log10 Vg/mL" ) << {Summary of Fit( 1 ), Analysis of Variance( 1 ), Parameter Estimates( 1 ),
		Scaled Estimates( 1 ), Plot Actual by Predicted( 1 ), Plot Residual by Predicted( 1 ),
		Plot Residual by Row( 1 ), Plot Studentized Residuals( 0 ), Plot Effect Leverage( 1 ),
		Plot Residual by Normal Quantiles( 0 ), Box Cox Y Transformation( 0 ), Show VIF( 1 ),
		Inverse Prediction( Response( fixedTAvalue ), Term Value( Name( "Log10 MOI (Vg/cell)" )(.) ), Group(samplenames[j]) )},
		Effect Summary( 0 )
	),
	SendToReport(
		Dispatch(
			{"Response Log10 Vg/mL", "Inverse Prediction"},
			"2",
			ScaleBox,
			{Min( 3.5 ), Max( 6.5 ), Inc( 0.5 ), Minor Ticks( 0 )}
		)
	)
);
ec50TAconr = ec50TAcon << report;
ec50TAvalues = ec50TAconr["Inverse Prediction"][columnbox( 2 )] << getasmatrix;
ec50TAlog = ec50TAvalues[1];
ec50TAdose = 10 ^ (ec50TAlog);
ec50TAconr << close window;
dttextsum2 << clear row states;
dttextsum2 << select where( :Outlier Within Group == "Outlier" ) << exclude;
dttextsum2 << select where( :Outlier Between Group == "Outlier" ) << exclude;

//unconstrained EC50 at fixed position for TA
ec50TAuncon = Fit Model(
	Y( :Name( "Log10 Vg/mL" ) ),
		Effects( :Group, :Name( "Log10 MOI (Vg/cell)" ), :Group * :Name( "Log10 MOI (Vg/cell)" ) ),
	Personality( "Standard Least Squares" ),
	Emphasis( "Effect Leverage" ),
	Run(
		:Name( "Log10 Vg/mL" ) << {Summary of Fit( 1 ), Analysis of Variance( 1 ), Parameter Estimates( 1 ),
		Scaled Estimates( 1 ), Plot Actual by Predicted( 1 ), Plot Residual by Predicted( 1 ),
		Plot Residual by Row( 1 ), Plot Studentized Residuals( 0 ), Plot Effect Leverage( 1 ),
		Plot Residual by Normal Quantiles( 0 ), Box Cox Y Transformation( 0 ), Show VIF( 1 ),
		Inverse Prediction( Response( fixedTAvalue ), Term Value( Name( "Log10 MOI (Vg/cell)" )(.), Group(samplenames[j]) ) )},
		Effect Summary( 0 )
	),
	SendToReport(
		Dispatch(
			{"Response Log10 Vg/mL", "Inverse Prediction"},
			"2",
			ScaleBox,
			{Min( 3.5 ), Max( 6.5 ), Inc( 0.5 ), Minor Ticks( 0 )}
		)
	)
);
ec50TAunconr = ec50TAuncon << report;
ec50TAunconvalues = ec50TAunconr["Inverse Prediction"][columnbox( 2 )] << getasmatrix;
ec50TAunconlog = ec50TAunconvalues[1];
ec50TAuncondose = 10 ^ (ec50TAunconlog);
ec50TAunconr << close window;


infectparticleresult = num(nominaldose)/ec50TAdose;


	samplist = samplenames;
	Insert Into( samplist, rstandard );
	:Group << Set property( "Value Ordering", samplist );

	If( samplenum == 4&platetotal=="3", 


//Page break
		pagebreaker = New Window( "     Nothing Really",
			V List Box( String Col Box( "", {spacer} ), String Col Box( "", {spacer} ), Page Break Box(), )
		);
		pagebreaker << journal << close window;
	, 
	
if(totalrownumbers==192&j==1|totalrownumbers==192&j==2|totalrownumbers==192&j==3,

//Page break
		pagebreaker = New Window( "     Nothing Really",
			V List Box( String Col Box( "", {spacer} ), String Col Box( "", {spacer} ), Page Break Box(), )
		);
		pagebreaker << journal << close window;
,
if(totalrownumbers==96&j==1|totalrownumbers==96&j==2|totalrownumbers==96&j==3,

//Page break
		pagebreaker = New Window( "     Nothing Really",
			V List Box( String Col Box( "", {spacer} ), String Col Box( "", {spacer} ), Page Break Box(), )
		);
		pagebreaker << journal << close window;
,
if(totalrownumbers==112,

//Page break
		pagebreaker = New Window( "     Nothing Really",
			V List Box( String Col Box( "", {spacer} ), String Col Box( "", {spacer} ), Page Break Box(), )
		);
		pagebreaker << journal << close window;
,
if(totalrownumbers==120,

//Page break
		pagebreaker = New Window( "     Nothing Really",
			V List Box( String Col Box( "", {spacer} ), String Col Box( "", {spacer} ), Page Break Box(), )
		);
		pagebreaker << journal << close window;
,
if(totalrownumbers==152&j==3,

//Page break
		pagebreaker = New Window( "     Nothing Really",
			V List Box( String Col Box( "", {spacer} ), String Col Box( "", {spacer} ), Page Break Box(), )
		);
		pagebreaker << journal << close window;
,
		Empty();
	);
			);
		);
	);
);

);
//Header for Graphs
	graphreport = New Window( "     Data Display",
		V List Box(
			H List Box( String Col Box( "", {liner} ) ),
			String Col Box( "", {spacer} ),
			H List Box(
				graphselect = Text Box( Concat( "Graphs ", samplenames[j] ) ), 
				//String Col Box("", {spacer}),
			)
		),
		V List Box( H List Box( String Col Box( "", {liner} ) ), String Col Box( "", {spacer} ), ), 

	);
	graphselect << Set Font Size( 16 );
	graphselect << Font Color( 19 ) << set Font Style( "Bold" ) << set Wrap( 2000 );
	graphreport << journal << close window;


//subset data table specifically for graphs

dtgraph=dttextsum2<<select where(:Group == rstandard|:Group == samplenames[j])<<subset(invisible);
current data table(dtgraph);

//Graphs
combinedgraphs = New Window( "Graphs",
			H List Box(
				Bivariate(
					Y( :Name( "Log10 Vg/mL" ) ),
					X( :Name( "Log 10 MOI (Vg/cell)" ) ),
					Fit Where( :Name( "Group" ) == rstandard, Fit Each Value( {Line Color( {213, 72, 87} )} ) ),
					Fit Where( :Name( "Group" ) == samplenames[j], Fit Each Value( {Line Color( {64, 111, 223} )} ) ),
					SendToReport(
						Dispatch(
							{},
							"Bivariate Fit of Name Log10 Vg/mL By Log 10 MOI (Vg/cell)",
							OutlineBox,
							{Set Title( "Fit Each Mean" )}
						),
		Dispatch(
			{},
			"1",
			ScaleBox,
			{Scale( "Linear" ), Min( moival5 * .8 ), Max( moival1 * 1.1 ), Inc( 0.5 ),
			Minor Ticks( 0 ), Major Ticks( 0 ), Label Row( Label Orientation( "Vertical" ) )}			),
						Dispatch(
							{},
							"2",
							ScaleBox,
							{Min( graphmin * 0.8 ), Max( graphmax * 1.2 ), Inc( 1 ), Label Row(
								{Show Major Grid( 1 ), Show Minor Grid( 1 )}
							)}
						),
						Dispatch(
							{},
							"Bivar Plot",
							FrameBox,
							{Frame Size( 225, 400 ), Marker Size( 4 ), Row Legend(
								Group,
								Color( 1 ),
								Color Theme( "JMP Default" ),
								Marker( 0 ),
								Marker Theme( "" ),
								Continuous Scale( 0 ),
								Reverse Scale( 1 ),
								Excluded Rows( 0 )
							)}
						),
					)
				);
				Bivariate(
					Y( :Name( "Log10 Vg/mL" ) ),
					X( :Name( "Log 10 MOI (Vg/cell)" ) ),
					Fit Where( :Group == rstandard, Fit Line( {Report( 0 ), Line Color( {213, 72, 87} ), Report( 0 )} ) ),
					Fit Where( :Group == samplenames[j], Fit Line( {Report( 0 ), Line Color( {64, 111, 223} ), Report( 0 )} ) ),
					SendToReport(
						Dispatch(
							{},
							"Bivariate Fit of Name Log10 Vg/mL By Log 10 MOI (Vg/cell)",
							OutlineBox,
							{Set Title( "Unconstrained Parallel Line Analysis" )}
						),
		Dispatch(
			{},
			"1",
			ScaleBox,
						{Scale( "Linear" ), Min( moival5 * .8 ), Max( moival1 * 1.1 ), Inc( 0.5 ),
						Minor Ticks( 0 ), Major Ticks( 0 ), Label Row( Label Orientation( "Vertical" ) )}
		),
						Dispatch(
							{},
							"2",
							ScaleBox,
							{Min( graphmin * 0.8 ), Max( graphmax * 1.2 ), Inc( 1 ), Label Row(
								{Show Major Grid( 1 ), Show Minor Grid( 1 )}
							)}
						),
						Dispatch(
							{},
							"Bivar Plot",
							FrameBox,
							{Frame Size( 225, 400 ), Marker Size( 4 ), DispatchSeg( Line Seg( 1 ), {Line Color( {213, 72, 87} )} ),
							DispatchSeg( Line Seg( 6 ), {Line Color( {64, 111, 223} )} ), Row Legend(
								Group,
								Color( 1 ),
								Color Theme( "JMP Default" ),
								Marker( 0 ),
								Marker Theme( "" ),
								Continuous Scale( 0 ),
								Reverse Scale( 1 ),
								Excluded Rows( 0 )
							)}
						),
					)
				);
				Bivariate(
					Y( :Name( "Log10 Vg/mL" ) ),
					X( :Name( "Log 10 MOI (Vg/cell)" ) ),
					Fit Where(
						:Group == rstandard,
						Fit Special( Slope( conslope ), {Line Color( {212, 73, 88} ), Report( 0 )} )
					),
					Fit Where(
						:Group == samplenames[j],
						Fit Special( Slope( conslope ), {Line Color( {66, 112, 221} ), Report( 0 )} )
					),
					SendToReport(
						Dispatch(
							{},
							"Bivariate Fit of Name Log10 Vg/mL By Log 10 MOI (Vg/cell)",
							OutlineBox,
							{Set Title( "Constrained Parallel Line Analysis" )}
						),
		Dispatch(
			{},
			"1",
			ScaleBox,
						{Scale( "Linear" ), Min( moival5 * .8 ), Max( moival1 * 1.1 ), Inc( 0.5 ),
						Minor Ticks( 0 ), Major Ticks( 0 ), Label Row( Label Orientation( "Vertical" ) )}
		),
						Dispatch(
							{},
							"2",
							ScaleBox,
							{Min( graphmin * 0.8 ), Max( graphmax * 1.2 ), Inc( 1 ), Label Row(
								{Show Major Grid( 1 ), Show Minor Grid( 1 )}
							)}
						),
						Dispatch(
							{},
							"Bivar Plot",
							FrameBox,
							{Frame Size( 225, 400 ), Marker Size( 4 ), DispatchSeg( Line Seg( 1 ), {Line Color( {213, 72, 87} )} ),
							DispatchSeg( Line Seg( 6 ), {Line Color( {64, 111, 223} )} ), Row Legend(
								Group,
								Color( 1 ),
								Color Theme( "JMP Default" ),
								Marker( 0 ),
								Marker Theme( "" ),
								Continuous Scale( 0 ),
								Reverse Scale( 1 ),
								Excluded Rows( 0 )
							)}
						),
					)
				);
			)
		);
		combinedgraphs << journal;
		combinedgraphs << close window;
		close(dtgraph, no save);
		
//Build Validity Check Table
	dtvalidity = New Table( "Validity" );
	dtvalidity << add rows( 6 );
	dtvalidity << New Column( "Validity Criteria", character, set values( criterialist ) );
	dtvalidity << delete columns( :Column 1 );
	dtvalidity << New Column( "Validity Limits", continuous, set values( validlist ) );
	:Validity Limits << Format( "Best", 7 );
	validityresultslist = List();
	validityresultslist[1] = (Round( refcurvedepth, 0 ));
	validityresultslist[2] = (minngroup);
	validityresultslist[3] = (Round( sloperatioparallel, 2 ));
	validityresultslist[4] = (Round( sloperatioparallel, 2 ));
	validityresultslist[5] = (Round( plalinearityprob, 2 ));
	validityresultslist[6] = (Round( r2constrained, 2 ));
	validityresultslist[7] = (Round( Abs( (conPotency - unconPotency) ) * 100, 0 ));
	validityresultslist[8] = (Round( doseresponsetest, 2 ));
	validityresultslist[9] = (Round( (ec50refunconfourdose), 0 ));
	validityresultslist[10] = (Round( (ec50refunconfourdose), 0 ));



	dtvalidity << New Column( "Validity Results", continuous, set values( validityresultslist ) );
	dtvalidity << New Column( "Assay Validity",
		Character,
		"Nominal",
		Formula(
			Match( :Validity Criteria,
				"Reference Standard Curve Depth ≥",
					If( :Validity Results >= :Validity Limits,
						"Pass Validity Criterion",
						"Fail Validity Criterion"
					),
				"Sample Size Per Dose ≥",
					If( :Validity Results >= :Validity Limits,
						"Pass Validity Criterion",
						"Fail Validity Criterion"
					),
				"Parallelism Slope Ratio Lower Limit ≥",
					If( :Validity Results >= :Validity Limits,
						"Pass Validity Criterion",
						"Fail Validity Criterion"
					),
				"Parallelism Slope Ratio Upper Limit ≤",
					If( :Validity Results <= :Validity Limits,
						"Pass Validity Criterion",
						"Fail Validity Criterion"
					),
				"Linearity Ratio  ≤",
					If( :Validity Results <= :Validity Limits,
						"Pass Validity Criterion",
						"Fail Validity Criterion"
					),
				"R-squared ≥",
					If( :Validity Results >= :Validity Limits,
						"Pass Validity Criterion",
						"Fail Validity Criterion"
					),
				"Abs(Unconstrained - Constrained Relative Potency Delta) ≤",
					If( :Validity Results <= :Validity Limits,
						"Pass Validity Criterion",
						"Fail Validity Criterion"
					),
				"Dose Reponse Test  ≤",
					If( :Validity Results <= :Validity Limits,
						"Pass Validity Criterion",
						"Fail Validity Criterion"
					),
				"EC50 5 Dose Standard Unconstrained LSL Vg/cell ≥",
					If( :Validity Results >= :Validity Limits,
						"Pass Validity Criterion",
						"Fail Validity Criterion"
					),
				"EC50 5 Dose Standard Unconstrained USL Vg/cell ≤",
					If( :Validity Results <= :Validity Limits,
						"Pass Validity Criterion",
						"Fail Validity Criterion"
					),
				Empty()
			)
		),
		Set Property(
			"Value Colors",
			{"Fail Validity Criterion" = -16768477, "Pass Validity Criterion" = -15400938}
		),
		Color Cell by Value(1), 

	);
	
	dtvalidity << New Column( "Overall Validity",
		Character,
		"Nominal",
		Formula(
			If( Row() == 1,
				If(
					:Assay Validity[1] == "Pass Validity Criterion" & :Assay Validity[2] ==
					"Pass Validity Criterion" & :Assay Validity[3] == "Pass Validity Criterion" &
					:Assay Validity[4] == "Pass Validity Criterion" & :Assay Validity[5] ==
					"Pass Validity Criterion" & :Assay Validity[6] == "Pass Validity Criterion" &
					:Assay Validity[7] == "Pass Validity Criterion" & :Assay Validity[8] ==
					"Pass Validity Criterion" & :Assay Validity[9] == "Pass Validity Criterion"
					& :Assay Validity[10] == "Pass Validity Criterion",
					"Assay is Valid",
					"Fail One or More Validity Criteria"
				)
			)
		),
		Set Property(
			"Value Colors",
			{"Assay is Valid" = -15400938, "Fail One or More Validity Criteria" = -16768477}
		),
		Color Cell by Value(1),

	);
	delta = validityresultslist[6];
	avalidity = :Name( "Assay Validity" ) << get values;
	parallelismvalidity1 = avalidity[3];
	linearityvalidity1 = avalidity[4];
	rpdeltavalidity1 = avalidity[6];
	avalidity = avalidity[1];

	reportable = :Overall Validity << get values;
	reportable = reportable[1];
	overallvaldity = reportable;

//Header for Validity Report
	validreport = New Window( "     Data Display",
		V List Box(
			H List Box( String Col Box( "", {liner} ) ),
			String Col Box( "", {spacer} ),
			H List Box(
				validselect = Text Box( Concat( "Validity Report ", samplenames[j] ) ),
				String Col Box( "", {spacer} ),

			)
		),
		V List Box( H List Box( String Col Box( "", {liner} ) ), String Col Box( "", {spacer} ), ), 

	);
	validselect << Set Font Size( 16 );
	validselect << Font Color( 19 ) << set Font Style( "Bold" ) << set Wrap( 2000 );
	validreport << journal << close window;
	dtvalidity << journal;
	Close( dtvalidity, no save );

//Potency Report
	dtrp = New Table( "Potency Report" );
	dtrp << add rows( 1 );
	:Column 1 << set name( "EC50 Reference Standard" );
	:EC50 Reference Standard << set values( {Round( 10 ^ (conlog10dose[1]), 4 )} );
	ec50refer = 10 ^ (conlog10dose[1]);
	dtrp << New Column( "EC50 Test", continuous, formula( Round( 10 ^ (conlog10dose[2]), 4 ) ) );
	ec50tester = 10 ^ (conlog10dose[2]);
	dtrp << New Column( "Relative Potency Uncorrected", continuous, formula( Round( conpotency * 100, 1 ) ) );
	rpuncorrected = conpotency * 100;
	dtrp << New Column( "Reference Standard Correction Factor", continuous, formula( STDLotCF ) );
	dtrp << New Column( "Reference Standard Stability Correction Factor", continuous, formula( StabilityCF ) );
	dtrp << New Column( "Relative Potency Reportable Result",
		continuous,
		formula( STDLotCF + StabilityCF + Round( conpotency * 100, 1 ) )
	);
	rpreportresult = :Relative Potency Reportable Result << get values;
	rpreportresult = rpreportresult[1];
	dtrp << New Column( "Assay RP Upper 95%",
		continuous,
		formula( STDLotCF + StabilityCF + Round( conpotencyu95 * 100, 1 ) )
	);
	rpupper = :Name( "Assay RP Upper 95%" ) << get values;
	rpupper = rpupper[1];
	dtrp << New Column( "Assay RP Lower 95%",
		continuous,
		formula( STDLotCF + StabilityCF + Round( conPotencyl95 * 100, 1 ) )
	);
	rplower = :Name( "Assay RP Lower 95%" ) << get values;
	rplower = rplower[1];

//Page break
if(j==1&totalrownumbers==144,

//Page break
		pagebreaker = New Window( "     Nothing Really",
			V List Box( String Col Box( "", {spacer} ), String Col Box( "", {spacer} ), Page Break Box(), )
		);
		pagebreaker << journal << close window;
,

empty()

);

//Header for Potency Report
	potencyreport = New Window( "     Data Display",
		V List Box(
			H List Box( String Col Box( "", {liner} ) ),
			String Col Box( "", {spacer} ),
			H List Box(
				potencyselect = Text Box( Concat( "Relative Potency  and Infectious Particle Ratio ", samplenames[j] ) ),
				String Col Box( "", {spacer} ),

			)
		),
		V List Box( H List Box( String Col Box( "", {liner} ) ), String Col Box( "", {spacer} ), ), 

	);
	potencyselect << Set Font Size( 16 );
	potencyselect << Font Color( 19 ) << set Font Style( "Bold" ) << set Wrap( 2000 );
	potencyreport << journal << close window;
	dtrp << journal;
	Close( dtrp, no save );

	dtir= new table("Infectious Particle Ratio Table","invisible");
	dtir<<add rows(1);
	dtir << delete columns( :Column 1 );
	dtir << New Column( "Infectious Particle Ratio", continuous, Format( "Fixed Dec", 12, 1 ), set values( {infectparticleresult} ) );
	dtir << New Column( "Infectious Particle Ratio Lower Limit", continuous, Format( "Fixed Dec", 12, 1 ), set values(  {infectpartLSL} ) );
	dtir << New Column( "Infectious Particle Ratio Upper Limit", continuous,  Format( "Fixed Dec", 12, 1 ), set values({infectpartUSL}));
	dtir << journal;
	
	close(dtir, no save);


//RP Delta Report
	ec50standard = List();
	ec50test = List();
	potencylist = List();
	ec50standard[1] = 10 ^ (unconlog10dose[1]);
	ec50standard[2] = 10 ^ (conlog10dose[1]);
	If( j == 1,
		ec50standard1uncon = ec50standard[1],
		ec50standard2uncon = ec50standard[1]
	);
	If( j == 1,
		ec50standard1con = ec50standard[2],
		ec50standard2con = ec50standard[2]
	);
	ec50test[1] = 10 ^ (unconlog10dose[2]);
	ec50test[2] = 10 ^ (conlog10dose[2]);
	If( j == 1,
		ec50test1uncon = ec50test[1],
		ec50test2uncon = ec50test[1]
	);
	If( j == 1,
		ec50test1con = ec50test[2],
		ec50test2con = ec50test[2]
	);
	potencylist[1] = unconpotency * 100;
	potencylist[2] = conpotency * 100;
	dtrpd = New Table( "RP Delta" );
	dtrpd << add rows( 2 );
	:Column 1 << set name( "Fitting Method" );
	:Fitting Method << set data type( "Character" );
	:Fitting Method << set values( {"Unconstrained", "Constrained"} );
	dtrpd << New Column( "EC50 Reference Standard", Continuous, Format( "Fixed", 7, 5 ), set values( ec50standard ) );
	dtrpd << New Column( "EC50 Test Article", Continuous, Format( "Fixed", 7, 5 ), set values( ec50test ) );
	dtrpd << New Column( "Relative Potency %",
		Continuous,
		Format( "Fixed", 7, 2 ),
		set values( potencylist )
	);
	dtrpd << New Column( "Relative Potency Delta",
		Continuous,
		Format( "Fixed", 7, 0 ),
		formula( If( Row() == 1, Round( Abs( :Relative Potency %[1] - :Relative Potency %[2] ), 0 ) ) )
	);
	dtrpd << New Column( " Acceptance Criterion ",
		character,
		formula( Concat( "    <= ", Char( RPDeltalimit ) ) )
	);
	dtrpd << New Column( "RP Delta Check",
		character,
		formula( If( Row() == 1, If( Abs( :Relative Potency Delta ) <= RPDeltalimit, "Pass", "Fail" ) ) ),
		Set Property( "Value Colors", {"Pass" = -15400938, "Fail" = -16768477} ),
		Color Cell by Value(1),

	);
	dtrpd << journal;
	Close( dtrpd, no save );

	// Collect all sample results
	samplesizedose[j] = minngroup;
	parallelismsample[j] = sloperatioparallel;
	parallelismvalidity[j] = parallelismvalidity1;
	linearitysample[j] = plalinearityprob;
	linearityvalidity[j] = linearityvalidity1;
	cvperdose[j] = maxcvgroup;
	rpdelta[j] = Round( Abs( (conPotency - unconPotency) ) * 100, 3 );
	doseresponse[j] = doseresponsetest;
	ec50lsl[j] = ec50refunconfourdose;
	ec50usl[j] = ec50refunconfourdose;
	rpdeltavalidity[j] = rpdeltavalidity1;
	samplesec50ref[j] = ec50refer;
	samplesec50test[j] = ec50tester;
	samplesrp[j] = rpreportresult;
	samplesrpu95[j] = rpupper;
	samplesrpl95[j] = rplower;
	samplesIR[j] = infectparticleresult;
	overallvalidity[j] = reportable;
//End of Sample Loop

);

//All Samples Potency Report
//Header for Combined Potency Report
potencyreportall = New Window( "     Data Display",
	V List Box(
		H List Box( String Col Box( "", {liner} ) ),
		String Col Box( "", {spacer} ),
		H List Box(
			potencyselectall = Text Box( "Relative Potency All Samples" ),
			String Col Box( "", {spacer} ),

		)
	),
	V List Box( H List Box( String Col Box( "", {liner} ) ), String Col Box( "", {spacer} ), ), 

);
potencyselectall << Set Font Size( 16 );
potencyselectall << Font Color( 19 ) << set Font Style( "Bold" ) << set Wrap( 2000 );
potencyreportall << journal << close window;

//Samples Summary All Relative Potency Table
dtrpall = New Table( "Potency Report" );
dtrpall << add rows( samplenum );
dtrpall << New Column( "Sample Name", character, set values( samplenames ) );
dtrpall << delete columns( :Column 1 );
dtrpall << New Column( "EC50 Reference Standard", continuous, set values( samplesec50ref ) );
dtrpall << New Column( "EC50 Test", continuous, set values( samplesec50test ) );
dtrpall << New Column( "Reportable RP", continuous, Format( "Fixed Dec", 12, 1 ), set values( samplesrp ) );
dtrpall << New Column( "RP Lower 95", continuous, Format( "Fixed Dec", 12, 1 ), set values( samplesrpl95 ) );
dtrpall << New Column( "RP Upper 95", continuous, Format( "Fixed Dec", 12, 1 ), set values( samplesrpu95 ) );
dtrpall << New Column( "Stderror", continuous, formula( ((:RP Upper 95 - :Reportable RP) / 1.96) ) );
:Stderror << hide;

dtrpall << journal;
Close( dtrpall, no save );

//Add Potency Limits to report below table
	plowertb = Text Box( Concat( "    Lower Specification Limit: ", Char( lowerspeclimit ) ) );
	plowertb << Font Color( 19 ) << set Font Style( "Bold" );
	plowertb << Set Wrap( 1000 );
	plowertb << Set Font Size( 12 );
	plowertb << journal;

//Add Potency Limits to report below table
	puppertb = Text Box( Concat( "   Upper Specification Limi: ", Char( upperspeclimit ) ) );
	puppertb << Font Color( 19 ) << set Font Style( "Bold" );
	puppertb << Set Wrap( 1000 );
	puppertb << Set Font Size( 12 );
	puppertb << journal;

//Samples Summary All Potency Units Table
dtpall = New Table( "Potency Report" );
dtpall << add rows( samplenum );
dtpall << New Column( "Sample Name", character, set values( samplenames ) );
dtpall << delete columns( :Column 1 );
dtpall << New Column( "Reportable RP", continuous, set values( samplesrp ) );
:Reportable RP << hide;
dtpall << New Column( "RP Lower 95", continuous, set values( samplesrpl95 ) );
:RP Lower 95 << hide;
dtpall << New Column( "RP Upper 95", continuous, set values( samplesrpu95 ) );
:RP Upper 95 << hide;

dtpall << New Column( "Overall Validity",
	Character,
	"Nominal",
	Set Property(
		"Value Colors",
		{"Assay is Valid" = -15400938, "Fail One or More Validity Criteria" = -16768477}
	),
	Color Cell by Value(1),
	Set Values( overallvalidity ),
	Set Display Width( 200 )
);

dtpall << New Column( "OOS",
	character,
	Set Property(
		"Value Colors",
		{"Within Limits" = -15400938, "OOS" = -15400938, "Invalid Assay Results not Reportable" = -16768477}
	),
	formula( If( lowerspeclimit <= :Reportable RP <= upperspeclimit, "Within Limits", "OOS" ) ),
	Set Property( "Value Colors", {"OOS" = -16768477, "Within Limits" = -15400938} ),
	Color Cell by Value(1), 
	 
);

If( N Rows( dtpall ) == 5,
	validitycheck = :Overall Validity << get values;
	validitycheck1 = validitycheck[1];
	validitycheck2 = validitycheck[2];
	validitycheck3 = validitycheck[3];
	validitycheck4 = validitycheck[4];
	validitycheck5 = validitycheck[5];
,
	If( N Rows( dtpall ) == 4,
		validitycheck = :Overall Validity << get values;
		validitycheck1 = validitycheck[1];
		validitycheck2 = validitycheck[2];
		validitycheck3 = validitycheck[3];
		validitycheck4 = validitycheck[4];
	,
		If( N Rows( dtpall ) == 3,
			validitycheck = :Overall Validity << get values;
			validitycheck1 = validitycheck[1];
			validitycheck2 = validitycheck[2];
			validitycheck3 = validitycheck[3];
		,
			If( N Rows( dtpall ) == 2,
				validitycheck = :Overall Validity << get values;
				validitycheck1 = validitycheck[1];
				validitycheck2 = validitycheck[2];
			,
				If( N Rows( dtpall ) == 1,
					validitycheck = :Overall Validity << get values;
					validitycheck1 = validitycheck[1];
				,
					Empty()
				)
			)
		)
	)
);
						
If( N Rows( dtpall ) == 5,
	ooscheck = :OOS << get values;
	ooscheck1 = ooscheck[1];
	ooscheck2 = ooscheck[2];
	ooscheck3 = ooscheck[3];
	ooscheck4 = ooscheck[4];
	ooscheck5 = ooscheck[5];
,
	If( N Rows( dtpall ) == 4,
		ooscheck = :OOS << get values;
		ooscheck1 = ooscheck[1];
		ooscheck2 = ooscheck[2];
		ooscheck3 = ooscheck[3];
		ooscheck4 = ooscheck[4];
	,
		If( N Rows( dtpall ) == 3,
			ooscheck = :OOS << get values;
			ooscheck1 = ooscheck[1];
			ooscheck2 = ooscheck[2];
			ooscheck3 = ooscheck[3];
		,
			If( N Rows( dtpall ) == 2,
				ooscheck = :OOS << get values;
				ooscheck1 = ooscheck[1];
				ooscheck2 = ooscheck[2];
			,
				If( N Rows( dtpall ) == 1,
					ooscheck = :OOS << get values;
					ooscheck1 = ooscheck[1];
				,
					Empty()
				)
			)
		)
	)
);

dtpall << New Column( "Reportable",
	Character,
	"Nominal",
	Formula( If( :Overall Validity == "Assay is Valid", "Reportable", "Not Reportable" ) ),
	Set Property( "Value Colors", {"Not Reportable" = -16768477, "Reportable" = -15400938} ),
	Color Cell by Value(1),
	Set Display Width( 179 )
);

If( N Rows( dtpall ) == 5,
	reportables = :Reportable << get values;
	reportables1 = reportables[1];
	reportables2 = reportables[2];
	reportables3 = reportables[3];
	reportables4 = reportables[4];
	reportables5 = reportables[5];
,
	If( N Rows( dtpall ) == 4,
		reportables = :Reportable << get values;
		reportables1 = reportables[1];
		reportables2 = reportables[2];
		reportables3 = reportables[3];
		reportables4 = reportables[4];
	,
		If( N Rows( dtpall ) == 3,
			reportables = :Reportable << get values;
			reportables1 = reportables[1];
			reportables2 = reportables[2];
			reportables3 = reportables[3];
		,
			If( N Rows( dtpall ) == 2,
				reportables = :Reportable << get values;
				reportables1 = reportables[1];
				reportables2 = reportables[2];
			,
				If( N Rows( dtpall ) == 1,
					reportables = :Reportable << get values;
					reportables1 = reportables[1];
				,
					Empty()
				)
			);
					
		)
	)
);

dtpall << journal;

Close( dtpall, no save );

//Page break to go to another page in the report
pagebreaker = New Window( "     Nothing Really",
	V List Box( String Col Box( "", {spacer} ), String Col Box( "", {spacer} ), Page Break Box(), )
);
pagebreaker << journal << close window;

//Save input files to report (configuration and plate file)
inputreport = New Window( "Input report",
	V List Box( H List Box( String Col Box( "", {liner} ) ) ),
	V List Box(
		String Col Box( "", {spacer} ),
		H List Box( inputname = Text Box( "   Input Files - Configuration File and Plate File(s)" ) ),
		V List Box( H List Box( String Col Box( "", {liner} ) ) ), 

	),
	String Col Box( "", {spacer} ), 

);
inputname << Set Font Size( 16 );
inputname << Font Color( 19 ) << set Font Style( "Bold" );
inputname << Set Wrap (1000);
inputreport << journal << close window;

dtconfig2=Open( Filelist1[1], invisible );

dtconfig2 << journal; 
close(dtconfig2, no save);

// Loading user selected files
dtnamerepeat=list();

For( i = 1, i < platenumber + 1, i++,
	dt = Open(Filelist2[i] );
	dtnamerepeat[i] = dt << get name;
);

If(platenumber==1,  Data Table(dtnamerepeat[1] )<< journal,
If(platenumber==2,  Data Table(dtnamerepeat[1] )<< journal; Data Table(dtnamerepeat[2] )<< journal,
If(platenumber==3,  Data Table(dtnamerepeat[1] )<< journal; Data Table(dtnamerepeat[2] )<< journal; Data Table(dtnamerepeat[3] )<< journal,
)));

//Define setup information to save in pdf
//get the date stamp for the file name
winJOURNAL = Current Journal();
datetimestamper = Substitute( Char( dateint ), ":", "-" );
Current Journal() << Set Window Title( Concat( filenamer || "_" || datetimestamper ) );
winJOURNAL = Current Journal();

//Define setup information to save in pdf
winJOURNAL << Set Print Footers(
	"&d;"/*left*/,
	"Astellas Gene Therapies Proprietary and Confidential Information"/*center*/,
	"Page &pn; of &pc;"/*right*/
);
headerleft = Concat( filenamer || "_" || datetimestamper );
winJOURNAL << Set Print Headers( headerleft, "", "" );



winJOURNAL << Set page setup(

	margins( 0.5, 0.5, 0.5, 0.5 ), 

	scale( 0.55 ), 

	portrait( 1 ), 

	paper size( "A3" )

);



winJOURNAL << get page setup();



// Save pdf and journal
winJOURNAL << get page setup();

//get setup information
winJOURNAL << Save PDF( Concat( pathlocation || "\Reports\" || filenamer||"_"|| datetimestamper || ".pdf" ) );
winJOURNAL << Save Journal( Concat( pathlocation || "\Reports\" ||filenamer||"_"|| datetimestamper || ".jrn" ) );


Current Journal() << close window;

dttextsum2 << save( Concat( pathlocation || "\Reports\" ||filenamer||"_"||datetimestamper || ".jmp" ) );

Close All( data tables );


//Tracking and Trending
//create new row in the tracking and trending data table that records all the trendable results from the report
//create Tracking and Trending table
trackingandtrendingdt = Open( Concat( pathlocation, "\Tracking and Trending\Astellas Infectivity Tracking and Trending.jmp" ), invisible );
Current Data Table( trackingandtrendingdt );
trackingandtrendingdt << Add Rows(
	{:Script Date and Time = timestamp ; :File Name = filenamer ; :Curve Depth =
	curvedepthstd[1] ; :Curve Depth Check = curvedepthcheckers[1] ; :Parallelism Sample 01 = parallelismsample[
	1] ; :Parallelism Sample 02 = If( samplenum < 2,
		Empty(),
		parallelismsample[2]
	) ; :Parallelism Sample 03 = If( samplenum < 3,
		Empty(),
		parallelismsample[3]
	) ; :Parallelism Sample 04 = If( samplenum < 4,
		Empty(),
		parallelismsample[4]
	) ; :Parallelism Sample 05 = If( samplenum < 5,
		Empty(),
		parallelismsample[5]
	) ; :Parallelism Validity 01 = parallelismvalidity[1] ; :Parallelism Validity 02 =
	If( samplenum < 2,
		Empty(),
		parallelismvalidity[2]
	) ; :Parallelism Validity 03 = If( samplenum < 3,
		Empty(),
		parallelismvalidity[3]
	) ; :Parallelism Validity 04 = If( samplenum < 4,
		Empty(),
		parallelismvalidity[4]
	) ; :Parallelism Validity 05 = If( samplenum < 5,
		Empty(),
		parallelismvalidity[5]
	) ; :Linearity Sample 01 = linearitysample[1] ; :Linearity Sample 02 = If( samplenum < 2,
		Empty(),
		linearitysample[2]
	) ; :Linearity Sample 03 = If( samplenum < 3,
		Empty(),
		linearitysample[3]
	) ; :Linearity Sample 04 = If( samplenum < 4,
		Empty(),
		linearitysample[4]
	) ; :Linearity Sample 05 = If( samplenum < 5,
		Empty(),
		linearitysample[5]
	) ; :Linearity Validity 01 = linearityvalidity[1] ; :Linearity Validity 02 =
	If( samplenum < 2,
		Empty(),
		linearityvalidity[2]
	) ; :Linearity Validity 03 = If( samplenum < 3,
		Empty(),
		linearityvalidity[3]
	) ; :Linearity Validity 04 = If( samplenum < 4,
		Empty(),
		linearityvalidity[4]
	) ; :Linearity Validity 05 = If( samplenum < 5,
		Empty(),
		linearityvalidity[5]
	) ; :CV Per Dose 01 = cvperdose[1] ; :CV Per Dose 02 = If( samplenum < 2,
		Empty(),
		cvperdose[2]
	) ; :CV Per Dose 03 = If( samplenum < 3,
		Empty(),
		cvperdose[3]
	) ; :CV Per Dose 04 = If( samplenum < 4,
		Empty(),
		cvperdose[4]
	) ; :CV Per Dose 05 = If( samplenum < 5,
		Empty(),
		cvperdose[5]
	) ; :RP Delta Sample 01 = rpdelta[1] ; :RP Delta Sample 02 = If( samplenum < 2,
		Empty(),
		rpdelta[2]
	) ; :RP Delta Sample 03 = If( samplenum < 3,
		Empty(),
		rpdelta[3]
	) ; :RP Delta Sample 04 = If( samplenum < 4,
		Empty(),
		rpdelta[4]
	) ; :RP Delta Sample 05 = If( samplenum < 5,
		Empty(),
		rpdelta[5]
	) ; :RP Delta Validity 01 = rpdeltavalidity[1] ; :RP Delta Validity 02 = If( samplenum < 2,
		Empty(),
		rpdeltavalidity[2]
	) ; :RP Delta Validity 03 = If( samplenum < 3,
		Empty(),
		rpdeltavalidity[3]
	) ; :RP Delta Validity 04 = If( samplenum < 4,
		Empty(),
		rpdeltavalidity[4]
	) ; :RP Delta Validity 05 = If( samplenum < 5,
		Empty(),
		rpdeltavalidity[5]
	) ; :Dose Response 01 = doseresponse[1] ; :Dose Response 02 = If( samplenum < 2,
		Empty(),
		doseresponse[2]
	) ; :Dose Response 03 = If( samplenum < 3,
		Empty(),
		doseresponse[3]
	) ; :Dose Response 04 = If( samplenum < 4,
		Empty(),
		doseresponse[4]
	) ; :Dose Response 05 = If( samplenum < 5,
		Empty(),
		doseresponse[5]
	) ; :EC 50 LSL 01 = ec50lsl[1] ; :EC 50 LSL 02 = If( samplenum < 2,
		Empty(),
		ec50lsl[2]
	) ; :EC 50 LSL 03 = If( samplenum < 3,
		Empty(),
		ec50lsl[3]
	) ; :EC 50 LSL 04 = If( samplenum < 4,
		Empty(),
		ec50lsl[4]
	) ; :EC 50 LSL 05 = If( samplenum < 5,
		Empty(),
		ec50lsl[5]
	) ; :EC 50 USL 01 = ec50usl[1] ; :EC 50 USL 02 = If( samplenum < 2,
		Empty(),
		ec50usl[2]
	) ; :EC 50 USL 03 = If( samplenum < 3,
		Empty(),
		ec50usl[3]
	) ; :EC 50 USL 04 = If( samplenum < 4,
		Empty(),
		ec50usl[4]
	) ; :EC 50 USL 05 = If( samplenum < 5,
		Empty(),
		ec50usl[5]
	) ; :EC 50 Ref Sample 01 = samplesec50ref[1] ; :EC 50 Ref Sample 02 = If( samplenum < 2,
		Empty(),
		samplesec50ref[2]
	) ; :EC 50 Ref Sample 03 = If( samplenum < 3,
		Empty(),
		samplesec50ref[3]
	) ; :EC 50 Ref Sample 04 = If( samplenum < 4,
		Empty(),
		samplesec50ref[4]
	) ; :EC 50 Ref Sample 05 = If( samplenum < 5,
		Empty(),
		samplesec50ref[5]
	) ; :EC 50 Test Sample 01 = samplesec50test[1] ; :EC 50 Test Sample 02 = If( samplenum < 2,
		Empty(),
		samplesec50test[2]
	) ; :EC 50 Test Sample 03 = If( samplenum < 3,
		Empty(),
		samplesec50test[3]
	) ; :EC 50 Test Sample 04 = If( samplenum < 4,
		Empty(),
		samplesec50test[4]
	) ; :EC 50 Test Sample 05 = If( samplenum < 5,
		Empty(),
		samplesec50test[5]
	) ; :Relative Potency Sample 01 = samplesrp[1] ; :Relative Potency Sample 02 =
	If( samplenum < 2,
		Empty(),
		samplesrp[2]
	) ; :Relative Potency Sample 03 = If( samplenum < 3,
		Empty(),
		samplesrp[3]
	) ; :Relative Potency Sample 04 = If( samplenum < 4,
		Empty(),
		samplesrp[4]
	) ; :Relative Potency Sample 05 = If( samplenum < 5,
		Empty(),
		samplesrp[5]
	) ; :RP Lower 95 Sample 01 = samplesrpl95[1] ; :RP Lower 95 Sample 02 = If( samplenum < 2,
		Empty(),
		samplesrpl95[2]
	) ; :RP Lower 95 Sample 03 = If( samplenum < 3,
		Empty(),
		samplesrpl95[3]
	) ; :RP Lower 95 Sample 04 = If( samplenum < 4,
		Empty(),
		samplesrpl95[4]
	) ; :RP Lower 95 Sample 05 = If( samplenum < 5,
		Empty(),
		samplesrpl95[5]
	) ; :RP Upper 95 Sample 01 = samplesrpu95[1] ; :RP Upper 95 Sample 02 = If( samplenum < 2,
		Empty(),
		samplesrpu95[2]
	) ; :RP Upper 95 Sample 03 = If( samplenum < 3,
		Empty(),
		samplesrpu95[3]
	) ; :RP Upper 95 Sample 04 = If( samplenum < 4,
		Empty(),
		samplesrpu95[4]
	) ; :RP Upper 95 Sample 05 = If( samplenum < 5,
		Empty(),
		samplesrpu95[5]
	) ; :RP Lower 95 Sample 01 = samplesrpl95[1] ; RP Lower 95 Sample 02 = If( samplenum < 2,
		Empty(),
		samplesrpl95[2]
	) ; :RP Lower 95 Sample 03 = If( samplenum < 3,
		Empty(),
		samplesrpl95[3]
	) ; :RP Lower 95 Sample 04 = If( samplenum < 4,
		Empty(),
		samplesrpl95[4]
	) ; :RP Lower 95 Sample 05 = If( samplenum < 5,
		Empty(),
		samplesrpl95[5]
	) ; 
	:Infectious Particle Ratio Sample 01 = samplesIR[1] ; :Infectious Particle Ratio Sample 02 =
	If( samplenum < 2,
		Empty(),
		samplesIR[2]
	) ; :Infectious Particle Ratio Sample 03 = If( samplenum < 3,
		Empty(),
		samplesIR[3]
	) ; :Infectious Particle Ratio Sample 04 = If( samplenum < 4,
		Empty(),
		samplesIR[4]
	) ; :Infectious Particle Ratio Sample 05 = If( samplenum < 5,
		Empty(),
		samplesIR[5]
	) ;:Overall Validity 01 = overallvalidity[1] ; :Overall Validity 02 = If( samplenum < 2,
		Empty(),
		overallvalidity[2]
	) ; :Overall Validity 03 = If( samplenum < 3,
		Empty(),
		overallvalidity[3]
	) ; :Overall Validity 04 = If( samplenum < 4,
		Empty(),
		overallvalidity[4]
	) ; :Overall Validity 05 = If( samplenum < 5,
		Empty(),
		overallvalidity[5]
	) ; :Validity Check 01 = validitycheck[1] ; :Validity Check 02 = If( samplenum < 2,
		Empty(),
		validitycheck[2]
	) ; :Validity Check 03 = If( samplenum < 3,
		Empty(),
		validitycheck[3]
	) ; :Validity Check 04 = If( samplenum < 4,
		Empty(),
		validitycheck[4]
	) ; :Validity Check 05 = If( samplenum < 5,
		Empty(),
		validitycheck[5]
	) ; :OOS Check 01 = ooscheck[1] ; :OOS Check 02 = If( samplenum < 2,
		Empty(),
		ooscheck[2]
	) ; :OOS Check 03 = If( samplenum < 3,
		Empty(),
		ooscheck[3]
	) ; :OOS Check 04 = If( samplenum < 4,
		Empty(),
		ooscheck[4]
	) ; :OOS Check 05 = If( samplenum < 5,
		Empty(),
		ooscheck[5]
	) ; :Reportable Results 01 = reportables[1] ; :Reportable Results 02 = If( samplenum < 2,
		Empty(),
		reportables[2]
	) ; :Reportable Results 03 = If( samplenum < 3,
		Empty(),
		reportables[3]
	) ; :Reportable Results 04 = If( samplenum < 4,
		Empty(),
		reportables[4]
	) ; :Reportable Results 05 = If( samplenum < 5,
		Empty(),
		reportables[5]
	) ; }
);
trackingandtrendingdt << save( Concat( pathlocation, "\Tracking and Trending\Astellas Infectivity Tracking and Trending.jmp" ) );
Close( trackingandtrendingdt, no save );

New Window( "Script Status",
	<<modal,
	Text Box( "Bioassay script is complete." ),
	Text Box( "PDF Report, Journal and JMP files are in the folder’" )
);

fontpref;//set fonts back to user font preferences
tablestyles;//set table styles back to user table style preferences

